[#ftl]
[#--template for the client-side enum type.--]
[#macro writeEnumTypeHeader type]
  [#assign typeName=nameForTypeDefinition(type)/]
#ifndef DEF_${typeName}_H
#define DEF_${typeName}_H

/**
 * ${type.docComment!"(no documentation provided)"?chop_linebreak?replace("\n", "\n * ")}
 */
enum ${typeName}
{
[#list type.enumConstants as constant]

  /**
   * ${constant.docComment!"(no documentation provided)"?chop_linebreak?replace("\n", "\n   * ")}
   */
  ${nameForEnumConstant(type, constant)}[#if constant_has_next],[/#if]
[/#list]
};

/**
 * Reads a ${type.clientSimpleName} from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The ${type.clientSimpleName}, or NULL if unable to be read.
 */
static enum ${typeName} *xmlTextReaderRead${typeName}Type(xmlTextReaderPtr reader);

/**
 * Writes a ${type.clientSimpleName} to XML.
 *
 * @param writer The XML writer.
 * @param _${type.clientSimpleName?uncap_first} The ${type.clientSimpleName} to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWrite${typeName}Type(xmlTextWriterPtr writer, enum ${typeName} *_${type.clientSimpleName?uncap_first});

/**
 * Utility method for getting the enum value for a string.
 *
 * @param _${type.clientSimpleName?uncap_first} The string to format.
 * @return The enum value or NULL on error.
 */
static enum ${typeName} *formatStringTo${typeName}Type(NSString *_${type.clientSimpleName?uncap_first});

/**
 * Utility method for getting the string value of ${type.clientSimpleName}.
 *
 * @param _${type.clientSimpleName?uncap_first} The ${type.clientSimpleName} to format.
 * @return The string value or NULL on error.
 */
static NSString *format${typeName}TypeToString(enum ${typeName} *_${type.clientSimpleName?uncap_first});

#endif /* DEF_${typeName}_H */
[/#macro]
[#macro writeEnumTypeImpl type]
  [#assign typeName=nameForTypeDefinition(type)/]
#ifndef DEF_${typeName}_M
#define DEF_${typeName}_M

/**
 * Reads a ${type.clientSimpleName} from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The ${type.clientSimpleName}, or NULL if unable to be read.
 */
static enum ${typeName} *xmlTextReaderRead${typeName}Type(xmlTextReaderPtr reader)
{
  xmlChar *enumValue = xmlTextReaderReadEntireNodeValue(reader);
  enum ${typeName} *value = calloc(1, sizeof(enum ${typeName}));
  if (enumValue != NULL) {
  [#assign enumValueMap=type.enumValues/]
  [#list type.enumConstants as constant]
    if (xmlStrcmp(enumValue, BAD_CAST "${enumValueMap[constant.simpleName]}") == 0) {
      *value = ${nameForEnumConstant(type, constant)};
      free(enumValue);
      return value;
    }
  [/#list]
#if DEBUG_ENUNCIATE
    NSLog(@"Attempt to read enum value failed: %s doesn't match an enum value.", enumValue);
#endif
  }
#if DEBUG_ENUNCIATE
  else {
    NSLog(@"Attempt to read enum value failed: NULL value.");
  }
#endif

  return NULL;
}

/**
 * Utility method for getting the enum value for a string.
 *
 * @param _${type.clientSimpleName?uncap_first} The string to format.
 * @return The enum value or NULL on error.
 */
static enum ${typeName} *formatStringTo${typeName}Type(NSString *_${type.clientSimpleName?uncap_first})
{
  enum ${typeName} *value = calloc(1, sizeof(enum ${typeName}));
  value = NULL;
  [#assign enumValueMap=type.enumValues/]
  [#list type.enumConstants as constant]
  if (${"[@"}"${enumValueMap[constant.simpleName]}" isEqualToString:_${type.clientSimpleName?uncap_first}]) {
    *value = ${nameForEnumConstant(type, constant)};
  }
  [/#list]
#if DEBUG_ENUNCIATE
  NSLog(@"Attempt to read enum value failed: %s doesn't match an enum value.", enumValue);
#endif

  return value;
}

/**
 * Writes a ${type.clientSimpleName} to XML.
 *
 * @param writer The XML writer.
 * @param _${type.clientSimpleName?uncap_first} The ${type.clientSimpleName} to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWrite${typeName}Type(xmlTextWriterPtr writer, enum ${typeName} *_${type.clientSimpleName?uncap_first})
{
  switch (*_${type.clientSimpleName?uncap_first}) {
  [#assign enumValueMap=type.enumValues/]
  [#list type.enumConstants as constant]
    case ${nameForEnumConstant(type, constant)}:
      return xmlTextWriterWriteString(writer, BAD_CAST "${enumValueMap[constant.simpleName]}");
  [/#list]
  }

#if DEBUG_ENUNCIATE
  NSLog(@"Unable to write enum value (no valid value found).");
#endif
  return -1;
}

/**
 * Utility method for getting the string value of ${type.clientSimpleName}.
 *
 * @param _${type.clientSimpleName?uncap_first} The ${type.clientSimpleName} to format.
 * @return The string value or NULL on error.
 */
static NSString *format${typeName}TypeToString(enum ${typeName} *_${type.clientSimpleName?uncap_first})
{
  switch (*_${type.clientSimpleName?uncap_first}) {
  [#assign enumValueMap=type.enumValues/]
  [#list type.enumConstants as constant]
    case ${nameForEnumConstant(type, constant)}:
      return @"${enumValueMap[constant.simpleName]}";
  [/#list]
    default:
      return NULL;
  }

  return NULL;
}

#endif /* DEF_${typeName}_M */
[/#macro]