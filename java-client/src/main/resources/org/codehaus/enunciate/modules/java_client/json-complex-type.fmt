[#ftl]
[#--template for the client-side complex type.--]
[@file name=(type.simpleName + ".java")  package=packageFor(type) charset="utf-8"]
// Generated by Enunciate
package ${packageFor(type)};

import org.codehaus.jackson.annotate.*;

/**
 * ${type.docComment?default("(no documentation provided)")?chop_linebreak?replace("\n", "\n * ")}
 */
public [#if type.abstract]abstract [/#if][#if type.final]final [/#if]class ${simpleNameFor(type)} [#if !type.baseObject]extends ${classnameFor(type.superclass, true)} [#else]implements java.io.Serializable [/#if]{

  [#list type.attributes as attribute]
  @JsonIgnore
  private ${classnameFor(attribute)} _${attribute.simpleName};
  [/#list]
  [#if type.value?exists]
  @JsonIgnore
  private ${classnameFor(type.value)} _${type.value.simpleName};
  [#else]
    [#list type.elements as element]
  @JsonIgnore
  private [#if element.choices?size > 1]java.util.Collection<org.codehaus.jackson.node.ObjectNode>[#else]${classnameFor(element)}[/#if] _${element.simpleName};
    [/#list]
  [/#if]
  [#if type.hasAnyAttribute || type.anyElement?exists]
  @JsonIgnore
  private java.util.Map<String, Object> otherAttributes;
  [/#if]
  [#list type.attributes as attribute]

  /**
   * ${(attribute.javaDoc.return!attribute.docValue!"(no documentation provided)")?chop_linebreak?replace("\n", "\n   * ")}
   */
  @JsonProperty("${attribute.jsonMemberName}")
  public ${classnameFor(attribute)} get${attribute.simpleName?cap_first}() {
    return this._${attribute.simpleName};
  }

  /**
   * ${(attribute.javaDoc.return!attribute.docValue!"(no documentation provided)")?chop_linebreak?replace("\n", "\n   * ")}
   */
  @JsonProperty("${attribute.jsonMemberName}")
  public void set${attribute.simpleName?cap_first}(${classnameFor(attribute)} _${attribute.simpleName}) {
    this._${attribute.simpleName} = _${attribute.simpleName};
  }
  [/#list]
  [#if type.value?exists]

  /**
   * ${(type.value.javaDoc.return!type.value.docValue!"(no documentation provided)")?chop_linebreak?replace("\n", "\n   * ")}
   */
  @JsonProperty("${type.value.jsonMemberName}")
  public ${classnameFor(type.value)} get${type.value.simpleName?cap_first}() {
    return this._${type.value.simpleName};
  }

  /**
   * ${(type.value.javaDoc.return!type.value.docValue!"(no documentation provided)")?chop_linebreak?replace("\n", "\n   * ")}
   */
  @JsonProperty("${type.value.jsonMemberName}")
  public void set${type.value.simpleName?cap_first}(${classnameFor(type.value)} _${type.value.simpleName}) {
    this._${type.value.simpleName} = _${type.value.simpleName};
  }
  [#else]
    [#list type.elements as element]

  /**
   * ${(element.javaDoc.return!element.docValue!"(no documentation provided)")?chop_linebreak?replace("\n", "\n   * ")}
   */
  @JsonProperty("${element.jsonMemberName}")
  public [#if element.choices?size > 1]java.util.Collection<org.codehaus.jackson.node.ObjectNode>[#else]${classnameFor(element)}[/#if] get${element.simpleName?cap_first}() {
    return this._${element.simpleName};
  }

  /**
   * ${(element.javaDoc.return!element.docValue!"(no documentation provided)")?chop_linebreak?replace("\n", "\n   * ")}
   */
  @JsonProperty("${element.jsonMemberName}")
  public void set${element.simpleName?cap_first}([#if element.choices?size > 1]java.util.Collection<org.codehaus.jackson.node.ObjectNode>[#else]${classnameFor(element)}[/#if] _${element.simpleName}) {
    this._${element.simpleName} = _${element.simpleName};
  }
    [/#list]
  [/#if]
  [#if type.hasAnyAttribute || type.anyElement?exists]

  /**
   * The other attributes.
   *
   * @return The other attributes.
   */
  @JsonIgnore
  public java.util.Map<String, Object> getOtherAttributes() {
    return this.otherAttributes;
  }

   /**
    * Add an "other" attribute.
    *
    * @param key The key.
    * @param value The value.
    */
  @JsonAnySetter
  public void addOtherAttribute(String key, Object value) {
    if (this.otherAttributes == null) {
      this.otherAttributes = new java.util.TreeMap<String, Object>();
    }
    this.otherAttributes.put(key, value);
  }
  [/#if]
}
[/@file]