[#ftl]
[@file name="web.xml"]
<?xml version="1.0" encoding="UTF-8"?>
<web-app>

  <display-name>${displayName?default("enunciate-app")}</display-name>
  [#list webAppFragments as fragment]
    [#if fragment.contextParameters?exists]
      [#list fragment.contextParameters?keys as param]

    <context-param>
      <param-name>${param}</param-name>
      <param-value>${fragment.contextParameters[param]}</param-value>
    </context-param>
      [/#list]
    [/#if]
  [/#list]

  <filter>
    <filter-name>http-request-context</filter-name>
    <filter-class>org.codehaus.enunciate.modules.spring_app.HTTPRequestContextFilter</filter-class>
  </filter>
  [#list webAppFragments as fragment]
    [#if fragment.filters?exists]
      [#list fragment.filters as filter]

  <filter>
    <filter-name>${filter.name}</filter-name>
    <filter-class>${filter.classname}</filter-class>
        [#if filter.initParams?exists]
          [#list filter.initParams?keys as initParam]
    <init-param>
      <param-name>${initParam}</param-name>
      <param-value>${filter.initParams[initParam]}</param-value>
    </init-param>
          [/#list]
        [/#if]
  </filter>
      [/#list]
    [/#if]
  [/#list]
  [#if securityEnabled]

  <filter>
    <filter-name>springSecurityFilterChain</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
  </filter>
  [/#if]
  [#list webAppFragments as fragment]
    [#if fragment.filters?exists]
      [#list fragment.filters as filter]
        [#if filter.urlMappings?exists]
          [#list filter.urlMappings as urlMapping]

  <filter-mapping>
    <filter-name>${filter.name}</filter-name>
    <url-pattern>${urlMapping}</url-pattern>
  </filter-mapping>
          [/#list]
        [/#if]
      [/#list]
    [/#if]
  [/#list]

  <filter-mapping>
    <filter-name>http-request-context</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  [#if securityEnabled]
    [#list webAppFragments as fragment]
      [#if fragment.servlets?exists]
        [#list fragment.servlets as servlet]
          [#if servlet.urlMappings?exists]
            [#list servlet.urlMappings as urlMapping]

  <filter-mapping>
    <filter-name>springSecurityFilterChain</filter-name>
    <url-pattern>${urlMapping}</url-pattern>
  </filter-mapping>
            [/#list]
          [/#if]
        [/#list]
      [/#if]
    [/#list]
    [#if securityConfig.enableFormBasedLogin]

  <filter-mapping>
    <filter-name>springSecurityFilterChain</filter-name>
    <url-pattern>${securityConfig.formBasedLoginConfig.url}</url-pattern>
  </filter-mapping>
    [/#if]
  [#if securityConfig.enableFormBasedLogout]

  <filter-mapping>
    <filter-name>springSecurityFilterChain</filter-name>
    <url-pattern>${securityConfig.formBasedLogoutConfig.url}</url-pattern>
  </filter-mapping>
  [/#if]
    [#if securityConfig.enableOAuth]

  <filter-mapping>
    <filter-name>springSecurityFilterChain</filter-name>
    <url-pattern>${securityConfig.OAuthConfig.requestTokenURL}</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>springSecurityFilterChain</filter-name>
    <url-pattern>${securityConfig.OAuthConfig.accessTokenURL}</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>springSecurityFilterChain</filter-name>
    <url-pattern>${securityConfig.OAuthConfig.grantAccessURL}</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>springSecurityFilterChain</filter-name>
    <url-pattern>${securityConfig.OAuthConfig.infoURL}</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>springSecurityFilterChain</filter-name>
    <url-pattern>${securityConfig.OAuthConfig.accessConfirmationURL}</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>springSecurityFilterChain</filter-name>
    <url-pattern>${securityConfig.OAuthConfig.accessConfirmedURL}</url-pattern>
  </filter-mapping>
    [/#if]
    [#list securityConfig.secureUrls?keys as pattern]

  <filter-mapping>
    <filter-name>springSecurityFilterChain</filter-name>
    <url-pattern>${pattern}</url-pattern>
  </filter-mapping>
    [/#list]
  [/#if]

  <listener>
    <listener-class>${springContextLoaderListenerClass?default("org.springframework.web.context.ContextLoaderListener")}</listener-class>
  </listener>

  <listener>
    <listener-class>org.codehaus.enunciate.modules.spring_app.SpringComponentPostProcessor</listener-class>
  </listener>
  [#list webAppFragments as fragment]
    [#if fragment.listeners?exists]
      [#list fragment.listeners as listener]

  <listener>
    <listener-class>${listener}</listener-class>
  </listener>
      [/#list]
    [/#if]
  [/#list]
  [#list webAppFragments as fragment]
    [#if fragment.servlets?exists]
      [#list fragment.servlets as servlet]

  <servlet>
    <servlet-name>${servlet.name}</servlet-name>
    <servlet-class>${servlet.classname}</servlet-class>
        [#if servlet.initParams?exists]
          [#list servlet.initParams?keys as initParam]
    <init-param>
      <param-name>${initParam}</param-name>
      <param-value>${servlet.initParams[initParam]}</param-value>
    </init-param>
          [/#list]
        [/#if]
  </servlet>
      [/#list]
    [/#if]
  [/#list]
  [#if securityEnabled]

  <servlet>
    <servlet-name>security</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  </servlet>
  [/#if]
  [#list webAppFragments as fragment]
    [#if fragment.servlets?exists]
      [#list fragment.servlets as servlet]
        [#if servlet.urlMappings?exists]
          [#list servlet.urlMappings as urlMapping]

  <servlet-mapping>
    <servlet-name>${servlet.name}</servlet-name>
    <url-pattern>${urlMapping}</url-pattern>
  </servlet-mapping>
          [/#list]
        [/#if]
      [/#list]
    [/#if]
  [/#list]
  [#if securityEnabled]
    [#if securityConfig.enableFormBasedLogin]

  <servlet-mapping>
    <servlet-name>security</servlet-name>
    <url-pattern>${securityConfig.formBasedLoginConfig.loginPageURL}</url-pattern>
  </servlet-mapping>
    [/#if]
    [#if securityConfig.enableOAuth]

  <servlet-mapping>
    <servlet-name>security</servlet-name>
    <url-pattern>${securityConfig.OAuthConfig.infoURL}</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>security</servlet-name>
    <url-pattern>${securityConfig.OAuthConfig.accessConfirmationURL}</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>security</servlet-name>
    <url-pattern>${securityConfig.OAuthConfig.accessConfirmedURL}</url-pattern>
  </servlet-mapping>
    [/#if]
  [/#if]
  [#list webAppFragments as fragment]
    [#if fragment.mimeMappings?exists]
      [#list fragment.mimeMappings?keys as extension]

  <mime-mapping>
    <extension>${extension}</extension>
    <mime-type>${fragment.mimeMappings[extension]}</mime-type>
  </mime-mapping>
      [/#list]
    [/#if]
  [/#list]
  [#if resourceEnvRefs?exists]
    [#list resourceEnvRefs as resourceEnvRef]

  <resource-env-ref>
    <resource-env-ref-name>${resourceEnvRef.name}</resource-env-ref-name>
    <resource-env-ref-type>${resourceEnvRef.type}</resource-env-ref-type>
  </resource-env-ref>
    [/#list]
  [/#if]
  [#if resourceRefs?exists]
    [#list resourceRefs as resourceRef]

  <resource-ref>
    <res-ref-name>${resourceRef.name}</res-ref-name>
    <res-type>${resourceEnvRef.type}</res-type>
    <res-auth>${resourceEnvRef.auth}</res-auth>
  </resource-ref>
    [/#list]
  [/#if]
  [#if envEntries?exists]
    [#list envEntries as envEntry]

  <env-entry>
    <env-entry-name>${envEntry.name}</env-entry-name>
    [#if envEntry.value?exists]
    <env-entry-value>${envEntry.value}</env-entry-value>
    [/#if]
    <env-entry-type>${envEntry.type}</env-entry-type>
  </env-entry>
    [/#list]
  [/#if]
</web-app>
[/@file]