[#ftl]
[#-- @ftlvariable name="bundle_contains" type="java.lang.String" --]
[#-- @ftlvariable name="sample_resource" type="org.codehaus.enunciate.contract.common.rest.RESTResource" --]
[#-- @ftlvariable name="sample_service_method" type="org.codehaus.enunciate.contract.jaxws.WebMethod" --]
<h1>
  Introduction
</h1>

[#if sample_service_method??]
<p>
  The .NET client-side library may be used to access the SOAP API for this application via
  the .NET runtime.
</p>

<h1>
    .NET Service Example
</h1>

<code>
//instantiate a new service...
${sample_service_method.declaringEndpointInterface.clientSimpleName} service = new ${sample_service_method.declaringEndpointInterface.clientSimpleName}();

//make the remote call...
[#if sample_service_method.webResult?? && !sample_service_method.webResult.void]result = [/#if]service.${sample_service_method.clientSimpleName?cap_first}([#list sample_service_method.webParameters as param]${param.clientSimpleName}[#if param_has_next], [/#if][/#list]);

//handle the result as needed...
</code>
[/#if]
[#if sample_resource??]

<p>
  The .NET client-side library defines the classes that can be (de)serialized to/from XML.
  This is useful for accessing the REST endpoints that are published by this application.
</p>

[#if sample_resource.outputPayload?? && sample_resource.outputPayload.xmlElement??]
<h1>
  REST Example
</h1>

<code>
//read a resource from a REST url
Uri uri = new Uri(...);

XmlSerializer s = new XmlSerializer(
  typeof( ${sample_resource.outputPayload.xmlElement.clientSimpleName} )
);

  //Create the request object
WebRequest req = WebRequest.Create(uri);
WebResponse resp = req.GetResponse();
Stream stream = resp.GetResponseStream();
TextReader r = new StreamReader( stream );

${sample_resource.outputPayload.xmlElement.clientSimpleName} order = (${sample_resource.outputPayload.xmlElement.clientSimpleName}) s.Deserialize( r );

//handle the result as needed...
</code>
[/#if]
[/#if]
<p>
  This bundle contains ${bundle_contains}.
</p>