[#ftl]
[#import "csharp-metadata.fmt" as libCSharpMetadata/]
[#--template for the client-side complex type.--]
[#macro writeSoapHeaderType param endpointInterface]

  /// <remarks>
  ///  ${param.elementDocs?default("(no documentation provided)")?chop_linebreak?html?replace("\n", "\n  ///  ")}
  ///
  ///  This class is intended to be used as a SOAP header for the ${endpointInterface.clientSimpleName} class.
  /// </remarks>
  /// <summary>
  ///  ${param.elementDocs?default("(no documentation provided)")?chop_linebreak?html?replace("\n", "\n  ///  ")}
  ///
  ///  This class is intended to be used as a SOAP header for the ${endpointInterface.clientSimpleName} class.
  /// </summary>
  [System.SerializableAttribute()]
  [System.Xml.Serialization.XmlTypeAttribute(Namespace="${endpointInterface.targetNamespace?default("")}",TypeName="${param.elementName}")]
[#if endpointInterface.targetNamespace??]
  [System.Xml.Serialization.SoapTypeAttribute(Namespace="${endpointInterface.targetNamespace}",TypeName="${param.elementName}")]  
[#else]
  [System.Xml.Serialization.SoapTypeAttribute(TypeName="${param.elementName}")]
[/#if]
  [System.Xml.Serialization.XmlRootAttribute(Namespace="${endpointInterface.targetNamespace?default("")}",ElementName="${param.elementName}")]
  public class ${param.elementName?cap_first}AsSoapHeaderFor${endpointInterface.clientSimpleName?cap_first} : System.Web.Services.Protocols.SoapHeader {

  [#if param.xmlType.typeDeclaration?exists]
    [#assign type=param.xmlType.typeDeclaration /]
    [#list type.attributes as attribute]
      [#if !accessorOverridesAnother(attribute)]
    private ${classnameFor(attribute)} _${attribute.clientSimpleName};
      [/#if]
    [/#list]
    [#if type.value?exists]
      [#if !accessorOverridesAnother(type.value)]
    private ${classnameFor(type.value)} _${type.value.clientSimpleName};
      [/#if]
    [#else]
      [#list type.elements as element]
        [#if !accessorOverridesAnother(element)]
    private ${classnameFor(element)} _${element.clientSimpleName};
        [/#if]
      [/#list]
    [/#if]
    [#list type.attributes as attribute]
      [#if !accessorOverridesAnother(attribute)]

    /// <summary>
    ///  ${(attribute.javaDoc.return!attribute.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n    ///  ")}
    /// </summary>
    [@libCSharpMetadata.writeAccessorMetadata accessor=attribute /]
    public [#if accessorOverridesAnother(attribute)]override [/#if]${classnameFor(attribute)} ${attribute.clientSimpleName?cap_first} {
      get {
        return this._${attribute.clientSimpleName};
      }
      set {
        this._${attribute.clientSimpleName} = value;
      }
    }
      [/#if]
    [/#list]
    [#if type.value?exists]
      [#if !accessorOverridesAnother(type.value)]

    /// <summary>
    ///  ${(type.value.javaDoc.return!type.value.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n    ///  ")}
    /// </summary>
    [@libCSharpMetadata.writeAccessorMetadata accessor=type.value /]
    public [#if accessorOverridesAnother(type.value)]override [/#if]${classnameFor(type.value)} ${type.value.clientSimpleName?cap_first} {
      get {
        return this._${type.value.clientSimpleName};
      }
      set {
        this._${type.value.clientSimpleName} = value;
      }
    }
      [/#if]
    [#else]
      [#list type.elements as element]
        [#if !accessorOverridesAnother(element)]

    /// <summary>
    ///  ${(element.javaDoc.return!element.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n    ///  ")}
    /// </summary>
    [@libCSharpMetadata.writeAccessorMetadata accessor=element /]
    public ${classnameFor(element)} ${element.clientSimpleName?cap_first} {
      get {
        return this._${element.clientSimpleName};
      }
      set {
        this._${element.clientSimpleName} = value;
      }
    }
        [/#if]
      [/#list]
    [/#if]
  [#else]
    private ${classnameFor(param)} _value;

    /// <summary>
    ///  The value of the header.
    /// </summary>
    [System.Xml.Serialization.XmlTextAttribute()]
    public ${classnameFor(param)} Value {
      get {
        return this._value;
      }
      set {
        this._value = value;
      }
    }
  [/#if]

  }
[/#macro]