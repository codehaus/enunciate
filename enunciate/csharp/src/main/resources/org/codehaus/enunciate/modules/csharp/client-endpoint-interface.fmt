[#ftl]
[#import "client-soap-header.fmt" as libCSharpSoapHeader/]
[#--template for the client-side endpoint interface.--]
[#macro writeEndpointInterface endpointInterface]
namespace ${namespaceFor(endpointInterface)} {

  [@forEachWebMethod endpointInterface=endpointInterface]
    [#list webMethod.webParameters as param]
      [#if param.header]
[@libCSharpSoapHeader.writeSoapHeaderType param=param endpointInterface=endpointInterface/]
      [/#if]
    [/#list]
    [#if webMethod.webResult.header]
[@libCSharpSoapHeader.writeSoapHeaderType param=webMethod.webResult endpointInterface=endpointInterface/]
    [/#if]
  [/@forEachWebMethod]

  /// <remarks>
  ///  ${endpointInterface.javaDoc?default("(no documentation provided)")?chop_linebreak?html?replace("\n", "\n  ///  ")}
  /// </remarks>
  /// <summary>
  ///  ${endpointInterface.javaDoc?default("(no documentation provided)")?chop_linebreak?html?replace("\n", "\n  ///  ")}
  /// </summary>
  [System.Web.Services.WebServiceBindingAttribute(Name="${endpointInterface.portTypeName}",Namespace="${endpointInterface.targetNamespace?default("")}")]
  public class ${endpointInterface.simpleName} : System.Web.Services.Protocols.SoapHttpClientProtocol {

  [@forEachWebMethod endpointInterface=endpointInterface]
    [#list webMethod.webParameters as param]
      [#if param.header]
    public ${param.elementName?cap_first}AsSoapHeaderFor${endpointInterface.simpleName?cap_first} ${param.elementName?cap_first};
      [/#if]
    [/#list]
  [/@forEachWebMethod]

    /// <summary>
    ///  Construct a ${endpointInterface.simpleName} that points to the default endpoint ("${baseDeploymentAddress}${endpointInterface.metaData.soapPath?default("/soap/" + endpointInterface.serviceName)}").
    /// </summary>
    public ${endpointInterface.simpleName}() {
      this.Url = "${baseDeploymentAddress}${endpointInterface.metaData.soapPath?default("/soap/" + endpointInterface.serviceName)}";
    }

    /// <summary>
    ///  Construct a ${endpointInterface.simpleName} that points to the endpoint at a specified host and port.
    /// </summary>
    /// <param name="host">The host of the endpoint.</param>
    /// <param name="port">The port of the endpoint.</param>
    public ${endpointInterface.simpleName}(string host, int port) {
      UriBuilder builder = new UriBuilder("${baseDeploymentAddress}${endpointInterface.metaData.soapPath?default("/soap/" + endpointInterface.serviceName)}");
      builder.Host = host;
      builder.Port = port;
      this.Url = builder.Uri.ToString();
    }

    /// <summary>
    ///  Construct a ${endpointInterface.simpleName} that points to the specified endpoint.
    /// </summary>
    /// <param name="url">The URL of the endpoint.</param>
    public ${endpointInterface.simpleName}(string url) {
      this.Url = url;
    }
  [@forEachWebMethod endpointInterface=endpointInterface]

    /// <summary>
    ///  ${webMethod.docValue?default("(no summary provided)")?chop_linebreak?html?replace("\n", "\n    ///  ")}
    /// </summary>
    [#list webMethod.webParameters as param]
      [#if !param.header]
    /// <param name="${param.simpleName}">${param.docValue?default("(no parameter documentation provided)")?chop_linebreak?html?replace("\n", "\n    ///  ")}</param>
      [/#if]
    [/#list]
    /// <returns>${webMethod.returnType.docComment?default("(no returns documentation provided)")?chop_linebreak?html?replace("\n", "\n    ///  ")}</returns>
    [#if webMethod.javaDoc.throws?exists]
      [#list webMethod.javaDoc.throws as exdoc]
    /// <exception>${exdoc?html?replace("\n", "\n    ///  ")}</exception>
      [/#list]
    [/#if]
    [#assign isrpc=(webMethod.soapBindingStyle?string?lower_case = "rpc") /]
    [#if !isrpc]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute(Action="${webMethod.action}",Use=System.Web.Services.Description.SoapBindingUse.${webMethod.soapUse?string?lower_case?cap_first},ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.${webMethod.soapParameterStyle?string?lower_case?cap_first}[#if webMethod.oneWay],OneWay=true[/#if][#if requestDocumentQName(webMethod)?exists],RequestElementName="${requestDocumentQName(webMethod).localPart}",RequestNamespace="${requestDocumentQName(webMethod).namespaceURI}"[/#if][#if responseDocumentQName(webMethod)?exists],ResponseElementName="${responseDocumentQName(webMethod).localPart}",ResponseNamespace="${responseDocumentQName(webMethod).namespaceURI}"[/#if])]
      [#if !webMethod.webResult.void]
    [return:System.Xml.Serialization.XmlElementAttribute(ElementName="${webMethod.webResult.elementName}",Namespace="[#if webMethod.webResult.bare]${endpointInterface.targetNamespace?default("")}[#else]${webMethod.webResult.targetNamespace?default("")}[/#if]")]
      [/#if]
    [#else]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute(Action="${webMethod.action}",Use=System.Web.Services.Description.SoapBindingUse.${webMethod.soapUse?string?lower_case?cap_first}[#if webMethod.oneWay],OneWay=true[/#if],RequestElementName="${webMethod.operationName}",RequestNamespace="${endpointInterface.targetNamespace?default("")}",ResponseElementName="${webMethod.operationName}",ResponseNamespace="${endpointInterface.targetNamespace?default("")}")]
      [#if !webMethod.webResult.void && !webMethod.webResult.header]
    [return:System.Xml.Serialization.SoapElementAttribute(ElementName="${webMethod.webResult.elementName}")]
      [/#if]
    [/#if]
    [#list webMethod.webParameters as param]
      [#if param.header]
    [System.Web.Services.Protocols.SoapHeaderAttribute("${param.elementName?cap_first}", Direction=System.Web.Services.Protocols.SoapHeaderDirection.[#if param.mode?string = "INOUT"]InOut[#elseif param.mode?string = "OUT"]Out[#else]In[/#if])]
      [/#if]
    [/#list]
    [#assign usecomma=false/]
    public [#if webMethod.webResult.header]void[#else]${listsAsArraysClassnameFor(webMethod.webResult)}[/#if] ${webMethod.simpleName?cap_first}([#list webMethod.webParameters as param][#if !param.header][#if usecomma], [/#if][#assign usecomma=true/][#if isrpc][System.Xml.Serialization.SoapElementAttribute(ElementName="${param.elementName}")] [#else][System.Xml.Serialization.XmlElementAttribute(ElementName="${param.elementName}",Namespace="[#if param.implicitSchemaElement]${endpointInterface.targetNamespace?default("")}[/#if]")] [/#if]${classnameFor(param)} ${param.simpleName}[/#if][/#list]) {
    [#assign usecomma=false/]
      object[] results = this.Invoke("${webMethod.simpleName?cap_first}", new object[] { [#list webMethod.webParameters as param][#if !param.header][#if usecomma], [/#if][#assign usecomma=true/]${param.simpleName}[/#if][/#list] });
    [#if !webMethod.webResult.void && !webMethod.webResult.header]
      return ((${listsAsArraysClassnameFor(webMethod.webResult)})(results[0]));
    [/#if]
    }
  [/@forEachWebMethod]

  }
}
[/#macro]