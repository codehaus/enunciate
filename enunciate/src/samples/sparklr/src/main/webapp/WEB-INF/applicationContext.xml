<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>

  <!--import the OAuth consumer details service.-->
  <import resource="consumer-details-service.xml"/>

  <!--import the OAuth token services.-->
  <import resource="token-services.xml"/>

  <!--The filter that accepts request for unauthenticated request tokens from OAuth consumers.-->
  <bean id="oauthRequestTokenFilter" class="org.springframework.security.oauth.provider.UnauthenticatedRequestTokenProcessingFilter">
    <property name="consumerDetailsService" ref="consumerDetailsService"/>
    <property name="filterProcessesUrl" value="/oauth/request_token"/>
    <property name="tokenServices" ref="tokenServices"/>
  </bean>

  <!--
    The filter that changes an unauthenticated request token to an authenticated request token. Per the OAuth
    spec, this filter requires that the principal (read "user") is already authenticated.

    This filter processes two request parameters that specify the oauth token and the callback url.  By default,
    the names of these parameters are "oauth_token" and "oauth_callback", respectively.

    This filter requires three properties to be set: the URL that this filter will process, the token services,
    and the URL where the principal will be redirected in case that the token failed to be authorized (for example,
    the token is disabled or expired).
  -->
  <bean id="oauthUserAuthorizationFilter" class="org.springframework.security.oauth.provider.UserAuthorizationProcessingFilter">
    <property name="filterProcessesUrl" value="/oauth/authorize"/>
    <property name="tokenServices" ref="tokenServices"/>
    <property name="authenticationFailureUrl" value="/oauth/confirm_access"/>

    <!--This is where the user will be redirected if the consumer didn't provide a callback URL.-->
    <property name="defaultTargetUrl" value="/request_token_authorized.jsp"/>
  </bean>

  <!--The filter that accepts request for access tokens given authenticated request tokens from OAuth consumers.-->
  <bean id="oauthAccessTokenFilter" class="org.springframework.security.oauth.provider.AccessTokenProcessingFilter">
    <property name="consumerDetailsService" ref="consumerDetailsService"/>
    <property name="filterProcessesUrl" value="/oauth/access_token"/>
    <property name="tokenServices" ref="tokenServices"/>
  </bean>

  <!--The filter for protected resources.-->
  <bean id="oauthProtectedResourceFilter" class="org.springframework.security.oauth.provider.ProtectedResourceProcessingFilter">
    <property name="consumerDetailsService" ref="consumerDetailsService"/>
    <property name="tokenServices" ref="tokenServices"/>
   
  </bean>

  <!--
    The filter chain.

    Notice that all requests for "photo/**" are processed through the OAuth protected access filter as well
    as any filters that might load the identity for the current user.  This has the effect of making all
    requests for "photo/**" available EITHER by the logged-in user identity OR an authorized OAuth access token.
  -->
  <bean id="filterChainProxy" class="org.acegisecurity.util.FilterChainProxy">
		<property name="filterInvocationDefinitionSource">
			<value><![CDATA[
				CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
				PATTERN_TYPE_APACHE_ANT
				/photo/**=httpSessionContextIntegrationFilter,securityContextHolderAwareRequestFilter,rememberMeProcessingFilter,anonymousProcessingFilter,oauthProtectedResourceFilter,exceptionTranslationFilter,filterInvocationInterceptor
				/xml/photos=httpSessionContextIntegrationFilter,securityContextHolderAwareRequestFilter,rememberMeProcessingFilter,anonymousProcessingFilter,oauthProtectedResourceFilter,exceptionTranslationFilter,filterInvocationInterceptor
				/**=httpSessionContextIntegrationFilter,logoutFilter,authenticationProcessingFilter,oauthRequestTokenFilter,oauthUserAuthorizationFilter,oauthAccessTokenFilter,securityContextHolderAwareRequestFilter,rememberMeProcessingFilter,anonymousProcessingFilter,exceptionTranslationFilter,filterInvocationInterceptor
			]]></value>
		</property>
	</bean>

	<bean id="httpSessionContextIntegrationFilter" class="org.acegisecurity.context.HttpSessionContextIntegrationFilter"/>

	<bean id="logoutFilter" class="org.acegisecurity.ui.logout.LogoutFilter">
		<constructor-arg value="/index.jsp"/> <!-- URL redirected to after logout -->
		<constructor-arg>
			<list>
				<ref bean="rememberMeServices"/>
				<bean class="org.acegisecurity.ui.logout.SecurityContextLogoutHandler"/>
			</list>
		</constructor-arg>
    <property name="filterProcessesUrl" value="/logout.do"/>
	</bean>

	<bean id="authenticationProcessingFilter" class="org.acegisecurity.ui.webapp.AuthenticationProcessingFilter">
		<property name="authenticationManager" ref="authenticationManager"/>
		<property name="authenticationFailureUrl" value="/login.jsp"/>
		<property name="defaultTargetUrl" value="/index.jsp"/>
		<property name="filterProcessesUrl" value="/login.do"/>
		<property name="rememberMeServices" ref="rememberMeServices"/>
	</bean>

  <bean id="securityContextHolderAwareRequestFilter" class="org.acegisecurity.wrapper.SecurityContextHolderAwareRequestFilter"/>

	<bean id="rememberMeProcessingFilter" class="org.acegisecurity.ui.rememberme.RememberMeProcessingFilter">
		<property name="authenticationManager" ref="authenticationManager"/>
		<property name="rememberMeServices" ref="rememberMeServices"/>
	</bean>

	<bean id="anonymousProcessingFilter" class="org.acegisecurity.providers.anonymous.AnonymousProcessingFilter">
		<property name="key" value="changeThis"/>
		<property name="userAttribute" value="anonymousUser,ROLE_ANONYMOUS"/>
	</bean>

	<bean id="exceptionTranslationFilter" class="org.acegisecurity.ui.ExceptionTranslationFilter">
		<property name="authenticationEntryPoint">
			<bean class="org.acegisecurity.ui.webapp.AuthenticationProcessingFilterEntryPoint">
				<property name="loginFormUrl" value="/login.jsp"/>
				<property name="forceHttps" value="false"/>
			</bean>
		</property>
		<property name="accessDeniedHandler">
			<bean class="org.acegisecurity.ui.AccessDeniedHandlerImpl">
				<property name="errorPage" value="/login.jsp"/>
			</bean>
		</property>
	</bean>

	<bean id="filterInvocationInterceptor" class="org.acegisecurity.intercept.web.FilterSecurityInterceptor">
		<property name="authenticationManager" ref="authenticationManager"/>
		<property name="accessDecisionManager">
			<bean class="org.acegisecurity.vote.AffirmativeBased">
				<property name="allowIfAllAbstainDecisions" value="false"/>
				<property name="decisionVoters">
					<list>
						<bean class="org.acegisecurity.vote.RoleVoter"/>
						<bean class="org.acegisecurity.vote.AuthenticatedVoter"/>
					</list>
				</property>
			</bean>
		</property>
		<property name="objectDefinitionSource">
			<value><![CDATA[
				CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
				PATTERN_TYPE_APACHE_ANT
				/xml/photos=ROLE_USER
				/json/photos=ROLE_USER
				/photo/**=ROLE_USER
				/oauth/**=ROLE_USER
				/request_token_authorized.jsp=ROLE_USER
				/**=IS_AUTHENTICATED_ANONYMOUSLY
			]]></value>
		</property>
	</bean>

	<bean id="rememberMeServices" class="org.acegisecurity.ui.rememberme.TokenBasedRememberMeServices">
		<property name="userDetailsService" ref="userDetailsService"/>
		<property name="key" value="changeThis"/>
	</bean>

	<bean id="authenticationManager" class="org.acegisecurity.providers.ProviderManager">
		<property name="providers">
			<list>
				<ref local="daoAuthenticationProvider"/>
				<bean class="org.acegisecurity.providers.anonymous.AnonymousAuthenticationProvider">
					<property name="key" value="changeThis"/>
				</bean>
				<bean class="org.acegisecurity.providers.rememberme.RememberMeAuthenticationProvider">
					<property name="key" value="changeThis"/>
				</bean>
			</list>
		</property>
	</bean>

	<bean id="daoAuthenticationProvider" class="org.acegisecurity.providers.dao.DaoAuthenticationProvider">
		<property name="userDetailsService" ref="userDetailsService"/>
	</bean>

	<!-- UserDetailsService is the most commonly frequently Acegi Security interface implemented by end users -->
	<bean id="userDetailsService" class="org.acegisecurity.userdetails.memory.InMemoryDaoImpl">
    <property name="userMap">
      <value>
        marissa=koala,ROLE_USER
        paul=emu,ROLE_USER
      </value>
    </property>
  </bean>

	<!-- This bean is optional; it isn't used by any other bean as it only listens and logs -->
	<bean id="loggerListener" class="org.acegisecurity.event.authentication.LoggerListener"/>

</beans>