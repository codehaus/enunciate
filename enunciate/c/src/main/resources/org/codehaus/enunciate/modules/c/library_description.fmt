[#ftl]
[#-- @ftlvariable name="filename" type="java.lang.String" --]
[#-- @ftlvariable name="input_element_name" type="java.lang.String" --]
[#-- @ftlvariable name="output_element_name" type="java.lang.String" --]
<h1>
  Introduction
</h1>

<p>
  The C module generates the source code for the ANSI-C-compatible data structures and (de)serialization
  functions that can be used in conjunction with <a href="http://xmlsoft.org/">libxml2</a> to (de)serialize
  the REST resources as they are represented as XML data.
</p>

<p>
  The generated C source code depends on the <a href="http://xmlsoft.org/html/libxml-xmlreader.html">XML Reader API</a>
  and the <a href="http://xmlsoft.org/html/libxml-xmlwriter.html">XML Writer API</a> as well as the <tt>&lt;time.h&gt;</tt>,
  <tt>&lt;string.h&gt;</tt>, and <tt>&lt;stdlib.h&gt;</tt> C standard libraries.
</p>

[#if output_element_name??]
<h1>
  REST XML Example
</h1>

<code>
#include <${filename}>
//...

[#if input_element_name??]
xmlTextWriterPtr writer = ...; //set up the writer to the url.
${input_element_name} *request_element = ...;
[/#if]
xmlTextReaderPtr reader = ...; //set up the reader to the url.
${output_element_name} *response_element = ...;
[#if input_element_name??]
//set up the ${input_element_name}...
xml_write_${input_element_name}(writer, request_element);
[/#if]
response_element = xml_read_${output_element_name}(reader);

//handle the response as needed...

[#if input_element_name??]
free_${input_element_name}(request_element); //free the ${input_element_name}
[/#if]
free_${output_element_name}(response_element); //free the ${output_element_name}
</code>
[/#if]