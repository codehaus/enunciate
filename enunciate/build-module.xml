<?xml version="1.0" encoding="UTF-8"?>

<project default="install" name="base" basedir="." xmlns:artifact="urn:maven-artifact-ant">

  <!--definition of "base" properties - globally referenced. -->
  <dirname file="${ant.file.base}" property="enunciate.basedir"/>
  <property file="${enunciate.basedir}/build.properties"/>
  <property name="lib.dir" value="${enunciate.basedir}/lib"/>
  <property name="enunciate.sample.src.dir" value="${enunciate.basedir}/src/samples"/>

  <!--definition of "relative" properties-->
  <property name="build.dir" value="target/classes/main"/>
  <property name="tools.build.dir" value="target/classes/tools"/>
  <property name="gen.dir" value="target/gen"/>
  <property name="conf.dir" value="src/conf"/>
  <property name="test.build.dir" value="target/test-classes"/>
  <property name="tools.test.build.dir" value="target/test-classes"/>
  <property name="test.report.dir" value="target/test-reports"/>

  <!--default file for container test support.-->
  <property name="container.test.support.file" value="${user.home}/.enunciate/container-test-support.xml"/>

  <!--The init target.-->
  <target name="init" description="initializes and verifies some properties">
    <mkdir dir="target"/>
    <property name="module.name" value="${ant.project.name}"/>

    <available property="main.src.exists" file="src/java"/>
    <fail message="The main source code must exist in the ${basedir}/src/java directory." unless="main.src.exists"/>

    <available property="main.test.src.exists" file="src/test"/>
    <fail message="The main test code must exist in the ${basedir}/src/test directory." unless="main.test.src.exists"/>

    <available property="tools.exists" file="src/tools"/>

    <!--load the maven tasks for handling dependencies-->
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant">
      <classpath>
        <fileset dir="${lib.dir}/build">
          <include name="maven-artifact-ant-*.jar"/>
        </fileset>
      </classpath>
    </typedef>

    <!--the repo at java.net contains needed Sun jars.-->
    <artifact:remoteRepository id="repo.java.net" url="https://maven-repository.dev.java.net/nonav/repository" layout="legacy"/>

    <copy file="${module.name}-pom.xml" todir="target" failonerror="true">
      <filterset>
        <filter token="VERSION" value="${version}"/>
      </filterset>
    </copy>
    <artifact:pom id="module.pom" file="target/${module.name}-pom.xml"/>

    <!--finally, include any user-specific properties.-->
    <property file="${user.home}/.enunciate/build.properties"/>

    <condition property="configure.proxy">
      <and>
        <isset property="proxyHost"/>
        <isset property="proxyPort"/>
      </and>
    </condition>
  </target>

  <target name="get-tools-pom" depends="init" if="tools.exists">
    <copy file="${module.name}-tools-pom.xml" todir="target" failonerror="true">
      <filterset>
        <filter token="VERSION" value="${version}"/>
      </filterset>
    </copy>
    <artifact:pom id="module.tools.pom" file="target/${module.name}-tools-pom.xml"/>
  </target>

  <target name="set-proxy" depends="init" if="configure.proxy">
    <setproxy proxyhost="${proxyHost}" proxyport="${proxyPort}"/>
  </target>

  <target name="get-tools-classpath" depends="get-tools-pom, set-proxy" if="tools.exists">
    <artifact:dependencies pathId="tools.classpath" pomRefId="module.tools.pom">
      <remoteRepository refid="repo.java.net"/>
    </artifact:dependencies>
  </target>

  <target name="compile-tools" description="compile the tools code" depends="get-tools-classpath" if="tools.exists">
    <!--default compiler for the tools is 1.5-->
    <property name="tools.compiler" value="1.5"/>

    <mkdir dir="${tools.build.dir}"/>

    <javac destdir="${tools.build.dir}" debug="true" source="${tools.compiler}">
      <src>
        <pathelement location="src/tools"/>
      </src>
      <classpath refid="tools.classpath"/>
    </javac>

    <copy todir="${build.dir}">
      <fileset dir="src/java">
        <include name="**/*.xsd"/>
        <include name="**/*.xml"/>
        <include name="**/*.jelly"/>
        <include name="**/*.fmt"/>
        <include name="**/*.xsl"/>
        <include name="**/*.xslt"/>
      </fileset>
    </copy>
  </target>

  <target name="jar-tools" description="create the tools jar." depends="compile-tools" if="tools.exists">
    <jar jarfile="target/enunciate-${module.name}-tools-${version}.jar" basedir="${tools.build.dir}"/>
  </target>

  <target name="install-tools" description="install the tools jar into the local repo" depends="jar-tools" if="tools.exists">
    <artifact:install file="target/enunciate-${module.name}-tools-${version}.jar">
      <pom refid="module.tools.pom"/>
    </artifact:install>
  </target>

  <target name="get-build-classpath" depends="install-tools">
    <artifact:dependencies pathId="nonsystem.build.classpath" pomRefId="module.pom">
      <remoteRepository refid="repo.java.net"/>
    </artifact:dependencies>

    <path id="build.classpath">
      <!--the maven artifact tasks don't recognize the "system" jars.-->
      <pathelement location="${java.home}/../lib/tools.jar"/>
      <path refid="nonsystem.build.classpath"/>
    </path>
  </target>

  <target name="compile-main" description="compile the main code" depends="get-build-classpath">
    <mkdir dir="${build.dir}"/>
    <javac destdir="${build.dir}" debug="true">
      <src>
        <pathelement location="src/java"/>
      </src>
      <classpath>
        <path refid="build.classpath"/>
        <pathelement location="${tools.build.dir}"/>
      </classpath>
    </javac>

    <copy todir="${build.dir}">
      <fileset dir="src/java">
        <include name="**/*.xsd"/>
        <include name="**/*.xml"/>
        <include name="**/*.jelly"/>
        <include name="**/*.fmt"/>
        <include name="**/*.html"/>
        <include name="**/*.xslt"/>
        <include name="**/package.html"/>
      </fileset>
    </copy>

  </target>

  <target name="get-test-classpath" depends="get-build-classpath">
    <path id="test.classpath">
      <path refid="build.classpath"/>
      <pathelement location="${build.dir}"/>
      <pathelement location="${test.build.dir}"/>
      <pathelement location="${conf.dir}"/>
    </path>
  </target>

  <target name="compile-tests" depends="get-test-classpath">
    <mkdir dir="${test.build.dir}"/>
    <javac destdir="${test.build.dir}" debug="true">
      <src>
        <pathelement location="src/test"/>
      </src>
      <classpath refid="test.classpath"/>
      <classpath location="${build.dir}"/>
    </javac>

    <copy todir="${test.build.dir}">
      <fileset dir="src/test">
        <include name="**/*.xml"/>
        <include name="**/*.fmt"/>
      </fileset>
    </copy>
  </target>

  <target name="compile" description="compile the main code" depends="compile-main, compile-tests"/>

  <target name="get-test-sysprops">
    <propertyset id="test.sysprops"/>
  </target>

  <target name="test" description="run the test cases" depends="compile, get-test-sysprops">
    <mkdir dir="${test.report.dir}"/>
    <junit tempdir="target" printsummary="true" failureproperty="tests.failed" haltonerror="false" haltonfailure="false">
      <classpath refid="test.classpath"/>
      <syspropertyset refid="test.sysprops"/>
      <formatter usefile="false" type="plain"/>
      <formatter type="xml"/>

      <batchtest todir="${test.report.dir}">
        <fileset dir="src/test">
          <include name="**/Test*"/>
        </fileset>
      </batchtest>
    </junit>

    <junitreport todir="${test.report.dir}">
      <fileset dir="${test.report.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${test.report.dir}/html"/>
    </junitreport>

    <antcall target="fail-for-tests"/>
  </target>

  <target name="fail-for-tests" if="tests.failed">
    <fail>There were test failures.</fail>
  </target>

  <target name="write-discovery-metadata" if="deployment.module.fqn">
    <property name="append.discovery.module" value="false"/>
    <property name="discovery.dir" value="${build.dir}/META-INF/services"/>

    <mkdir dir="${discovery.dir}"/>
    <echo message="${deployment.module.fqn}" file="${discovery.dir}/org.codehaus.enunciate.modules.DeploymentModule" append="${append.discovery.module}"/>
  </target>

  <target name="extract-module-docs" if="deployment.module.fqn" depends="get-build-classpath">
    <pathconvert pathsep="&#34; &#34;" dirsep="${file.separator}" property="module.src.file.args">
      <path>
        <fileset dir="src">
          <include name="java/**/*.java"/>
          <include name="tools/**/*.java"/>
        </fileset>
      </path>
    </pathconvert>
    <dirname property="apt.output.dir" file="target/any.txt"/>

    <java classname="com.sun.tools.apt.Main" failonerror="true" fork="true">
      <classpath location="${java.home}/../lib/tools.jar"/>
      <arg value="-cp"/>
      <arg pathref="build.classpath"/>
      <arg value="-s"/>
      <arg value="${apt.output.dir}"/>
      <arg value="-nocompile"/>
      <arg line="-factory net.sf.jelly.apt.freemarker.FreemarkerProcessorFactory"/>
      <arg value="-Atemplate=${enunciate.basedir}/docs/module.docs.fmt"/>
      <arg value="-AEnunciateModuleFQN=${deployment.module.fqn}"/>
      <arg line="&#34;${module.src.file.args}&#34;"/>
    </java>
  </target>

  <target name="jar" description="create the main jar." depends="test, write-discovery-metadata, extract-module-docs">
    <jar jarfile="target/enunciate-${module.name}-${version}.jar" basedir="${build.dir}"/>
  </target>

  <target name="install" description="install the main jar into the local repo." depends="jar">
    <artifact:install file="target/enunciate-${module.name}-${version}.jar">
      <pom refid="module.pom"/>
    </artifact:install>
  </target>

  <target name="clean" description="clean up">
    <delete dir="target"/>
  </target>

  <target name="enunciate-example-api" depends="compile-main" description="enunciate an example api.">
    <fail unless="enunciate.target">
      You must specify an enunciate target.
    </fail>

    <!--the name of the example to deploy.-->
    <property name="example" value="basic"/>
    <property name="example.dir" value="${enunciate.basedir}/src/samples/${example}"/>
    <property name="example.enunciate.xml" value="${example.dir}/enunciate.xml"/>
    <property name="example.gen.dir" value="target/examples/${example}/gen"/>
    <property name="example.compile.dir" value="target/examples/${example}/classes"/>
    <property name="example.build.dir" value="target/examples/${example}/build"/>
    <property name="example.package.dir" value="target/examples/${example}/package"/>

    <path id="enunciate.classpath">
      <path refid="build.classpath"/>
      <pathelement location="${build.dir}"/>
    </path>

    <taskdef name="enunciate" classname="org.codehaus.enunciate.main.EnunciateTask">
      <classpath refid="enunciate.classpath"/>
    </taskdef>

    <mkdir dir="${example.gen.dir}"/>
    <mkdir dir="${example.compile.dir}"/>
    <mkdir dir="${example.build.dir}"/>
    <mkdir dir="${example.package.dir}"/>

    <enunciate verbose="true" target="${enunciate.target}"
               basedir="${example.dir}"
               configFile="${example.enunciate.xml}"
               generateDir="${example.gen.dir}"
               compileDir="${example.compile.dir}"
               buildDir="${example.build.dir}"
               packageDir="${example.package.dir}">
      <include name="**/*.java"/>
      <classpath refid="enunciate.classpath"/>
    </enunciate>
  </target>

</project>
