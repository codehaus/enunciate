[#ftl]
[#-- @ftlvariable name="sample_resource" type="org.codehaus.enunciate.contract.common.rest.RESTResource" --]
[#-- @ftlvariable name="sample_service_method" type="org.codehaus.enunciate.contract.jaxws.WebMethod" --]
  <h1>
    Introduction
  </h1>

  <p>
    The JDK 1.4 client-side library may be used to access the SOAP API for this application via
    the Java runtime.  This library is compatible with <a href="http://java.sun.com">Java</a>,
    version 1.4 and later and has a dependency on <a href="http://xfire.codehaus.org">XFire</a>.
  </p>

  <p>
    The library is divided into service interfaces, service implementations, and service data.  The
    service interfaces exist for convenience in testing and for possible
    <a href="http://en.wikipedia.org/wiki/Aspect-oriented_programming">aspect</a> injection.  The
    service implementations and service data are <a href="http://en.wikipedia.org/wiki/POJO">POJO</a>s,
    making them easy to understand and straightforward to use.  (The services can easily be
    declared in a <a href="http://www.springframework.org/">Spring</a> beans configuration file,
    for example.)
  </p>

[#if sample_service_method??]
  <p>
    Consider the following example:
  </p>

  <h1>
    Example
  </h1>

  <code>
//instantiate a new service with an impl
// (or through dependency injection, or whatever)...
${sample_service_method.declaringEndpointInterface.simpleName} service =
  [#if sample_service_method.declaringEndpointInterface.endpointImplementations?size > 0]new ${sample_service_method.declaringEndpointInterface.endpointImplementations?first.simpleName}()[#else]...[/#if];

//make the remote call to read the result...
result = service.${sample_service_method.simpleName}([#list sample_service_method.webParameters as param]${param.clientSimpleName}[#if param_has_next], [/#if][/#list]);

//handle the result as needed...
  </code>
[/#if]