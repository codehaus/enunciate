[#ftl]
[#-- @ftlvariable name="resources" type="java.util.Collection<org.codehaus.enunciate.contract.common.rest.RESTResource>" --]
[#-- @ftlvariable name="wsdl" type="org.codehaus.enunciate.config.WsdlInfo" --]
[#-- @ftlvariable name="schema" type="org.codehaus.enunciate.config.SchemaInfo" --]
[@file name="docs.xml" charset="utf-8"]
<?xml version="1.0" encoding="UTF-8"?>
<api-docs[#if copyright??] copyright="${copyright}"[/#if][#if licenseFile??] licenseFile="${licenseFile}"[/#if][#if title??] title="${title}"[/#if]>
[#if apiDoc??]
  <documentation>
    <![CDATA[${apiDoc}]]>
  </documentation>
  [#list apiDoc?keys as tag]
    [#list apiDoc[tag] as tagValue]
  <tag name="${tag}"><![CDATA[${tagValue}]]></tag>
    [/#list]
  [/#list]
[/#if]
  <data>
[@forEachSchema]
  [#if (schema.typeDefinitions?size > 0) || (schema.globalElements?size > 0)]
    <schema namespace="${schema.namespace!""}" namespaceId="${schema.id}"[#if schema.properties.filename??] file="${schema.properties.filename}"[/#if]>
      <types>
    [#list schema.typeDefinitions as type]
        <type name="${type.name!"(anonymous)"}" id="${type.qualifiedName}" package="${type.package.qualifiedName}"[#if !type.baseObject] extendsType="${type.superclass.declaration.qualifiedName}"[/#if]>
      [#if type.docValue??]
          <documentation>
            <![CDATA[${type.docValue}]]>
          </documentation>
      [/#if]
      [#list type.javaDoc?keys as tag]
        [#list type.javaDoc[tag] as tagValue]
          <tag name="${tag}"><![CDATA[${tagValue}]]></tag>
        [/#list]
      [/#list]
      [#if type.attributes?size > 0]
          <attributes>
        [#list type.attributes as attribute]
            <attribute name="${attribute.name}" typeNamespace="${attribute.baseType.namespace!""}" typeName="${attribute.baseType.qname.localPart}"[#if schemaForNamespace(attribute)??] typeSchemaId="${schemaForNamespace(attribute).id}"[/#if]>
              <![CDATA[${attribute.javaDoc.return!attribute.docValue!"(no documentation provided)"}]]>
            </attribute>
        [/#list]
          </attributes>
      [/#if]
      [#if type.elements?size > 0]
          <elements>
        [#list type.elements as element]
            <element minOccurs="${element.minOccurs}" maxOccurs="${element.maxOccurs}">
          [#if element.docValue??]
              <documentation>
                <![CDATA[${element.docValue}]]>
              </documentation>
          [/#if]
          [#list element.javaDoc?keys as tag]
            [#list element.javaDoc[tag] as tagValue]
              <tag name="${tag}"><![CDATA[${tagValue}]]></tag>
            [/#list]
          [/#list]
          [#list element.choices as choice]
              <choice name="${choice.name}" namespace="${choice.namespace!""}"[#if !(choice.ref?? || choice.baseType.anonymous)] typeNamespace="${choice.baseType.namespace!""}" typeName="${choice.baseType.qname.localPart}"[/#if][#if choice.ref?? && schemaForNamespace(choice)??] schemaId="${schemaForNamespace(choice).id}"[#elseif schemaForNamespace(choice)??] typeSchemaId="${schemaForNamespace(choice).id}"[/#if]/>
          [/#list]
            </element>
        [/#list]
          </elements>
      [/#if]
      [#if type.value??]
          <value typeNamespace="${type.value.baseType.namespace!""}" typeName="${type.value.baseType.qname.localPart}"[#if schemaForNamespace(type.value)??] typeSchemaId="${schemaForNamespace(type.value).id}"[/#if]>
            <![CDATA[${type.value.javaDoc.return!type.value.docValue!"(no documentation provided)"}]]>
          </value>
      [/#if]
      [#if type.enum]
          <values>
        [#list type.delegate.enumConstants as item]
            <item value="${type.enumValues[item.simpleName]}">
          [#if item.docValue??]
              <documentation>
                 <![CDATA[${item.docValue}]]>
              </documentation>
          [/#if]
          [#list item.javaDoc?keys as tag]
            [#list item.javaDoc[tag] as tagValue]
              <tag name="${tag}"><![CDATA[${tagValue}]]></tag>
            [/#list]
          [/#list]
            </item>
        [/#list]
          </values>
      [/#if]
        </type>
    [/#list]
      </types>
      <elements>
    [#list schema.globalElements as element]
        <element name="${element.name}" type="${element.typeDefinition.qualifiedName}"[#if element.typeDefinition??] typeName="${element.typeDefinition.name!""}" typeNamespace="${element.typeDefinition.namespace!""}"[#if schemaForNamespace(element.typeDefinition)??] typeSchemaId="${schemaForNamespace(element.typeDefinition).id}"[/#if][/#if]>
      [#if element.docValue??]
          <documentation>
            <![CDATA[${element.docValue}]]>
          </documentation>
      [/#if]
      [#list element.javaDoc?keys as tag]
        [#list element.javaDoc[tag] as tagValue]
          <tag name="${tag}"><![CDATA[${tagValue}]]></tag>
        [/#list]
      [/#list]
      [#if includeExampleXml!false]
          <examplexml><![CDATA[${element.generateExampleXml()?trim}]]></examplexml>
      [/#if]
      [#if includeExampleJson!false]
          <examplejson><![CDATA[${element.generateExampleJson()?trim}]]></examplejson>
      [/#if]
        </element>
    [/#list]
    [#list schema.localElementDeclarations as element]
      [#if !isDefinedGlobally(element)]
        [#assign localTypeQName=element.elementXmlType.qname/]
        <element name="${element.name}"[#if element.elementTypeDeclaration??] type="${element.elementTypeDeclaration.qualifiedName}"[/#if] typeName="${localTypeQName.localPart}" typeNamespace="${localTypeQName.namespaceURI!""}"[#if schemaForNamespace(element)??] typeSchemaId="${schemaForNamespace(element).id}"[/#if]>
          [#if element.docValue??]
          <documentation>
            <![CDATA[${element.docValue}]]>
          </documentation>
          [/#if]
          [#list element.javaDoc?keys as tag]
            [#list element.javaDoc[tag] as tagValue]
          <tag name="${tag}"><![CDATA[${tagValue}]]></tag>
            [/#list]
          [/#list]
          [#if includeExampleXml!false]
          <examplexml><![CDATA[${element.generateExampleXml()?trim}]]></examplexml>
          [/#if]
          [#if includeExampleJson!false]
          <examplejson><![CDATA[${element.generateExampleJson()?trim}]]></examplejson>
          [/#if]
        </element>
      [/#if]
    [/#list]
      </elements>
    </schema>
  [/#if]
[/@forEachSchema]
[@forEachJsonSchema]
  [#if schema.types?size > 0]
    <jsonSchema schemaId="${schema.schemaId}">
    [#if schema.documentation??]
      <documentation>${schema.documentation}</documentation>
    [/#if]
    [#list schema.types as type]
      <type name="${type.typeName}">
      [#if type.docValue??]
        <documentation><![CDATA[${type.docValue}]]></documentation>
      [/#if]
      [#if type.jsonProperties?? && type.jsonProperties?size > 0]
      [#list type.jsonProperties as property]
        <property name="${property.propertyName}" 
                  isList="${property.list}"
                  typeName="${jsonTypeNameForQualifiedName(property.typeName)}"
                  [#if jsonSchemaForType(property.targetType)??]
                  typeSchemaId="${jsonSchemaForType(property.targetType).schemaId}"
                  [/#if]
                  [#if property.propertyDescription??]
                  [#assign d = property.propertyDescription]
                  [#escape d as d?html]
                  documentation="${d}"
                  [/#escape]
                  [/#if] />
      [/#list]
      [/#if]
      [#if type.enumValues?? && type.enumValues?size > 0]
        [#list type.enumValues as enumValue]
          <enumValue>
            <value>${enumValue.name}</value>
          [#if enumValue.description??]
            <documentation><![CDATA[${enumValue.description}]]></documentation>
          [/#if]
          </enumValue>
        [/#list]
      [/#if]
      </type>
    [/#list]
    </jsonSchema>
  [/#if]
[/@forEachJsonSchema]
  </data>
  <soap>
    <wsdls>
[@forEachWsdl]
      <wsdl namespace="${wsdl.targetNamespace!""}" namespaceId="${wsdl.id}"[#if wsdl.properties.filename??] file="${wsdl.properties.filename}"[/#if]>
  [@forEachEndpointInterface wsdl=wsdl]
        <endpointInterface name="${endpointInterface.serviceName}" id="${endpointInterface.qualifiedName}" package="${endpointInterface.package.qualifiedName}"[#if endpointInterface.metaData.soapPath??] path="${endpointInterface.metaData.soapPath}"[/#if]>
    [#if endpointInterface.docValue??]
          <documentation>
            <![CDATA[${endpointInterface.docValue}]]>
          </documentation>
    [/#if]
    [#list endpointInterface.javaDoc?keys as tag]
      [#list endpointInterface.javaDoc[tag] as tagValue]
          <tag name="${tag}"><![CDATA[${tagValue}]]></tag>
      [/#list]
    [/#list]
    [#list endpointInterface.webMethods as method]
          <method name="${method.operationName}" oneWay="${method.oneWay?string}">
      [#if method.docValue??]
            <documentation>
              <![CDATA[${method.docValue}]]>
            </documentation>
      [/#if]
      [#list method.javaDoc?keys as tag]
        [#if (("param" != tag) && ("throws" != tag) && ("exception" != tag) && ("return" != tag))]
          [#list method.javaDoc[tag] as tagValue]
            <tag name="${tag}"><![CDATA[${tagValue}]]></tag>
          [/#list]
        [/#if]
      [/#list]
      [#list method.webParameters as parameter]
            <parameter name="${parameter.partName}" input="${parameter.input?string}" output="${parameter.output?string}">
              <![CDATA[${parameter.docValue!"(no documentation provided)"}]]>
            </parameter>
      [/#list]
      [#if ((!method.oneWay) && (!method.returnType.void))]
            <result>
              <![CDATA[${method.returnType.docValue!"(no documentation provided)"}]]>
            </result>
      [/#if]
      [#list method.thrownTypes as fault]
            <fault name="${fault.declaration.simpleName}">
              <![CDATA[${fault.docValue!"(no documentation provided)"}]]>
            </fault>
      [/#list]
          </method>
    [/#list]
        </endpointInterface>
  [/@forEachEndpointInterface]
      </wsdl>
[/@forEachWsdl]
    </wsdls>
  </soap>
  <rest baseAddress="${baseDeploymentAddress}"[#if wadlFilename??] wadl="${wadlFilename}"[/#if]>
    <resources>
[@forEachRESTResourceListByPath]
      <resource name="${(resources?first).path}" subcontext="${(resources?first).metaData.defaultSubcontext!"/rest"}">
  [#list resources as resource]
    [#if resource.supportedOperations?size > 0]
        <operation name="${resource.supportedOperations?first}"[#if resource.verbs??] type="${resource.verbs?first}"[/#if]>
      [#if resource.docValue??]
          <documentation>
            <![CDATA[${resource.docValue}]]>
          </documentation>
      [/#if]
      [#list resource.javaDoc?keys as tag]
        [#if (("param" != tag) && ("throws" != tag) && ("exception" != tag) && ("return" != tag))]
          [#list resource.javaDoc[tag] as tagValue]
          <tag name="${tag}"><![CDATA[${tagValue}]]></tag>
          [/#list]
        [/#if]
      [/#list]
      [#if resource.supportedOperations?size > 1]
        [#list resource.supportedOperations[1..] as alias]
          <alias>${alias}</alias>
        [/#list]
      [/#if]
      [#list uniqueContentTypes(resource) as contentType]
        [#if contentType.produceable && contentType.subcontexts??]
          [#list contentType.subcontexts as subcontext]
          <contentType type="${contentType.type}" consumable="${contentType.consumable?string}" produceable="${contentType.produceable?string}" subcontext="${subcontext}" path="${subcontext}${resources?first.path}"/>
          [/#list]
        [#else]
          <contentType type="${contentType.type}" consumable="${contentType.consumable?string}" produceable="${contentType.produceable?string}"/>
        [/#if]
      [/#list]
      [#list resource.resourceParameters as parameter]
          <parameter name="${parameter.resourceParameterName}" type="${parameter.resourceParameterType?lower_case}">
            <![CDATA[${parameter.docValue!"(no documentation provided)"}]]>
          </parameter>
      [/#list]
      [#if resource.inputPayload??]
          <inValue>
            [#if schemaForNamespace(resource.inputPayload)??]<xmlElement elementSchemaId="${schemaForNamespace(resource.inputPayload).id}" elementNamespace="${resource.inputPayload.xmlElement.namespace!""}" elementName="${resource.inputPayload.xmlElement.name}" />[/#if]
            [#if jsonSchemaForType(resource.inputPayload)??]<jsonElementRef elementName="${resource.inputPayload.jsonType.typeName}" elementSchemaId="${jsonSchemaForType(resource.inputPayload).schemaId}"/>[/#if]
            <documentation><![CDATA[${resource.inputPayload.docValue!"(no documentation provided)"}]]></documentation>
          </inValue>
      [/#if]
      [#if resource.outputPayload??]
          <outValue>
            [#if schemaForNamespace(resource.outputPayload)??]<xmlElement elementSchemaId="${schemaForNamespace(resource.outputPayload).id}" elementNamespace="${resource.outputPayload.xmlElement.namespace!""}" elementName="${resource.outputPayload.xmlElement.name}" />[/#if]
            [#if jsonSchemaForType(resource.outputPayload)??]<jsonElement elementName="${resource.outputPayload.jsonType.typeName}" elementSchemaId="${jsonSchemaForType(resource.outputPayload).schemaId}"/>[/#if]
            <documentation><![CDATA[${resource.outputPayload.docValue!"(no documentation provided)"}]]></documentation>
          </outValue>
      [/#if]
      [#list resource.resourceErrors as error]
          <error code="${error.errorCode}">
            <![CDATA[${error.docValue!""}]]>
          </error>
      [/#list]
        </operation>
    [/#if]
  [/#list]
      </resource>
[/@forEachRESTResourceListByPath]
    </resources>
  </rest>
  <packages>
[@forAllPackages var="package"]
    <package id="${package.qualifiedName}">
  [#if package.docValue??]
      <documentation>
        <![CDATA[${package.docValue}]]>
      </documentation>
  [/#if]
  [#list package.javaDoc?keys as tag]
    [#list package.javaDoc[tag] as tagValue]
      <tag name="${tag}"><![CDATA[${tagValue}]]></tag>
    [/#list]
  [/#list]
    </package>
[/@forAllPackages]
  </packages>
</api-docs>
[/@file]