[#ftl]
[@file name="security-context.xml" charset="utf-8"]
<?xml version="1.0" encoding="UTF-8"?>

<beans:beans xmlns="http://www.springframework.org/schema/security"
  xmlns:beans="http://www.springframework.org/schema/beans"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:oauth="http://spring-security-oauth.codehaus.org/[#if spring3!false]3.0[#else]2.0[/#if]"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-[#if spring3!false]3.0[#else]2.5[/#if].xsd
              http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-[#if spring3!false]3.0[#else]2.0[/#if].xsd
              http://spring-security-oauth.codehaus.org/[#if spring3!false]3.0[#else]2.0[/#if] http://spring-security-oauth.codehaus.org/schema/spring-security-oauth-[#if spring3!false]3.0[#else]2.5[/#if].xsd
              http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-[#if spring3!false]3.0[#else]2.5[/#if].xsd">

  <context:annotation-config/>
  [#if securityConfig.userDetailsService?exists]
    [#if securityConfig.userDetailsService.beanName?exists]
      [#assign _enunciate_user_details_ref=securityConfig.userDetailsService.beanName/]
    [#elseif securityConfig.userDetailsService.className?exists]
      [#assign _enunciate_user_details_ref="enunciate-user-details"/]

  <beans:bean id="${_enunciate_user_details_ref}" class="${securityConfig.userDetailsService.className}"/>
    [/#if]
  [/#if]
  [#if securityConfig.onAuthenticationFailed?exists && securityConfig.onAuthenticationFailed.redirectTo?exists]
    [#assign entryPointDefined=true/]

  <!-- entry point on authentication failed (redirect to "${securityConfig.onAuthenticationFailed.redirectTo}")-->
  <beans:bean id="enunciate-entry-point" [#if spring3!false]class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint"[#else]class="org.springframework.security.ui.webapp.AuthenticationProcessingFilterEntryPoint"[/#if]>
    <beans:property name="loginFormUrl" value="${securityConfig.onAuthenticationFailed.redirectTo}"/>
  </beans:bean>
  [#elseif securityConfig.onAuthenticationFailed?exists && securityConfig.onAuthenticationFailed.useEntryPoint?exists]
    [#if securityConfig.onAuthenticationFailed.useEntryPoint.beanName?exists]
      [#assign entryPointDefined=true/]

  <!-- entry point on authentication failed. -->
  <beans:alias alias="enunciate-entry-point" name="${securityConfig.onAuthenticationFailed.useEntryPoint.beanName}"/>
    [#elseif securityConfig.onAuthenticationFailed.useEntryPoint.className?exists]
      [#assign entryPointDefined=true/]

  <!-- entry point on authentication failed. -->
  <beans:bean id="enunciate-entry-point" class="${securityConfig.onAuthenticationFailed.useEntryPoint.className}"/>
    [/#if]
  [#elseif securityConfig.enableDigestHTTPAuth]
    [#assign entryPointDefined=true/]

  <!-- entry point on authentication failed. (Ask for HTTP digest auth credentials.) -->
  <beans:bean id="enunciate-entry-point" [#if spring3!false]class="org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint"[#else]class="org.springframework.security.ui.digestauth.DigestProcessingFilterEntryPoint"[/#if]>
    <beans:property name="realmName" value="${securityConfig.digestAuthConfig.realmName?default(securityConfig.realmName?default("Spring Security Application"))}"/>
    <beans:property name="key" value="${securityConfig.digestAuthConfig.key?default(securityConfig.key)}"/>
    [#if securityConfig.digestAuthConfig.nonceValiditySeconds?exists]
    <beans:property name="nonceValiditySeconds" nonceValiditySeconds="${securityConfig.digestAuthConfig.nonceValiditySeconds}"/>
    [/#if]
  </beans:bean>
  [#elseif securityConfig.enableBasicHTTPAuth]
    [#assign entryPointDefined=true/]

  <!-- entry point on authentication failed. (Ask for HTTP basic auth credentials.) -->
  <beans:bean id="enunciate-entry-point" [#if spring3!false]class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint"[#else]class="org.springframework.security.ui.basicauth.BasicProcessingFilterEntryPoint"[/#if]>
    <beans:property name="realmName" value="${securityConfig.basicAuthConfig.realmName?default(securityConfig.realmName?default("Spring Security Application"))}"/>
  </beans:bean>
  [/#if]

  <http auto-config="false"[#if !securityConfig.initJ2EESecurityContext] servlet-api-provision="false"[/#if][#if securityConfig.onAccessDenied?exists && securityConfig.onAccessDenied.redirectTo?exists] access-denied-page="${securityConfig.onAccessDenied.redirectTo}"[/#if][#if entryPointDefined?exists && entryPointDefined] entry-point-ref="enunciate-entry-point"[/#if][#if securityConfig.realmName?exists] realm="${securityConfig.realmName}"[/#if]>
  [#list securityConfig.secureUrls?keys as pattern]
    [#if securityConfig.secureUrls[pattern]?exists]
    <intercept-url pattern="${servletPatternToAntPattern(pattern)}" access="${securityConfig.secureUrls[pattern]}"/>
    [/#if]
  [/#list]
  [#if securityConfig.applySecurityToSOAPUrls]
    [@forEachWsdl]
      [@forEachEndpointInterface wsdl=wsdl]
        [#if endpointInterface.annotations["javax.annotation.security.RolesAllowed"]?exists]
    <intercept-url pattern="${endpointInterface.metaData.soapPath?default("/soap/" + endpointInterface.serviceName)}" access="[#list endpointInterface.annotations["javax.annotation.security.RolesAllowed"].value as role]${role}[#if role_has_next],[/#if][/#list]"/>
        [/#if]
      [/@forEachEndpointInterface]
    [/@forEachWsdl]
  [/#if]
    <intercept-url pattern="/**"/>

  [#if securityConfig.enableFormBasedLogout]
    <logout logout-success-url="${securityConfig.formBasedLogoutConfig.redirectOnSuccessUrl}" logout-url="${securityConfig.formBasedLogoutConfig.url}"/>
  [/#if]
  [#if securityConfig.enableBasicHTTPAuth]
    <http-basic/>
  [/#if]
  [#if securityConfig.enableFormBasedLogin]
    [#if securityConfig.formBasedLoginConfig.enableOpenId]
    <openid-login authentication-failure-url="${securityConfig.formBasedLoginConfig.redirectOnFailureUrl}" default-target-url="${securityConfig.formBasedLoginConfig.redirectOnSuccessUrl}" login-page="${securityConfig.formBasedLoginConfig.loginPageURL}" login-processing-url="${securityConfig.formBasedLoginConfig.url}" user-service-ref="${_enunciate_user_details_ref}"/>
    [#else]
    <form-login authentication-failure-url="${securityConfig.formBasedLoginConfig.redirectOnFailureUrl}" default-target-url="${securityConfig.formBasedLoginConfig.redirectOnSuccessUrl}" login-page="${securityConfig.formBasedLoginConfig.loginPageURL}" login-processing-url="${securityConfig.formBasedLoginConfig.url}"/>
    [/#if]
  [/#if]
  [#if securityConfig.enableRememberMeToken]
    <remember-me key="${securityConfig.rememberMeConfig.key?default(securityConfig.key)}"/>
  [/#if]
  [#if securityConfig.loadAnonymousIdentity]
    <anonymous key="${securityConfig.anonymousConfig.key?default(securityConfig.key)}" username="${securityConfig.anonymousConfig.userId?default("anonymous")}" granted-authority="${securityConfig.anonymousConfig.roles?default("ROLE_ANONYMOUS")}"/>
  [/#if]
  </http>
  [#if securityConfig.additionalAuthenticationFilters?exists]
    [#list securityConfig.additionalAuthenticationFilters as filter]
      [#if filter.beanName?exists]

  <beans:bean parent="${filter.beanName}">
      [#elseif filter.className?exists]

  <beans:bean class="${filter.className}">
      [/#if]
    <custom-filter before="PRE_AUTH_FILTER"/>
  </beans:bean>
    [/#list]
  [/#if]
  [#if securityConfig.enableDigestHTTPAuth]

  <beans:bean [#if spring3!false]class="org.codehaus.enunciate.modules.spring_app.EnunciateDigestAuthenticationFilter"[#else]class="org.codehaus.enunciate.modules.spring_app.EnunciateDigestProcessingFilter"[/#if]>
    <custom-filter position="BASIC_PROCESSING_FILTER"/>
  </beans:bean>
  [/#if]
  [#if securityConfig.enableOAuth]

  <!-- Define the OAuth provider.  For more information, see http://spring-security-oauth.codehaus.org/userguide.html -->
  <oauth:provider
    request-token-url="${securityConfig.OAuthConfig.requestTokenURL}"
    authenticate-token-url="${securityConfig.OAuthConfig.grantAccessURL}"
    authentication-failed-url="${securityConfig.OAuthConfig.accessConfirmationURL}"
    access-granted-url="${securityConfig.OAuthConfig.accessConfirmedURL}"
    access-token-url="${securityConfig.OAuthConfig.accessTokenURL}"/>

    [#if securityConfig.OAuthConfig.tokenServices?exists && securityConfig.OAuthConfig.tokenServices.className?exists]
  <beans:bean class="${securityConfig.OAuthConfig.tokenServices.className}"/>
    [/#if]
    [#if securityConfig.OAuthConfig.consumerDetailsService?exists && securityConfig.OAuthConfig.consumerDetailsService.className?exists]
  <beans:bean class="${securityConfig.OAuthConfig.consumerDetailsService.className}"/>
    [/#if]

  <!--The filter that ensures that the user is authenticated before allowing the confirm access page.-->
  <beans:bean id="oauthConfirmAccessFilter" class="org.codehaus.enunciate.modules.spring_app.OAuthConfirmAccessFilter">
    <custom-filter after="EXCEPTION_TRANSLATION_FILTER"/>
    <beans:property name="confirmAccessUrl" value="${securityConfig.OAuthConfig.accessConfirmationURL}"/>
    <beans:property name="accessConfirmedUrl" value="${securityConfig.OAuthConfig.accessConfirmedURL}"/>
  </beans:bean>
  [/#if]
  [#if spring3!false]
    [#if !securityConfig.disableDefaultProvider]
  <beans:bean id="enunciate-auth-provider" class="org.codehaus.enunciate.modules.spring_app.DefaultEnunciateAuthenticationProvider">
      [#if securityConfig.userDetailsService?exists]
    <beans:property name="userDetailsService" ref="${_enunciate_user_details_ref}"/>
      [/#if]
  </beans:bean>
      [#assign _auth_provider_ref="enunciate-auth-provider"/]
    [#elseif securityConfig.primaryProvider??]
      [#if securityConfig.primaryProvider.beanName??]
        [#assign _auth_provider_ref=securityConfig.primaryProvider.beanName/]
      [#elseif securityConfig.primaryProvider.className??]

  <beans:bean id="enunciate-auth-provider" class="${securityConfig.primaryProvider.className}"/>
        [#assign _auth_provider_ref="enunciate-auth-provider"/]
      [/#if]
    [/#if]
    [#if _auth_provider_ref??]
  <authentication-manager alias="authenticationManager">
    <authentication-provider ref="${_auth_provider_ref}"/>
  </authentication-manager>
    [/#if]
  [#else]
    [#if !securityConfig.disableDefaultProvider]
      [#if securityConfig.userDetailsService?exists]
  <authentication-provider user-service-ref="${_enunciate_user_details_ref}"/>
      [#else]

  <beans:bean id="enunciate-auth-provider" class="org.codehaus.enunciate.modules.spring_app.DefaultEnunciateAuthenticationProvider">
    <custom-authentication-provider/>
  </beans:bean>
      [/#if]
    [#elseif securityConfig.primaryProvider??]
      [#if securityConfig.primaryProvider.beanName??]

  <beans:bean id="enunciate-auth-provider" parent="${securityConfig.primaryProvider.beanName}">
    <custom-authentication-provider/>
  </beans:bean>
      [#elseif securityConfig.primaryProvider.className??]

  <beans:bean id="enunciate-auth-provider" class="${securityConfig.primaryProvider.className}">
    <custom-authentication-provider/>
  </beans:bean>
      [/#if]
    [/#if]

  <authentication-manager alias="authenticationManager"/>
  [/#if]

  <!-- service method interceptor (used to lock down the service methods.)-->
  <beans:bean id="enunciate-security-interceptor" [#if spring3!false]class="org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor"[#else]class="org.springframework.security.intercept.method.aopalliance.MethodSecurityInterceptor"[/#if]>
    <beans:property name="authenticationManager" ref="authenticationManager"/>
    <beans:property name="accessDecisionManager">
      <beans:bean [#if spring3!false]class="org.springframework.security.access.vote.AffirmativeBased"[#else]class="org.springframework.security.vote.AffirmativeBased"[/#if]>
        <beans:property name="allowIfAllAbstainDecisions" value="true"/>
        <beans:property name="decisionVoters">
          <beans:list>
            <beans:bean class="org.codehaus.enunciate.modules.spring_app.JSR250Voter"/>
  [#if securityConfig.enableOAuth]
            <beans:bean class="org.springframework.security.oauth.provider.attributes.ConsumerSecurityVoter"/>
  [/#if]
          </beans:list>
        </beans:property>
      </beans:bean>
    </beans:property>
    <beans:property [#if spring3!false]name="securityMetadataSource"[#else]name="objectDefinitionSource"[/#if]>
  [#if !spring3!false]
      <beans:bean class="org.springframework.security.intercept.method.MethodDefinitionAttributes">
        <beans:property name="attributes">
  [/#if]
          <beans:bean [#if spring3!false]class="org.codehaus.enunciate.modules.spring_app.WebMethodSecurityMetadataSource"[#else]class="org.codehaus.enunciate.modules.spring_app.WebMethodSecurityAnnotationAttributes"[/#if]>
            <beans:constructor-arg>
              <!-- List of the security attributes that are supported by Enunciate. -->
              <beans:list>
                <!-- JSR 250 attributes -->
                <beans:bean [#if spring3!false]class="org.codehaus.enunciate.modules.spring_app.JSR250SecurityMetadataSource"[#else]class="org.codehaus.enunciate.modules.spring_app.JSR250SecurityAnnotationAttributes"[/#if]/>
  [#if securityConfig.enableOAuth]
                <!-- OAuth security attributes -->
                <beans:bean [#if spring3!false]class="org.springframework.security.oauth.provider.attributes.ConsumerSecurityMetadataSource"[#else]class="org.springframework.security.oauth.provider.attributes.ConsumerSecurityAnnotationAttributes"[/#if]/>
  [/#if]
              </beans:list>
            </beans:constructor-arg>
          </beans:bean>
  [#if !spring3!false]
        </beans:property>
      </beans:bean>
  [/#if]
    </beans:property>
  </beans:bean>

  <!-- utility for programatic login/logout -->
  <beans:bean id="loginLogoutHelper" class="org.codehaus.enunciate.modules.spring_app.LoginLogoutHelperImpl"/>

  <!-- utility to use to determine if an exception that was thrown is auth failed or access denied. -->
  <beans:bean id="securityChecker" class="org.codehaus.enunciate.modules.spring_app.SpringSecurityExceptionChecker"/>

  <!-- the error handler for the application -->
  <beans:bean id="securityExceptionResolver" class="org.codehaus.enunciate.modules.spring_app.SecurityAwareExceptionHandler"/>

</beans:beans>
[/@file]