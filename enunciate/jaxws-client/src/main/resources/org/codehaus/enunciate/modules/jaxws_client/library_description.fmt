[#ftl]
[#-- @ftlvariable name="sample_resource" type="org.codehaus.enunciate.contract.common.rest.RESTResource" --]
[#-- @ftlvariable name="sample_service_method" type="org.codehaus.enunciate.contract.jaxws.WebMethod" --]
<h1>
  Introduction
</h1>

[#if sample_service_method??]
<p>
  The JAX-WS client-side library may be used to access the SOAP API for this application via
  the Java runtime, using <a href="https://jax-ws.dev.java.net/">JAX-WS</a>. This is a slim, light,
  client library with minimal dependency bloat (as of Java 6, JAX-WS ships with the JDK), but
  it requires Java 5+.
</p>

<h1>
    JAX-WS Example
</h1>

<code>
//instantiate a new service with an impl
// (or through dependency injection, or whatever)...
${sample_service_method.declaringEndpointInterface.simpleName} service =
  [#if sample_service_method.declaringEndpointInterface.endpointImplementations?size > 0]new ${sample_service_method.declaringEndpointInterface.endpointImplementations?first.simpleName}()[#else]...[/#if];

//make the remote call to read the result...
result = service.${sample_service_method.simpleName}([#list sample_service_method.webParameters as param]${param.clientSimpleName}[#if param_has_next], [/#if][/#list]);

//handle the result as needed...
</code>
[/#if]
[#if sample_resource??]
<p>
  The JAX-WS client-side library is used to provide the set of Java objects that can be serialized
  to/from XML using <a href="https://jaxb.dev.java.net/">JAXB</a>.  This is useful for accessing the
  REST endpoints that are published by this application.
</p>

[#if sample_resource.outputPayload?? && sample_resource.outputPayload.xmlElement??]
<h1>
  REST Example (Standard JAXB)
</h1>

<code>
//read a purchase order from a REST url
java.net.URL url = ...;
JAXBContext context = JAXBContext.newInstance(
  ${sample_resource.outputPayload.xmlElement.simpleName}.class
)

Unmarshaller unmarshaller =
  context.createUnmarshaller();

${sample_resource.outputPayload.xmlElement.simpleName} result =
  (${sample_resource.outputPayload.xmlElement.simpleName})
  unmarshaller.unmarshal( url );

//handle the result as needed...
</code>

<h1>
  REST Example (Jersey client)
</h1>

<code>
com.sun.jersey.api.client.Client client =
  com.sun.jersey.api.client.Client.create();

${sample_resource.outputPayload.xmlElement.simpleName} result =
  client.resource(baseUrl + "${sample_resource.path}")
  [#if sample_resource.inputPayload?? && sample_resource.inputPayload.xmlElement??]
  .entity(${sample_resource.inputPayload.xmlElement.simpleName?uncap_first})
  [/#if]
  .${sample_resource.supportedOperations?first?lower_case}(${sample_resource.outputPayload.xmlElement.simpleName}.class);

//handle the result as needed...
</code>
[/#if]
[/#if]