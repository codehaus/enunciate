Index: spring2-todo.txt
===================================================================
--- spring2-todo.txt	(revision 0)
+++ spring2-todo.txt	(revision 0)
@@ -0,0 +1,15 @@
+remove EnunciateServiceFactory, EnunciateServiceFactoryAware, DefaultEnunciateServiceFactory
+  spring config changes for: GWTEndpointImpls, AMFEndpointimpls, EnunciatedXFireExporter (call setServiceBean), RESTResourceFactory (call
+remove SecurityExceptionChecker injections
+remove EnunciateServiceAdvice, EnunciateServiceAdvisor
+remove LoginLogoutProvider
+remove EnunciateSpringSecuritySupport
+remove org.codehaus.enunciate.modules.spring_app.Delegating*
+adjust spring config files
+make sure GWT, AMF endpoints populated correctly.
+
+confirm:
+
+  -spring-servlet beans get injected with applicationContext-level beans correctly
+  -annotation configurations are inherited by class (e.g. AMFEndpointImpl gets
+    correctly injected with SecurityExceptionChecker).
\ No newline at end of file

Property changes on: spring2-todo.txt
___________________________________________________________________
Name: svn:mime-type
   + text/plain
Name: svn:keywords
   + Date Revision
Name: svn:eol-style
   + native

Index: modules/spring-app/src/tools/org/codehaus/enunciate/modules/spring_app/CustomServiceBeanPostProcessor.java
===================================================================
--- modules/spring-app/src/tools/org/codehaus/enunciate/modules/spring_app/CustomServiceBeanPostProcessor.java	(revision 0)
+++ modules/spring-app/src/tools/org/codehaus/enunciate/modules/spring_app/CustomServiceBeanPostProcessor.java	(revision 0)
@@ -0,0 +1,37 @@
+/*
+ * Copyright 2006-2008 Web Cohesion
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.codehaus.enunciate.modules.spring_app;
+
+import org.springframework.beans.BeansException;
+import org.springframework.beans.factory.config.BeanPostProcessor;
+
+/**
+ * Post processor for service beans that are custom-defined. Basically makes sure the
+ * custom-defined beans are wrapped.
+ *
+ * @author Ryan Heaton
+ */
+public class CustomServiceBeanPostProcessor implements BeanPostProcessor {
+
+  public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
+    return bean;
+  }
+
+  public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
+    return bean;
+  }
+}

Property changes on: modules/spring-app/src/tools/org/codehaus/enunciate/modules/spring_app/CustomServiceBeanPostProcessor.java
___________________________________________________________________
Name: svn:mime-type
   + text/plain
Name: svn:keywords
   + Date Revision
Name: svn:eol-style
   + native

Index: modules/spring-app/src/tools/org/codehaus/enunciate/modules/spring_app/EndpointBeanFactory.java
===================================================================
--- modules/spring-app/src/tools/org/codehaus/enunciate/modules/spring_app/EndpointBeanFactory.java	(revision 395)
+++ modules/spring-app/src/tools/org/codehaus/enunciate/modules/spring_app/EndpointBeanFactory.java	(working copy)
@@ -17,8 +17,8 @@
 package org.codehaus.enunciate.modules.spring_app;
 
 import org.aopalliance.aop.Advice;
-import org.codehaus.enunciate.service.EnunciateServiceFactory;
-import org.codehaus.enunciate.service.EnunciateServiceFactoryAware;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.springframework.aop.Advisor;
 import org.springframework.aop.framework.ProxyFactory;
 import org.springframework.beans.BeansException;
@@ -34,12 +34,14 @@
 import java.util.Map;
 
 /**
- * Spring implementation of {@link EnunciateServiceFactory}.
+ * Spring implementation of {@link org.codehaus.enunciate.service.EnunciateServiceFactory}.
  *
  * @author Ryan Heaton
  */
-public class SpringAppServiceFactory extends ApplicationObjectSupport implements EnunciateServiceFactory {
+public class EndpointBeanFactory extends ApplicationObjectSupport {
 
+  private static final Log LOG = LogFactory.getLog(EndpointBeanFactory.class);
+
   private final List<Object> globalServiceInterceptors = new ArrayList<Object>();
   private final Map<String, List<Object>> serviceSpecificInterceptors = new HashMap<String, List<Object>>();
 
@@ -111,45 +113,79 @@
     }
 
     this.globalServiceInterceptors.add(index + 1, globalInterceptor);
-
   }
 
-  // Inherited.
-  public Object getInstance(Class implClass, Class... interfaces) throws IllegalAccessException, InstantiationException {
-    return getInstance(implClass.newInstance(), interfaces);
+  /**
+   * Finds a service interface implementation.
+   *
+   * @param iface           The service interface.
+   * @param defaultBeanName The bean name to use to look up something in the context.
+   * @param defaultImpl     The default implementation bean.
+   * @return The implementation.  If a bean named <tt>defaultBeanName</tt> exists in the context use that.  Otherwise, if a single bean of type <tt>iface</tt>
+   *         exists in the context, use that.  Otherwise, instantiate the <tt>defaultImpl</tt>.
+   */
+  public Object findOrCreateInstance(Class iface, String defaultBeanName, Class defaultImpl) throws Exception {
+    Object bean = getApplicationContext().getBean(defaultBeanName, iface);
+    if (bean == null) {
+      Map serviceInterfaceBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(getApplicationContext(), iface);
+      if (serviceInterfaceBeans.size() > 1) {
+        //panic: can't determine the service bean to use.
+        ArrayList beanNames = new ArrayList(serviceInterfaceBeans.keySet());
+        throw new ApplicationContextException("There are more than one beans of type " + iface.getName() +
+          " in the application context " + beanNames + ".  Cannot determine which one to use to handle the service requests." +
+          "Either reduce the number of beans of this type to one, or specify which one to use by naming it \"" + defaultBeanName + "\".");
+      }
+      else if (serviceInterfaceBeans.size() == 1) {
+        //if there is only one defined, use that instead.
+        bean = serviceInterfaceBeans.values().iterator().next();
+      }
+    }
+
+    return wrapEndpoint(iface, bean != null ? bean : defaultImpl.newInstance());
   }
 
-  // Inherited.
-  public Object getInstance(Object impl, Class... interfaces) {
+  /**
+   * Wraps a specific endpoint bean with the necessary interceptors.
+   *
+   * @param iface        The interface.
+   * @param endpointImpl The implementation.
+   * @return The wrapped endpoint.
+   */
+  public Object wrapEndpoint(Class iface, Object endpointImpl) throws Exception {
     ArrayList<Object> interceptors = new ArrayList<Object>(this.globalServiceInterceptors);
 
-    for (Class iface : interfaces) {
-      if (this.serviceSpecificInterceptors.get(iface.getName()) != null) {
-        interceptors.addAll(this.serviceSpecificInterceptors.get(iface.getName()));
-      }
+    if (this.serviceSpecificInterceptors.get(iface.getName()) != null) {
+      interceptors.addAll(this.serviceSpecificInterceptors.get(iface.getName()));
     }
 
-    if (interceptors.size() > 0) {
-      ProxyFactory proxyFactory = new ProxyFactory(impl);
-      proxyFactory.setInterfaces(interfaces);
+    Object endpoint = endpointImpl;
 
-      for (Object interceptor : interceptors) {
-        if (interceptor instanceof Advice) {
-          proxyFactory.addAdvice((Advice) interceptor);
+    if (iface.isInterface()) {
+      if (interceptors.size() > 0) {
+        ProxyFactory proxyFactory = new ProxyFactory();
+        proxyFactory.setTarget(endpointImpl);
+        proxyFactory.setInterfaces(new Class[]{iface});
+        for (Object interceptor : interceptors) {
+          if (interceptor instanceof Advice) {
+            proxyFactory.addAdvice((Advice) interceptor);
+          }
+          else if (interceptor instanceof Advisor) {
+            proxyFactory.addAdvisor((Advisor) interceptor);
+          }
+          else {
+            throw new ApplicationContextException("Attempt to inject an interceptor that is neither advice nor an advisor (class: "
+              + interceptor.getClass() + ").");
+          }
         }
-        else if (interceptor instanceof Advisor) {
-          proxyFactory.addAdvisor((Advisor) interceptor);
-        }
-        else {
-          throw new ApplicationContextException("Attempt to inject an interceptor that is neither advice nor an advisor (class: "
-            + interceptor.getClass() + ").");
-        }
+
+        endpoint = proxyFactory.getProxy();
       }
-
-      impl = proxyFactory.getProxy();
     }
+    else {
+      LOG.info(iface.getName() + " is not an interface, so it won't be proxied (interceptors won't be applied).");
+    }
 
-    return impl;
+    return endpoint;
   }
 
-}
+}
\ No newline at end of file
Index: modules/spring-app/src/java/org/codehaus/enunciate/modules/spring_app/web.xml.fmt
===================================================================
--- modules/spring-app/src/java/org/codehaus/enunciate/modules/spring_app/web.xml.fmt	(revision 409)
+++ modules/spring-app/src/java/org/codehaus/enunciate/modules/spring_app/web.xml.fmt	(working copy)
@@ -45,6 +45,7 @@
   [#if gwtEnabled]
     [@forEachWsdl]
       [@forEachEndpointInterface wsdl=wsdl]
+      [#--todo: no, not here, pull it down to the servlet context and use a org.springframework.web.servlet.mvc.ServletWrappingController--]
   <servlet>
     <servlet-name>GWT${endpointInterface.simpleName}</servlet-name>
     <servlet-class>${endpointInterface.package.qualifiedName}.gwt.GWT${endpointInterface.simpleName}Impl</servlet-class>
@@ -54,6 +55,7 @@
     [/@forEachWsdl]
   [/#if]
   [#if amfEnabled]
+      [#--todo: no, not here, pull it down to the servlet context and use a org.springframework.web.servlet.mvc.ServletWrappingController--]
   <servlet>
       <servlet-name>AMFMessageServlet</servlet-name>
       <servlet-class>flex.messaging.MessageBrokerServlet</servlet-class>
@@ -69,6 +71,7 @@
   </servlet>
 
   [/#if]
+  [#--todo: should there only have to be *one* servlet mapping? the problem is the docs and other static resources?--]
   [@forEachWsdl]
     [@forEachEndpointInterface wsdl=wsdl]
       [#list endpointInterface.endpointImplementations as impl]
@@ -81,6 +84,7 @@
         [/#if]
       [/#list]
       [#if gwtEnabled]
+      [#--todo: no, not here, pull it down to the servlet context and use a org.springframework.web.servlet.mvc.ServletWrappingController--]
   <servlet-mapping>
     <servlet-name>GWT${endpointInterface.simpleName}</servlet-name>
     <url-pattern>/gwt/${endpointInterface.serviceName}</url-pattern>
@@ -88,6 +92,7 @@
 
       [/#if]
       [#if amfEnabled]
+      [#--todo: no, not here, pull it down to the servlet context and use a org.springframework.web.servlet.mvc.ServletWrappingController--]
   <servlet-mapping>
       <servlet-name>AMFMessageServlet</servlet-name>
       <url-pattern>/amf/${endpointInterface.serviceName}</url-pattern>
Index: modules/spring-app/src/java/org/codehaus/enunciate/modules/spring_app/spring-servlet.fmt
===================================================================
--- modules/spring-app/src/java/org/codehaus/enunciate/modules/spring_app/spring-servlet.fmt	(revision 408)
+++ modules/spring-app/src/java/org/codehaus/enunciate/modules/spring_app/spring-servlet.fmt	(working copy)
@@ -26,7 +26,7 @@
     </constructor-arg>
   </bean>
 
-  <!-- the content type support -->
+  <!-- the REST content type support -->
   <bean id="contentTypeSupport" class="org.codehaus.enunciate.modules.rest.ContentTypeSupport">
     <constructor-arg>
       <map>
Index: modules/spring-app/src/java/org/codehaus/enunciate/modules/spring_app/SpringAppDeploymentModule.java
===================================================================
--- modules/spring-app/src/java/org/codehaus/enunciate/modules/spring_app/SpringAppDeploymentModule.java	(revision 409)
+++ modules/spring-app/src/java/org/codehaus/enunciate/modules/spring_app/SpringAppDeploymentModule.java	(working copy)
@@ -146,9 +146,7 @@
  * &nbsp;&nbsp;&lt;modules&gt;
  * &nbsp;&nbsp;&nbsp;&nbsp;&lt;spring-app compileDebugInfo="[true | false]"
  * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contextLoaderListenerClass="..."
- * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispatcherServletClass="..."
- * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;defaultDependencyCheck="[none | objects | simple | all]"
- * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;defaultAutowire="[no | byName | byType | constructor | autodetect]"&gt;
+ * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispatcherServletClass="..."&gt;
  * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;war name="..." webXMLTransform="..." webXMLTransformURL="..."
  * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;preBase="..." postBase="..."
  * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;includeClasspathLibs="[true|false]" excludeDefaultLibs="[true|false]"
@@ -431,8 +429,12 @@
       //generate the spring-servlet.xml
       model.setFileOutputDirectory(getConfigGenerateDir());
       model.put("springImports", getSpringImportURIs());
-      model.put("defaultDependencyCheck", getDefaultDependencyCheck());
-      model.put("defaultAutowire", getDefaultAutowire());
+      if (getDefaultDependencyCheck() != null) {
+        warn("As of Enunciate 1.8, defaultDependencyCheck is no longer supported.");
+      }
+      if (getDefaultAutowire() != null) {
+        warn("As of Enunciate 1.8, defaultAutowire is no longer supported.");
+      }
       model.put("springContextLoaderListenerClass", getContextLoaderListenerClass());
       model.put("springDispatcherServletClass", getDispatcherServletClass());
       model.put("soapAddressPath", new SoapAddressPathMethod());
Index: modules/spring-app/src/java/org/codehaus/enunciate/modules/spring_app/applicationContext.xml.fmt
===================================================================
--- modules/spring-app/src/java/org/codehaus/enunciate/modules/spring_app/applicationContext.xml.fmt	(revision 395)
+++ modules/spring-app/src/java/org/codehaus/enunciate/modules/spring_app/applicationContext.xml.fmt	(working copy)
@@ -1,9 +1,17 @@
 [#ftl]
 [@file name="applicationContext.xml"]
 <?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
+<?xml version="1.0" encoding="UTF-8"?>
+<beans xmlns="http://www.springframework.org/schema/beans"
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns:context="http://www.springframework.org/schema/context"
+       xsi:schemaLocation="
+        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
+        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd">
 <beans[#if defaultDependencyCheck?exists] default-dependency-check="${defaultDependencyCheck}"[/#if][#if defaultAutowire?exists] default-autowire="${defaultAutowire}"[/#if]>
 
+  <context:annotation-config/>
+
   <import resource="classpath:org/codehaus/xfire/spring/xfire.xml"/>
   [#if securityEnabled]
   <import resource="spring-security-context.xml"/>
Index: modules/gwt/gwt-tools-pom.xml
===================================================================
--- modules/gwt/gwt-tools-pom.xml	(revision 409)
+++ modules/gwt/gwt-tools-pom.xml	(working copy)
@@ -29,14 +29,9 @@
       <groupId>org.springframework</groupId>
       <artifactId>spring</artifactId>
       <version>@spring.version@</version>
+      <optional>true</optional>
     </dependency>
 
-    <dependency>
-      <groupId>org.springframework</groupId>
-      <artifactId>spring-webmvc</artifactId>
-      <version>@spring.version@</version>
-    </dependency>
-
   </dependencies>
 
 </project>
\ No newline at end of file
Index: modules/gwt/src/test/org/codehaus/enunciate/modules/gwt/TestGWTEndpointImpl.java
===================================================================
--- modules/gwt/src/test/org/codehaus/enunciate/modules/gwt/TestGWTEndpointImpl.java	(revision 395)
+++ modules/gwt/src/test/org/codehaus/enunciate/modules/gwt/TestGWTEndpointImpl.java	(working copy)
@@ -76,7 +76,7 @@
       }
 
 
-      protected Class getServiceClass() {
+      protected Class getServiceInterface() {
         return BeansServiceImpl.class;
       }
 
Index: modules/gwt/src/tools/org/codehaus/enunciate/modules/gwt/GWTEndpointImpl.java
===================================================================
--- modules/gwt/src/tools/org/codehaus/enunciate/modules/gwt/GWTEndpointImpl.java	(revision 395)
+++ modules/gwt/src/tools/org/codehaus/enunciate/modules/gwt/GWTEndpointImpl.java	(working copy)
@@ -17,37 +17,41 @@
 package org.codehaus.enunciate.modules.gwt;
 
 import com.google.gwt.user.server.rpc.RemoteServiceServlet;
-import org.codehaus.enunciate.service.DefaultEnunciateServiceFactory;
-import org.codehaus.enunciate.service.EnunciateServiceFactory;
-import org.codehaus.enunciate.service.SecurityExceptionChecker;
 import org.codehaus.enunciate.service.DefaultSecurityExceptionChecker;
-import org.springframework.beans.factory.BeanFactoryUtils;
-import org.springframework.context.ApplicationContext;
-import org.springframework.context.ApplicationContextException;
-import org.springframework.context.support.GenericApplicationContext;
-import org.springframework.util.ClassUtils;
-import org.springframework.web.context.WebApplicationContext;
-import org.springframework.web.context.support.WebApplicationContextUtils;
+import org.codehaus.enunciate.service.SecurityExceptionChecker;
+import org.springframework.beans.factory.annotation.Autowired;
 
 import javax.jws.WebMethod;
-import javax.jws.WebService;
-import javax.servlet.ServletException;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
-import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.Map;
 
 /**
+ * Base implementation for a GWT endpoint.
+ *
  * @author Ryan Heaton
  */
 public abstract class GWTEndpointImpl extends RemoteServiceServlet {
 
   private final HashMap<String, Method> operationNames2Methods = new HashMap<String, Method>();
-  private Object serviceBean;
-  private SecurityExceptionChecker securityChecker;
+  private final Object serviceBean;
+  private SecurityExceptionChecker securityChecker = new DefaultSecurityExceptionChecker();
 
+  protected GWTEndpointImpl(Object serviceBean) {
+    this.serviceBean = serviceBean;
+
+    for (Method method : getServiceInterface().getMethods()) {
+      String operationName = method.getName();
+      WebMethod webMethodInfo = method.getAnnotation(WebMethod.class);
+      if ((webMethodInfo != null) && (!"".equals(webMethodInfo.operationName()))) {
+        operationName = webMethodInfo.operationName();
+      }
+
+      this.operationNames2Methods.put(operationName, method);
+    }
+  }
+
   protected final Object invokeOperation(String operationName, Object... params) throws Exception {
     Method method = this.operationNames2Methods.get(operationName);
     if (method == null) {
@@ -73,12 +77,6 @@
     try {
       returnValue = method.invoke(serviceBean, mappedParams);
     }
-    catch (IllegalAccessException e) {
-      throw e;
-    }
-    catch (IllegalArgumentException e) {
-      throw e;
-    }
     catch (InvocationTargetException e) {
       Throwable targetException = e.getTargetException();
       for (int i = 0; i < method.getExceptionTypes().length; i++) {
@@ -103,143 +101,7 @@
     return returnValue;
   }
 
-
-  /**
-   * Load the endpoint bean the conforms to the specified endpoint class.  And fill in the
-   * operation names-to-methods map.
-   */
   @Override
-  public final void init() throws ServletException {
-    // load the service class.
-    Class serviceClass = getServiceClass();
-    Class serviceInterface = serviceClass;
-    WebService wsInfo = (WebService) serviceInterface.getAnnotation(WebService.class);
-    if (wsInfo == null) {
-      throw new ApplicationContextException("Can't find the @javax.jws.WebService annotation on " + getServiceClass().getName());
-    }
-
-    String eiValue = wsInfo.endpointInterface();
-    if (eiValue != null && eiValue.length() > 0) {
-      try {
-        serviceInterface = ClassUtils.forName(eiValue);
-        wsInfo = (WebService) serviceInterface.getAnnotation(WebService.class);
-        if (wsInfo == null) {
-          throw new ApplicationContextException("No @javax.jws.WebService annotation on service interface " + serviceInterface.getName());
-        }
-      }
-      catch (ClassNotFoundException e) {
-        throw new ApplicationContextException("Couldn't find endpoint interface " + wsInfo.endpointInterface(), e);
-      }
-    }
-
-    ApplicationContext applicationContext = loadAppContext();
-    Map serviceInterfaceBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, serviceInterface);
-    if (serviceInterfaceBeans.size() > 0) {
-      String serviceName = wsInfo.serviceName();
-      if ((serviceName == null) || ("".equals(serviceName))) {
-        serviceName = serviceInterface.getSimpleName() + "Service";
-      }
-
-      if (serviceInterfaceBeans.containsKey(serviceName)) {
-        //first attempt will be to load the bean identified by the service name:
-        serviceBean = serviceInterfaceBeans.get(serviceName);
-      }
-      else if (serviceInterfaceBeans.size() == 1) {
-        // not there; use the only one if it exists...
-        serviceBean = serviceInterfaceBeans.values().iterator().next();
-      }
-      else {
-        //panic: can't determine the service bean to use.
-        ArrayList beanNames = new ArrayList(serviceInterfaceBeans.keySet());
-        throw new ApplicationContextException("There are more than one beans of type " + serviceInterface.getName() +
-          " in the application context " + beanNames + ".  Cannot determine which one to use to handle the gwt requests.  " +
-          "Either reduce the number of beans of this type to one, or specify which one to use by naming it the name of the service (\"" + serviceName + "\").");
-      }
-    }
-    else {
-      //try to instantiate the bean with the class...
-      try {
-        serviceBean = serviceClass.newInstance();
-      }
-      catch (Exception e) {
-        throw new ApplicationContextException("Unable to create an instance of " + getServiceClass().getName(), e);
-      }
-    }
-
-    if (serviceInterface.isInterface()) {
-      serviceBean = loadServiceFactory(applicationContext).getInstance(serviceBean, serviceInterface);
-    }
-
-    this.operationNames2Methods.clear();
-
-    for (Method method : serviceInterface.getMethods()) {
-      String operationName = method.getName();
-      WebMethod webMethodInfo = method.getAnnotation(WebMethod.class);
-      if ((webMethodInfo != null) && (!"".equals(webMethodInfo.operationName()))) {
-        operationName = webMethodInfo.operationName();
-      }
-
-      this.operationNames2Methods.put(operationName, method);
-    }
-
-    this.securityChecker = loadSecurityChecker(applicationContext);
-  }
-
-  /**
-   * Loads the security exception checker for this endoint.
-   *
-   * @return the security exception checker for this endoint.
-   */
-  protected SecurityExceptionChecker loadSecurityChecker(ApplicationContext applicationContext) {
-    SecurityExceptionChecker checker = new DefaultSecurityExceptionChecker();
-    String securityCheckerBeanName = getServletConfig().getInitParameter("securityCheckerBeanName");
-    if (securityCheckerBeanName != null) {
-      checker = (SecurityExceptionChecker) applicationContext.getBean(securityCheckerBeanName);
-    }
-    else {
-      Map checkers = BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, SecurityExceptionChecker.class);
-      if (checkers.size() == 1) {
-        checker = (SecurityExceptionChecker) checkers.values().iterator().next();
-      }
-    }
-    return checker;
-  }
-
-  /**
-   * Loads the app context for this servlet.
-   *
-   * @return The app context for this servlet.
-   */
-  protected ApplicationContext loadAppContext() {
-    WebApplicationContext appContext = WebApplicationContextUtils.getWebApplicationContext(getServletContext());
-    //if spring isn't loaded (e.g. we're running from the GWT shell), just return an empty context.
-    return appContext == null ? new GenericApplicationContext() : appContext;
-  }
-
-  /**
-   * Loads the service factory from the application context.
-   * @param applicationContext The app context.
-   * @return The service factory.
-   */
-  protected EnunciateServiceFactory loadServiceFactory(ApplicationContext applicationContext) throws ServletException {
-    EnunciateServiceFactory enunciateServiceFactory = new DefaultEnunciateServiceFactory();
-    String serviceFactoryName = getServletConfig().getInitParameter("enunciateServiceFactoryBeanName");
-    if (serviceFactoryName != null) {
-      enunciateServiceFactory = (EnunciateServiceFactory) applicationContext.getBean(serviceFactoryName);
-    }
-    else {
-      Map factories = BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, EnunciateServiceFactory.class);
-      if (factories.size() > 1) {
-        throw new ServletException("Unable to determine which enunciate service factory to use.  Please disambiguate with a 'enunciateServiceFactoryBeanName' servlet parameter.");
-      }
-      else if (factories.size() == 1) {
-        enunciateServiceFactory = (EnunciateServiceFactory) factories.values().iterator().next();
-      }
-    }
-    return enunciateServiceFactory;
-  }
-
-  @Override
   protected void doUnexpectedFailure(Throwable throwable) {
     if ((securityChecker.isAuthenticationFailed(throwable)) || (securityChecker.isAccessDenied(throwable))) {
       //todo: handle the security exception?
@@ -251,10 +113,19 @@
   }
 
   /**
-   * Get the class of the service implementation that will support this GWT endpoint.
+   * Set the security exception checker.
    *
-   * @return the class of the service implementation that will support this GWT endpoint.
+   * @param securityChecker The security exception checker.
    */
-  protected abstract Class getServiceClass();
+  @Autowired
+  public void setSecurityChecker(SecurityExceptionChecker securityChecker) {
+    this.securityChecker = securityChecker;
+  }
 
+  /**
+   * The service interface.
+   *
+   * @return The service interface.
+   */
+  abstract Class getServiceInterface();
 }
Index: modules/gwt/src/java/org/codehaus/enunciate/modules/gwt/gwt-endpoint-impl.fmt
===================================================================
--- modules/gwt/src/java/org/codehaus/enunciate/modules/gwt/gwt-endpoint-impl.fmt	(revision 395)
+++ modules/gwt/src/java/org/codehaus/enunciate/modules/gwt/gwt-endpoint-impl.fmt	(working copy)
@@ -9,6 +9,14 @@
  */
 public class GWT${endpointInterface.simpleName}Impl extends org.codehaus.enunciate.modules.gwt.GWTEndpointImpl implements ${packageFor(endpointInterface)}.GWT${endpointInterface.simpleName} {
 
+  public GWT${endpointInterface.simpleName}Impl() {
+    super(new ${endpointInterface.endpointImplementations[0].qualifiedName}());
+  }
+
+  @org.springframework.beans.factory.annotation.Autowired
+  public GWT${endpointInterface.simpleName}Impl(${endpointInterface.qualifiedName} endpoint) {
+    super(endpoint);
+  }
   [@forEachWebMethod endpointInterface=endpointInterface]
     [#if !webMethod.annotations["org.codehaus.enunciate.modules.gwt.GWTTransient"]?exists]
 
@@ -45,8 +53,8 @@
   [/@forEachWebMethod]
 
   // Inherited.
-  protected Class getServiceClass() {
-    return ${endpointInterface.endpointImplementations[0].qualifiedName}.class;
+  protected Class getServiceInterface() {
+    return ${endpointInterface.qualifiedName}.class;
   }
 
 }
Index: modules/amf/src/tools/org/codehaus/enunciate/modules/amf/AMFEndpointImpl.java
===================================================================
--- modules/amf/src/tools/org/codehaus/enunciate/modules/amf/AMFEndpointImpl.java	(revision 395)
+++ modules/amf/src/tools/org/codehaus/enunciate/modules/amf/AMFEndpointImpl.java	(working copy)
@@ -18,64 +18,33 @@
 
 import flex.messaging.security.SecurityException;
 import flex.messaging.util.PropertyStringResourceLoader;
-import org.codehaus.enunciate.service.*;
-import org.springframework.beans.BeansException;
-import org.springframework.beans.factory.BeanFactoryUtils;
-import org.springframework.context.ApplicationContextException;
-import org.springframework.context.support.ApplicationObjectSupport;
-import org.springframework.util.ClassUtils;
+import org.codehaus.enunciate.service.DefaultSecurityExceptionChecker;
+import org.codehaus.enunciate.service.SecurityExceptionChecker;
+import org.springframework.beans.factory.annotation.Autowired;
 
 import javax.jws.WebMethod;
-import javax.jws.WebService;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
-import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.Map;
 
 /**
  * Base class for an AMF endpoint.
  *
  * @author Ryan Heaton
  */
-public abstract class AMFEndpointImpl extends ApplicationObjectSupport implements EnunciateServiceFactoryAware {
+public abstract class AMFEndpointImpl {
 
-  private EnunciateServiceFactory enunciateServiceFactory = new DefaultEnunciateServiceFactory();
   private SecurityExceptionChecker securityChecker = new DefaultSecurityExceptionChecker();
   private final HashMap<String, Method> operationNames2Methods = new HashMap<String, Method>();
   private Object serviceBean;
 
-  @Override
-  protected void initApplicationContext() throws BeansException {
-    super.initApplicationContext();
+  protected AMFEndpointImpl(Object serviceBean) {
+    this.serviceBean = serviceBean;
 
-    // load the service class.
-    Class serviceClass = getServiceClass();
-    Class serviceInterface = serviceClass;
-    WebService wsInfo = (WebService) serviceInterface.getAnnotation(WebService.class);
-    if (wsInfo == null) {
-      throw new ApplicationContextException("Can't find the @javax.jws.WebService annotation on " + getServiceClass().getName());
-    }
-
-    String eiValue = wsInfo.endpointInterface();
-    if (eiValue != null && eiValue.length() > 0) {
-      try {
-        serviceInterface = ClassUtils.forName(eiValue);
-        wsInfo = (WebService) serviceInterface.getAnnotation(WebService.class);
-        if (wsInfo == null) {
-          throw new ApplicationContextException("No @javax.jws.WebService annotation on service interface " + serviceInterface.getName());
-        }
-      }
-      catch (ClassNotFoundException e) {
-        throw new ApplicationContextException("Couldn't find endpoint interface " + wsInfo.endpointInterface(), e);
-      }
-    }
-
-    this.serviceBean = loadServiceBean(serviceClass, serviceInterface);
     this.operationNames2Methods.clear();
 
-    for (Method method : serviceInterface.getMethods()) {
+    for (Method method : getServiceInterface().getMethods()) {
       String operationName = method.getName();
       WebMethod webMethodInfo = method.getAnnotation(WebMethod.class);
       if ((webMethodInfo != null) && (!"".equals(webMethodInfo.operationName()))) {
@@ -86,50 +55,6 @@
     }
   }
 
-  protected Object loadServiceBean(Class serviceClass, Class serviceInterface) {
-    Object serviceBean;
-
-    WebService wsInfo = (WebService) serviceClass.getAnnotation(WebService.class);
-    Map serviceInterfaceBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(getApplicationContext(), serviceInterface);
-    if (serviceInterfaceBeans.size() > 0) {
-      String serviceName = wsInfo.serviceName();
-      if ((serviceName == null) || ("".equals(serviceName))) {
-        serviceName = serviceInterface.getSimpleName() + "Service";
-      }
-
-      if (serviceInterfaceBeans.containsKey(serviceName)) {
-        //first attempt will be to load the bean identified by the service name:
-        serviceBean = serviceInterfaceBeans.get(serviceName);
-      }
-      else if (serviceInterfaceBeans.size() == 1) {
-        // not there; use the only one if it exists...
-        serviceBean = serviceInterfaceBeans.values().iterator().next();
-      }
-      else {
-        //panic: can't determine the service bean to use.
-        ArrayList beanNames = new ArrayList(serviceInterfaceBeans.keySet());
-        throw new ApplicationContextException("There are more than one beans of type " + serviceInterface.getName() +
-          " in the application context " + beanNames + ".  Cannot determine which one to use to handle the soap requests.  " +
-          "Either reduce the number of beans of this type to one, or specify which one to use by naming it the name of the service (\"" + serviceName + "\").");
-      }
-    }
-    else {
-      //try to instantiate the bean with the class...
-      try {
-        serviceBean = serviceClass.newInstance();
-      }
-      catch (Exception e) {
-        throw new ApplicationContextException("Unable to create an instance of " + serviceClass.getName(), e);
-      }
-    }
-
-    if (serviceInterface.isInterface()) {
-      serviceBean = enunciateServiceFactory.getInstance(serviceBean, serviceInterface);
-    }
-
-    return serviceBean;
-  }
-
   /**
    * Invoke an operation on the underlying service bean. This will transform each of its AMF object parameters to JAXB object parameters and then invoke the
    * JAX-WS service bean.  The result will be transformed into an AMF object before being returned.
@@ -166,12 +91,6 @@
     try {
       returnValue = method.invoke(serviceBean, mappedParams);
     }
-    catch (IllegalAccessException e) {
-      throw e;
-    }
-    catch (IllegalArgumentException e) {
-      throw e;
-    }
     catch (InvocationTargetException e) {
       Throwable targetException = e.getTargetException();
       if ((securityChecker.isAuthenticationFailed(targetException)) || (securityChecker.isAccessDenied(targetException))) {
@@ -204,27 +123,19 @@
   }
 
   /**
-   * Get the class of the service implementation that will support this AMF endpoint.
-   *
-   * @return the class of the service implementation that will support this AMF endpoint.
-   */
-  protected abstract Class getServiceClass();
-
-  /**
-   * Set the enunciate service factory to use.
-   *
-   * @param enunciateServiceFactory The enunciate service factory.
-   */
-  public void setEnunciateServiceFactory(EnunciateServiceFactory enunciateServiceFactory) {
-    this.enunciateServiceFactory = enunciateServiceFactory;
-  }
-
-  /**
    * Set the security checker for this endpoint.
    *
    * @param securityChecker The security checker.
    */
+  @Autowired
   public void setSecurityChecker(SecurityExceptionChecker securityChecker) {
     this.securityChecker = securityChecker;
   }
+
+  /**
+   * The service interface.
+   *
+   * @return The service interface.
+   */
+  abstract Class getServiceInterface();
 }
Index: modules/amf/src/java/org/codehaus/enunciate/modules/amf/amf-endpoint.fmt
===================================================================
--- modules/amf/src/java/org/codehaus/enunciate/modules/amf/amf-endpoint.fmt	(revision 395)
+++ modules/amf/src/java/org/codehaus/enunciate/modules/amf/amf-endpoint.fmt	(working copy)
@@ -9,6 +9,10 @@
  */
 public class AMF${endpointInterface.simpleName} extends org.codehaus.enunciate.modules.amf.AMFEndpointImpl {
 
+  @org.springframework.beans.factory.annotation.Autowired
+  public AMF${endpointInterface.simpleName}(${endpointInterface.qualifiedName} endpoint) {
+    super(endpoint)
+  }
   [@forEachWebMethod endpointInterface=endpointInterface]
     [#if !webMethod.annotations["org.codehaus.enunciate.modules.amf.AMFTransient"]?exists]
 
@@ -45,9 +49,8 @@
   [/@forEachWebMethod]
 
   // Inherited.
-  protected Class getServiceClass() {
-    return ${endpointInterface.endpointImplementations[0].qualifiedName}.class;
+  protected Class getServiceInterface() {
+    return ${endpointInterface.qualifiedName}.class;
   }
-
 }
 [/@file]
\ No newline at end of file
Index: modules/amf/amf-tools-pom.xml
===================================================================
--- modules/amf/amf-tools-pom.xml	(revision 409)
+++ modules/amf/amf-tools-pom.xml	(working copy)
@@ -35,15 +35,10 @@
       <groupId>org.springframework</groupId>
       <artifactId>spring</artifactId>
       <version>@spring.version@</version>
+      <optional>true</optional>
     </dependency>
 
     <dependency>
-      <groupId>org.springframework</groupId>
-      <artifactId>spring-webmvc</artifactId>
-      <version>@spring.version@</version>
-    </dependency>
-
-    <dependency>
       <groupId>com.adobe.blazeds</groupId>
       <artifactId>blazeds-common</artifactId>
       <version>3.0</version>
Index: modules/xfire/src/tools/org/codehaus/enunciate/modules/xfire/EnunciatedXFireExporter.java
===================================================================
--- modules/xfire/src/tools/org/codehaus/enunciate/modules/xfire/EnunciatedXFireExporter.java	(revision 395)
+++ modules/xfire/src/tools/org/codehaus/enunciate/modules/xfire/EnunciatedXFireExporter.java	(working copy)
@@ -16,46 +16,29 @@
 
 package org.codehaus.enunciate.modules.xfire;
 
-import org.codehaus.xfire.annotations.AnnotationException;
-import org.codehaus.xfire.annotations.WebServiceAnnotation;
 import org.codehaus.xfire.handler.HandlerSupport;
 import org.codehaus.xfire.service.ServiceFactory;
 import org.codehaus.xfire.spring.remoting.XFireExporter;
-import org.codehaus.xfire.util.ClassLoaderUtils;
-import org.codehaus.enunciate.service.EnunciateServiceFactoryAware;
-import org.codehaus.enunciate.service.EnunciateServiceFactory;
-import org.codehaus.enunciate.service.DefaultEnunciateServiceFactory;
-import org.springframework.beans.BeansException;
-import org.springframework.beans.factory.BeanFactoryUtils;
-import org.springframework.context.ApplicationContext;
-import org.springframework.context.ApplicationContextException;
 import org.springframework.web.servlet.ModelAndView;
 import org.springframework.web.servlet.View;
 
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Map;
 
 /**
  * Exports a SOAP endpoint for XFire.
  * 
  * @author Ryan Heaton
  */
-public class EnunciatedXFireExporter extends XFireExporter implements EnunciateServiceFactoryAware {
+public class EnunciatedXFireExporter extends XFireExporter {
 
-  private EnunciateServiceFactory enunciateServiceFactory = new DefaultEnunciateServiceFactory();
-  private ApplicationContext ctx;
   private EnunciatedXFireServletController delegate;
   private View wsdlView = null;
 
   public void afterPropertiesSet() throws Exception {
-    Object serviceBean = loadServiceBean();
-    setServiceBean(serviceBean);
-    if (serviceBean instanceof HandlerSupport) {
+    if (getServiceBean() instanceof HandlerSupport) {
       //set the XFire in/out handlers that may possibly be configured.
-      HandlerSupport handlerSupport = (HandlerSupport) serviceBean;
+      HandlerSupport handlerSupport = (HandlerSupport) getServiceBean();
       setInHandlers(handlerSupport.getInHandlers());
       setOutHandlers(handlerSupport.getOutHandlers());
       setFaultHandlers(handlerSupport.getFaultHandlers());
@@ -66,66 +49,6 @@
     delegate = new EnunciatedXFireServletController(getXfire(), getXFireService().getName(), this.wsdlView);
   }
 
-  /**
-   * Attempts to load the service bean by first looking for beans that implement the {@link #getServiceClass() service class}.
-   * If there is only one, it will be used.  Otherwise, if there is more than one, it will attempt to find one that is named
-   * the same as the service name or fail.  If there are no service beans in the context that can be
-   * assigned to the service class, an attempt will be made to instantiate one.
-   * 
-   * @return The service bean.
-   * @throws InstantiationException If an attempt was made to instantiate the bean but it failed.
-   * @throws IllegalAccessException If an attempt was made to instantiate the bean but it couldn't get access.
-   */
-  protected Object loadServiceBean() throws InstantiationException, IllegalAccessException {
-    Object serviceBean;
-    Class serviceClass = getServiceClass();
-    Class serviceInterface = null;
-    EnunciatedJAXWSServiceFactory factory = (EnunciatedJAXWSServiceFactory) getServiceFactory();
-    WebServiceAnnotation annotation = factory.getAnnotations().getWebServiceAnnotation(serviceClass);
-    if (annotation == null) {
-      throw new AnnotationException("Can't find the @javax.jws.WebService annotation on " + serviceClass.getName());
-    }
-    String eiValue = annotation.getEndpointInterface();
-    if (eiValue != null && eiValue.length() > 0) {
-      try {
-        serviceInterface = ClassLoaderUtils.loadClass(eiValue, factory.getClass());
-      }
-      catch (ClassNotFoundException e) {
-        throw new AnnotationException("Couldn't find endpoint interface " + annotation.getEndpointInterface(), e);
-      }
-    }
-
-    Map serviceInterfaceBeans = serviceInterface == null ? Collections.EMPTY_MAP : BeanFactoryUtils.beansOfTypeIncludingAncestors(this.ctx, serviceInterface);
-    if (serviceInterfaceBeans.size() > 0) {
-      String serviceName = factory.createServiceName(serviceClass, annotation, annotation.getServiceName());
-      if (serviceInterfaceBeans.containsKey(serviceName)) {
-        //first attempt will be to load the bean identified by the service name:
-        serviceBean = serviceInterfaceBeans.get(serviceName);
-      }
-      else if (serviceInterfaceBeans.size() == 1) {
-        // not there; use the only one if it exists...
-        serviceBean = serviceInterfaceBeans.values().iterator().next();
-      }
-      else {
-        //panic: can't determine the service bean to use.
-        ArrayList beanNames = new ArrayList(serviceInterfaceBeans.keySet());
-        throw new ApplicationContextException("There are more than one beans of type " + serviceInterface.getName() +
-          " in the application context " + beanNames + ".  Cannot determine which one to use to handle the soap requests.  " +
-          "Either reduce the number of beans of this type to one, or specify which one to use by naming it the name of the service (\"" + serviceName + "\").");
-      }
-    }
-    else {
-      //try to instantiate the bean with the class...
-      serviceBean = serviceClass.newInstance();
-    }
-
-    if ((serviceInterface != null) && (serviceInterface.isInterface())) {
-      serviceBean = this.enunciateServiceFactory.getInstance(serviceBean, serviceInterface);
-    }
-
-    return serviceBean;
-  }
-
   //inherited.
   public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {
     return delegate.handleRequest(request, response);
@@ -141,12 +64,6 @@
   }
 
   @Override
-  public void setApplicationContext(ApplicationContext ctx) throws BeansException {
-    super.setApplicationContext(ctx);
-    this.ctx = ctx;
-  }
-
-  @Override
   public void setServiceFactory(ServiceFactory serviceFactory) {
     assertValid(serviceFactory);
     super.setServiceFactory(serviceFactory);
@@ -175,8 +92,4 @@
     }
   }
 
-  // Inherited.
-  public void setEnunciateServiceFactory(EnunciateServiceFactory enunciateServiceFactory) {
-    this.enunciateServiceFactory = enunciateServiceFactory;
-  }
 }
