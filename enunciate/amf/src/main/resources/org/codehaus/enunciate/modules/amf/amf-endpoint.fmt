[#ftl]
[#--template for the client-side endpoint interface.--]
[@file name=("AMF" + endpointInterface.simpleName + ".java")  package=(endpointInterface.package.qualifiedName + ".amf")]
// Generated by Enunciate
package ${endpointInterface.package.qualifiedName}.amf;

/**
 * ${endpointInterface.docComment?default("(no documentation provided)")?chop_linebreak?replace("\n", "\n * ")}
 */
public class AMF${endpointInterface.simpleName} extends org.codehaus.enunciate.modules.amf.AMFEndpointImpl {

  public AMF${endpointInterface.simpleName}() throws Exception {
    super(new ${endpointInterface.endpointImplementations[0].qualifiedName}());
  }

  [@forEachWebMethod endpointInterface=endpointInterface]
    [#if !webMethod.annotations["org.codehaus.enunciate.modules.amf.AMFTransient"]?exists]

  /**
   * ${webMethod.docComment?default("(no documentation provided)")?chop_linebreak?replace("\n", "\n   * ")}
   */
  public ${classnameFor(webMethod.webResult)} ${webMethod.simpleName}([#list webMethod.webParameters as param]${classnameFor(param)} ${param.simpleName}[#if param_has_next], [/#if][/#list]) [#if webMethod.webFaults?size > 0]throws [#list webMethod.webFaults as fault]${fault.qualifiedName}[#if fault_has_next], [/#if][/#list][/#if] {
    try {
      [#if !webMethod.returnType.void]
        [#if !webMethod.returnType.primitive]
        return (${classnameFor(webMethod.webResult)}) invokeOperation("${webMethod.operationName}"[#list webMethod.webParameters as param], [#if param.type.array](Object) [/#if]${param.simpleName}[/#list]);
        [#else]
        return [@unwrapIfPrimitive type=webMethod.returnType](([@primitiveWrapper type=webMethod.returnType/]) invokeOperation("${webMethod.operationName}"[#list webMethod.webParameters as param], [#if param.type.array](Object) [/#if]${param.simpleName}[/#list]))[/@unwrapIfPrimitive];
        [/#if]
      [#else]
        invokeOperation("${webMethod.operationName}"[#list webMethod.webParameters as param], [#if param.type.array](Object) [/#if]${param.simpleName}[/#list]);
      [/#if]
    }
      [#list webMethod.webFaults as fault]
    catch (${fault.qualifiedName} e) {
      throw e;
    }
      [/#list]
    catch (Exception e) {
      if (e instanceof RuntimeException) {
        throw (RuntimeException) e;
      }
      else {
        throw new RuntimeException(e);      
      }
    }
  }
    [/#if]
  [/@forEachWebMethod]

  // Inherited.
  protected Class getServiceInterface() {
    return ${endpointInterface.qualifiedName}.class;
  }

  @org.springframework.beans.factory.annotation.Autowired ( required = false )
  public void setServiceBean(@org.springframework.beans.factory.annotation.Qualifier( "service-oriented-endpoint" ) ${endpointInterface.qualifiedName} serviceBean) {
    this.serviceBean = serviceBean;
  }
}
[/@file]