[#ftl]
[#--template for the client-side complex type.--]
[@file name=(type.simpleName + ".as")  package=packageFor(type)]
[#assign baseobject=type.baseObject/]
// Generated by Enunciate
package ${packageFor(type)} {

  import flash.utils.IExternalizable;
  import flash.utils.IDataOutput;
  import flash.utils.IDataInput;
  import flash.net.registerClassAlias;
  [@forEachAMFImport declaration=type]
  import ${amfImport};
  [/@forEachAMFImport]

  [#list type.attributes as attribute]
    [#if attribute.accessorType.map?default(false)]
      [#if attribute.accessorType.keyType.declared && as3Aliases[attribute.accessorType.keyType.declaration.qualifiedName]?exists]
  //register the type for the key type of the key-value pairs for the "${attribute.simpleName}" property.
  registerClassAlias("${attribute.accessorType.keyType.declaration.qualifiedName}", ${as3Aliases[attribute.accessorType.keyType.declaration.qualifiedName]});
      [/#if]
      [#if attribute.accessorType.valueType.declared && as3Aliases[attribute.accessorType.valueType.declaration.qualifiedName]?exists]
  //register the type for the value type of the key-value pairs for the "${attribute.simpleName}" property.
  registerClassAlias("${attribute.accessorType.valueType.declaration.qualifiedName}", ${as3Aliases[attribute.accessorType.valueType.declaration.qualifiedName]});
      [/#if]
    [#elseif attribute.accessorType.collection || attribute.accessorType.array]
      [#if as3Aliases[componentTypeFor(attribute.accessorType)]?exists]
  //register the item type of the collection for the "${attribute.simpleName}" property.
  registerClassAlias("${componentTypeFor(attribute.accessorType)}", ${as3Aliases[componentTypeFor(attribute.accessorType)]});
      [/#if]
    [/#if]
  [/#list]
  [#if type.value?exists]
    [#if type.value.accessorType.map?default(false)]
      [#if type.value.accessorType.keyType.declared && as3Aliases[type.value.accessorType.keyType.declaration.qualifiedName]?exists]
  //register the type for the key type of the key-value pairs for the "${type.value.simpleName}" property.
  registerClassAlias("${type.value.accessorType.keyType.declaration.qualifiedName}", ${as3Aliases[type.value.accessorType.keyType.declaration.qualifiedName]});
      [/#if]
      [#if type.value.accessorType.valueType.declared && as3Aliases[type.value.accessorType.valueType.declaration.qualifiedName]?exists]
  //register the type for the value type of the key-value pairs for the "${type.value.simpleName}" property.
  registerClassAlias("${type.value.accessorType.valueType.declaration.qualifiedName}", ${as3Aliases[type.value.accessorType.valueType.declaration.qualifiedName]});
      [/#if]
    [#elseif type.value.accessorType.collection || type.value.accessorType.array]
      [#if as3Aliases[componentTypeFor(type.value.accessorType)]?exists]
  //register the item type of the collection for the "${type.value.simpleName}" property.
  registerClassAlias("${componentTypeFor(type.value.accessorType)}", ${as3Aliases[componentTypeFor(type.value.accessorType)]});
      [/#if]
    [/#if]
  [#else]
    [#list type.elements as element]
      [#if element.accessorType.map?default(false)]
        [#if element.accessorType.keyType.declared && as3Aliases[element.accessorType.keyType.declaration.qualifiedName]?exists]
  //register the type for the key type of the key-value pairs for the "${element.simpleName}" property.
  registerClassAlias("${element.accessorType.keyType.declaration.qualifiedName}", ${as3Aliases[element.accessorType.keyType.declaration.qualifiedName]});
        [/#if]
        [#if element.accessorType.valueType.declared && as3Aliases[element.accessorType.valueType.declaration.qualifiedName]?exists]
  //register the type for the value type of the key-value pairs for the "${element.simpleName}" property.
  registerClassAlias("${element.accessorType.valueType.declaration.qualifiedName}", ${as3Aliases[element.accessorType.valueType.declaration.qualifiedName]});
        [/#if]
    [#elseif element.accessorType.collection || element.accessorType.array]
        [#if as3Aliases[componentTypeFor(element.accessorType)]?exists]
  //register the item type of the collection for the "${element.simpleName}" property.
  registerClassAlias("${componentTypeFor(element.accessorType)}", ${as3Aliases[componentTypeFor(element.accessorType)]});
        [/#if]
      [/#if]
    [/#list]
  [/#if]

  /**
   * ${type.docComment?default("(no documentation provided)")?chop_linebreak?replace("\n", "\n   * ")}
   */
  [Bindable]
  [RemoteClass(alias="${type.package.qualifiedName}.amf.${type.simpleName}")]
  public [#if type.final]final [/#if]class ${type.simpleName} [#if !baseobject]extends ${classnameFor(type.superclass)} [/#if]implements IExternalizable {

  [#list type.attributes as attribute]
    private var _${attribute.simpleName}:${classnameFor(attribute)};
  [/#list]
  [#if type.value?exists]
    private var _${value.simpleName}:${classnameFor(value)};
  [#else]
    [#list type.elements as element]
    private var _${element.simpleName}:${classnameFor(element)};
    [/#list]
  [/#if]

    public function ${type.simpleName}() {
    }
  [#list type.attributes as attribute]
[@propertyAccessors property=attribute/]
  [/#list]
  [#if type.value?exists]
[@propertyAccessors property=type.value/]
  [#else]
    [#list type.elements as element]
[@propertyAccessors property=element/]
    [/#list]
  [/#if]

    public [#if !baseobject]override [/#if]function writeExternal(output:IDataOutput):void {
      [#if !baseobject]super.writeExternal(output);[/#if]
  [#list type.attributes as attribute]
[@accessorOutput accessor=attribute/]
  [/#list]
  [#if type.value?exists]
[@accessorOutput accessor=type.value/]
  [#else]
    [#list type.elements as element]
[@accessorOutput accessor=element/]
    [/#list]
  [/#if]
    }

    public [#if !baseobject]override [/#if]function readExternal(input:IDataInput):void {
      [#if !baseobject]super.readExternal(input);[/#if]
  [#list type.attributes as attribute]
[@accessorInput accessor=attribute/]
  [/#list]
  [#if type.value?exists]
[@accessorInput accessor=type.value/]
  [#else]
    [#list type.elements as element]
[@accessorInput accessor=element/]
    [/#list]
  [/#if]
    }
  }
}
[/@file]
[#macro propertyAccessors property]
  [#if !property.annotations["org.codehaus.enunciate.modules.amf.AMFTransient"]?exists]

    /**
     * ${property.javaDoc.return?default(property.docValue?default("(no documentation provided)"))?chop_linebreak?replace("\n", "\n     * ")}
     */
    public function get ${property.simpleName}():${classnameFor(property)} {
      return _${property.simpleName};
    }

    /**
     * ${property.javaDoc.return?default(property.docValue?default("(no documentation provided)"))?chop_linebreak?replace("\n", "\n     * ")}
     */
    public function set ${property.simpleName}(${property.simpleName}:${classnameFor(property)}):void {
      _${property.simpleName} = ${property.simpleName};
    }
  [/#if]
[/#macro]
[#macro accessorInput accessor]
  [#if !accessor.annotations["org.codehaus.enunciate.modules.amf.AMFTransient"]?exists]
    [#if accessor.accessorType.primitive && !("char" = accessor.accessorType.kind?string?lower_case)]
      [#if ("long" = accessor.accessorType.kind?string?lower_case)]
    _${accessor.simpleName} = input.readDouble();
      [#else]
    _${accessor.simpleName} = input.read${accessor.accessorType.kind?string?lower_case?cap_first}();
      [/#if]
    [#else]
    _${accessor.simpleName} = input.readObject() as ${classnameFor(accessor)};
    [/#if]
  [/#if]
[/#macro]
[#macro accessorOutput accessor]
  [#if !accessor.annotations["org.codehaus.enunciate.modules.amf.AMFTransient"]?exists]
    [#if accessor.accessorType.primitive && !("char" = accessor.accessorType.kind?string?lower_case)]
      [#if ("long" = accessor.accessorType.kind?string?lower_case)]
      output.writeDouble(_${accessor.simpleName});
      [#else]
      output.write${accessor.accessorType.kind?string?lower_case?cap_first}(_${accessor.simpleName});
      [/#if]
    [#else]
      output.writeObject(_${accessor.simpleName});
    [/#if]
  [/#if]
[/#macro]
