<?xml version="1.0" encoding="UTF-8"?>

<project default="full-jar" name="all" basedir=".">

  <property name="version" value="1.0-RC1"/>
  <property name="dist.name" value="enunciate-${version}"/>
  <property name="full.jar.name" value="${dist.name}-full.jar"/>

  <!--global references to other modules-->
  <dirname file="${ant.file.all}" property="enunciate.basedir"/>
  <property name="lib.dir" value="${enunciate.basedir}/lib"/>
  <property name="docs.dir" value="${enunciate.basedir}/docs"/>
  <property name="javadoc.dir" value="${docs.dir}/api"/>
  <property name="module.docs.dir" value="${docs.dir}/modules"/>
  <property name="getting.started.example.dir" value="${docs.dir}/wannabecool"/>

  <property name="core.basedir" value="${enunciate.basedir}/core"/>
  <property name="modules.xml.basedir" value="${enunciate.basedir}/modules/xml"/>
  <property name="modules.jaxws.basedir" value="${enunciate.basedir}/modules/jaxws"/>
  <property name="modules.rest.basedir" value="${enunciate.basedir}/modules/rest"/>
  <property name="modules.xfire-client.basedir" value="${enunciate.basedir}/modules/xfire-client"/>
  <property name="modules.docs.basedir" value="${enunciate.basedir}/modules/docs"/>
  <property name="modules.xfire.basedir" value="${enunciate.basedir}/modules/xfire"/>
  <property name="modules.xfire-integration.basedir" value="${enunciate.basedir}/modules/xfire-integration"/>

  <target name="build">
    <ant dir="${core.basedir}"/>
    <ant dir="${modules.xml.basedir}"/>
    <ant dir="${modules.jaxws.basedir}"/>
    <ant dir="${modules.rest.basedir}"/>
    <ant dir="${modules.xfire-client.basedir}"/>
    <ant dir="${modules.docs.basedir}"/>
    <ant dir="${modules.xfire.basedir}"/>
    <ant dir="${modules.xfire-integration.basedir}"/>
  </target>

  <target name="clean">
    <delete dir="target"/>
    
    <ant dir="${core.basedir}" target="clean"/>
    <ant dir="${modules.xml.basedir}" target="clean"/>
    <ant dir="${modules.jaxws.basedir}" target="clean"/>
    <ant dir="${modules.rest.basedir}" target="clean"/>
    <ant dir="${modules.xfire-client.basedir}" target="clean"/>
    <ant dir="${modules.docs.basedir}" target="clean"/>
    <ant dir="${modules.xfire.basedir}" target="clean"/>
    <ant dir="${modules.xfire-integration.basedir}" target="clean"/>
  </target>

  <target name="doc" description="generate documentation and javadoc (global)" depends="javadoc, getting-started-examples, module-docs-copy"/>

  <target name="javadoc" description="generate the javadoc.">
    <mkdir dir="${javadoc.dir}"/>
    <property name="title" value="enunciate-docs"/>

    <javadoc doctitle="enunciate" windowtitle="enunciate" destdir="${javadoc.dir}" author="true" version="true" packagenames="*">
      <fileset dir="${enunciate.basedir}">
        <include name="core/src/java/**/*.java"/>
        <include name="core/src/tools/**/*.java"/>
        <include name="modules/*/src/java/**/*.java"/>
        <include name="modules/*/src/tools/**/*.java"/>
      </fileset>

      <classpath>
        <fileset dir="${enunciate.basedir}/lib">
          <include name="**/*.jar"/>
        </fileset>
        <pathelement location="${java.home}/../lib/tools.jar"/>
        <path path="${java.class.path}"/>
      </classpath>

      <link href="http://java.sun.com/j2se/1.5.0/docs/api" offline="true" packagelistloc="${enunciate.basedir}/src/javadoc/sdk"/>
      <link href="http://apt-jelly.sourceforge.net/api" offline="true" packagelistloc="${enunciate.basedir}/src/javadoc/apt-jelly"/>
      <link href="http://jakarta.apache.org/commons/digester/commons-digester-1.7/docs/api" offline="true" packagelistloc="${enunciate.basedir}/src/javadoc/commons-digester"/>
      <link href="http://static.springframework.org/spring/docs/1.2.x/api" offline="true" packagelistloc="${enunciate.basedir}/src/javadoc/spring"/>
      <link href="http://envoisolutions.com/xfire/api" offline="true" packagelistloc="${enunciate.basedir}/src/javadoc/xfire"/>
    </javadoc>

  </target>

  <target name="module-docs-copy" depends="full-jar, module-docs-copy-only" description="copies over the module documentation to the right place."/>

  <target name="module-docs-copy-only" description="copies over the module documentation to the right place, assuming its already there.">
    <mkdir dir="${module.docs.dir}"/>
    <copy file="${modules.xml.basedir}/target/module.html" tofile="${module.docs.dir}/module_xml.html" failonerror="false"/>
    <copy file="${modules.jaxws.basedir}/target/module.html" tofile="${module.docs.dir}/module_jaxws.html" failonerror="false"/>
    <copy file="${modules.rest.basedir}/target/module.html" tofile="${module.docs.dir}/module_rest.html" failonerror="false"/>
    <copy file="${modules.xfire-client.basedir}/target/module.html" tofile="${module.docs.dir}/module_xfire_client.html" failonerror="false"/>
    <copy file="${modules.docs.basedir}/target/module.html" tofile="${module.docs.dir}/module_docs.html" failonerror="false"/>
    <copy file="${modules.xfire.basedir}/target/module.html" tofile="${module.docs.dir}/module_xfire.html" failonerror="false"/>
  </target>

  <target name="getting-started-examples" depends="full-jar, getting-started-examples-only" description="Generated the getting started examples."/>
  
  <target name="getting-started-examples-only" description="generates the getting started samples assuming the jar is in the right place.">

    <path id="enunciate.classpath">
      <fileset dir="lib">
        <include name="**/*.jar"/>
      </fileset>
      <pathelement location="target/${full.jar.name}"/>
    </path>

    <taskdef name="enunciate" classname="net.sf.enunciate.main.EnunciateTask">
      <classpath refid="enunciate.classpath"/>
    </taskdef>

    <mkdir dir="${getting.started.example.dir}/step4"/>
    <echo message="Generating the step4 examples...."/>
    <copy file="src/samples/wannabecool/step4/LICENSE.txt" todir="${user.dir}" overwrite="true"/>
    <enunciate target="build" basedir="src/samples/wannabecool/step4" configFile="src/samples/wannabecool/step4/enunciate.xml">
      <include name="**/*.java"/>
      <classpath refid="enunciate.classpath"/>
      <export artifactId="docs" destination="${getting.started.example.dir}/step4"/>
    </enunciate>
    <delete file="${user.dir}/LICENSE.txt" failonerror="false"/>

    <mkdir dir="${getting.started.example.dir}/step1"/>
    <echo message="Generating the step1 examples...."/>
    <enunciate target="build" basedir="src/samples/wannabecool/step1">
      <include name="**/*.java"/>
      <classpath refid="enunciate.classpath"/>
      <export artifactId="docs" destination="${getting.started.example.dir}/step1"/>
    </enunciate>
  </target>

  <target name="full-jar" depends="build, full-jar-only" description="Creates the full (aggregated) jar."/>

  <target name="full-jar-only" description="Creates the full jar assuming everything in its place.">
    <mkdir dir="target"/>
    
    <concat destfile="target/module.list" fixlastline="yes">
      <fileset dir="${enunciate.basedir}" includes="**/net.sf.enunciate.modules.DeploymentModule"/>
    </concat>

    <echo file="target/preserve-in-war" message="This file is used simply to mark the enunciate-full jar as a jar to be preserved when building the war."/>

    <jar destfile="target/${full.jar.name}" duplicate="preserve">
      <!--first include the concatenated deployment module list.-->
      <zipfileset dir="target" includes="module.list" fullpath="META-INF/services/net.sf.enunciate.modules.DeploymentModule"/>
      <!--make sure the jar is marked to preserve in a war file.-->
      <zipfileset dir="target" includes="preserve-in-war" fullpath="META-INF/enunciate/preserve-in-war"/>

      <zipgroupfileset dir="${enunciate.basedir}">
        <include name="core/target/*.jar"/>
        <include name="modules/*/target/*.jar"/>
      </zipgroupfileset>

    </jar>

  </target>

  <target name="dist" depends="clean, full-jar, doc, scripts, dist-only" description="Creates the distribution bundles."/>

  <target name="scripts" description="Generates the executable scripts.">

    <path id="script.classpath">
      <fileset dir="${lib.dir}">
        <include name="**/*.jar"/>
      </fileset>
    </path>

    <pathconvert property="unix.script.classpath" targetos="unix" refid="script.classpath">
      <mapper type="regexp" from="/(lib/.*.jar)$$" to="$ENUNCIATE_HOME/\1"/>
    </pathconvert>
    <pathconvert property="windows.script.classpath" targetos="windows" refid="script.classpath">
      <mapper type="regexp" from="/(lib/.*.jar)$$" to="%ENUNCIATE_HOME%\\\1"/>
    </pathconvert>

    <copy file="src/bin/enunciate.sh" tofile="bin/enunciate" overwrite="true">
      <filterset begintoken="{" endtoken="}">
        <filter token="UNIX_CLASSPATH" value="${unix.script.classpath}"/>
        <filter token="FULL_JAR_NAME" value="${full.jar.name}"/>
      </filterset>
    </copy>
    <chmod perm="766" file="bin/enunciate"/>
    
    <copy file="src/bin/enunciate.bat" tofile="bin/enunciate.bat" overwrite="true">
      <filterset begintoken="{" endtoken="}">
        <filter token="WINDOWS_CLASSPATH" value="${windows.script.classpath}"/>
        <filter token="FULL_JAR_NAME" value="${full.jar.name}"/>
      </filterset>
    </copy>

  </target>
  
  <target name="dist-only" description="Creates the distribution bundles assuming everything is in its place.">
    <mkdir dir="target/module-libs"/>

    <!--copy all the libraries created by the modules to the module-libs directory.-->
    <copy todir="target/module-libs">
      <fileset dir="${enunciate.basedir}">
        <include name="core/target/*.jar"/>
        <include name="modules/*/target/*.jar"/>
      </fileset>

      <mapper type="flatten"/>
    </copy>

    <!--create the zip dist.-->
    <zip destfile="target/${dist.name}.zip">
      <zipfileset dir="${docs.dir}" prefix="enunciate/docs">
        <exclude name="*.txt"/>
      </zipfileset>
      <zipfileset dir="${enunciate.basedir}" prefix="enunciate/docs">
        <include name="*.txt"/>
      </zipfileset>
      <zipfileset dir="${lib.dir}" prefix="enunciate/lib">
        <exclude name="test/**"/>
      </zipfileset>
      <zipfileset dir="bin" prefix="enunciate/bin">
        <exclude name="README.txt"/>
      </zipfileset>
      <zipfileset dir="target/module-libs" prefix="enunciate/modules" includes="*.jar"/>
      <zipfileset dir="." includes="license.txt notice.txt" prefix="enunciate"/>
      <zipfileset dir="target" prefix="enunciate" includes="*.jar"/>
    </zip>

    <!--create the tar.gz dist.-->
    <tar destfile="target/${dist.name}.tar.gz" compression="gzip">
      <tarfileset dir="${docs.dir}" prefix="enunciate/docs">
        <exclude name="*.txt"/>
      </tarfileset>
      <tarfileset dir="${enunciate.basedir}" prefix="enunciate/docs">
        <include name="*.txt"/>
      </tarfileset>
      <tarfileset dir="${lib.dir}" prefix="enunciate/lib">
        <exclude name="test/**"/>
      </tarfileset>
      <tarfileset dir="bin" prefix="enunciate/bin" mode="766">
        <exclude name="README.txt"/>
      </tarfileset>
      <tarfileset dir="target/module-libs" prefix="enunciate/modules" includes="*.jar"/>
      <tarfileset dir="." includes="license.txt notice.txt" prefix="enunciate"/>
      <tarfileset dir="target" prefix="enunciate" includes="*.jar"/>
    </tar>
  </target>

</project>
