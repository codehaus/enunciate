<?xml version="1.0" encoding="UTF-8"?>

<project default="jar" name="enunciate" basedir=".">
  <property name="lib.dir" value="lib"/>
  <property name="build.dir" value="target/classes"/>
  <property name="gen.dir" value="target/gen"/>
  <property name="wars.dir" value="target/wars"/>
  <property name="conf.dir" value="src/conf"/>
  <property name="test.build.dir" value="target/test-classes"/>
  <property name="test.report.dir" value="target/test-reports"/>
  <property name="docs.dir" value="docs"/>
  <property name="javadoc.dir" value="${docs.dir}/api"/>
  <property name="final.name" value="enunciate-1.0-alpha1"/>

  <path id="build.classpath">
    <fileset dir="${lib.dir}">
      <include name="**/*.jar"/>
    </fileset>
    <pathelement location="${java.home}/../lib/tools.jar"/>
  </path>

  <path id="run.classpath">
    <path refid="build.classpath"/>
    <pathelement path="${build.dir}"/>
    <pathelement path="${conf.dir}"/>
  </path>

  <path id="enunciate.classpath">
    <fileset dir="${lib.dir}">
      <include name="**/*.jar"/>
      <exclude name="**/servlet-api*.jar"/>
      <exclude name="**/testng*.jar"/>
    </fileset>
    <pathelement location="${java.home}/../lib/tools.jar"/>
    <pathelement location="target/${final.name}.jar"/>
  </path>

  <target name="init" description="initializes some properties">
    <mkdir dir="${lib.dir}"/>

    <property file="${user.home}/.enunciate/build.properties"/>
  </target>

  <target name="compile" description="compile the code" depends="get-deps">
    <mkdir dir="${build.dir}"/>

    <javac destdir="${build.dir}" deprecation="true" debug="true" optimize="false" excludes="**/package.html">
      <src>
        <pathelement location="src/java"/>
      </src>
      <classpath refid="build.classpath"/>
    </javac>

    <copy todir="${build.dir}">
      <fileset dir="src/java">
        <include name="**/*.xsd"/>
        <include name="**/*.xml"/>
        <include name="**/*.jelly"/>
        <include name="**/*.fmt"/>
      </fileset>
    </copy>
  </target>

  <target name="jar" description="create the jar" depends="compile,test">
    <jar jarfile="target/${final.name}.jar" excludes="**/package.html" basedir="${build.dir}"/>
  </target>

  <target name="jar-only" description="create the jar" depends="compile">
    <jar jarfile="target/${final.name}.jar" excludes="**/package.html" basedir="${build.dir}"/>
  </target>

  <target name="clean" description="clean up the generated directories">
    <delete dir="target"/>
  </target>

  <target name="clean-lib" description="clean up the downloaded libraries">
    <delete dir="${lib.dir}"/>
  </target>

  <target name="test" description="run the test cases" if="test.failure" depends="internal-test">
    <fail message="There were test failures."/>
  </target>

  <target name="internal-test" depends="compile-tests">
    <!--
        <mkdir dir="${test.report.dir}"/>
        <junit dir="./" failureproperty="test.failure" printSummary="yes" fork="false" haltonerror="true">
          <sysproperty key="basedir" value="."/>
          <formatter type="xml"/>
          <formatter usefile="false" type="plain"/>
          <classpath>
            <fileset dir="${lib.dir}">
              <include name="*.jar"/>
            </fileset>
            <pathelement path="${test.build.dir}"/>
            <pathelement path="${build.dir}"/>
          </classpath>

          <batchtest todir="${test.report.dir}">
            <fileset dir="src/test">
              <include name="**/Test*"/>
            </fileset>
          </batchtest>
        </junit>
    -->
  </target>

  <target name="compile-tests" depends="compile">
    <mkdir dir="${test.build.dir}"/>
    <javac destdir="${test.build.dir}" deprecation="true" debug="true" optimize="false" excludes="**/package.html">
      <src>
        <pathelement location="src/test"/>
      </src>
      <classpath refid="run.classpath"/>
    </javac>

    <copy todir="${test.build.dir}">
      <fileset dir="src/test">
        <include name="**/*.xml"/>
        <include name="**/*.fmt"/>
      </fileset>
    </copy>
  </target>

  <target name="javadoc" description="generate javadoc" depends="jar">
    <mkdir dir="${javadoc.dir}"/>
    <property name="title" value="enunciate-docs"/>

    <javadoc use="true" private="true" destdir="${javadoc.dir}" author="true" version="true" sourcepath="src/java" packagenames="*">
      <classpath refid="run.classpath"/>
    </javadoc>
  </target>

  <target name="get-deps" unless="noget" depends="init">
    <!--<get dest="${lib.dir}/commons-logging-1.0.2.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/commons-logging/jars/commons-logging-1.0.2.jar"/>-->
  </target>

  <target name="generate-example-api" description="generate the artifacts for an example api.">
    <antcall target="enunciate-example-api">
      <param name="enunciate.target" value="generate"/>
    </antcall>
  </target>

  <target name="compile-example-api" description="generate and compile the artifacts for an example api.">
    <antcall target="enunciate-example-api">
      <param name="enunciate.target" value="compile"/>
    </antcall>
  </target>

  <target name="build-example-api" description="generate and compile the artifacts for an example api.">
    <antcall target="enunciate-example-api">
      <param name="enunciate.target" value="build"/>
    </antcall>
  </target>

  <target name="package-example-api" description="generate, compile, and package the artifacts for an example api.">
    <antcall target="enunciate-example-api">
      <param name="enunciate.target" value="package"/>
    </antcall>
  </target>

  <target name="enunciate-example-api" depends="jar" description="enunciate an example api.">
    <fail unless="enunciate.target">
      You must specify an enunciate target.
    </fail>

    <!--the name of the example to deploy.-->
    <property name="example" value="basic"/>
    <property name="example.dir" value="src/samples/${example}"/>
    <property name="example.gen.dir" value="${gen.dir}/examples/${example}"/>
    <property name="example.build.dir" value="target/examples/${example}/classes"/>
    <property name="war.file" value="target/examples/${example}.war"/>

    <taskdef name="enunciate" classname="net.sf.enunciate.main.EnunciateTask">
      <classpath>
        <path refid="enunciate.classpath"/>
      </classpath>
    </taskdef>

    <mkdir dir="${example.gen.dir}"/>
    <mkdir dir="${example.build.dir}"/>
    <mkdir dir="${wars.dir}/${example}"/>

    <enunciate verbose="true" target="${enunciate.target}"
               basedir="${example.dir}"
               configFile="${example.dir}/enunciate.xml"
               preprocessdir="${example.gen.dir}"
               destdir="${example.build.dir}"
               warbuilddir="${wars.dir}/${example}"
               warFile="${war.file}">
      <include name="**/*.java"/>
      <classpath>
        <path refid="enunciate.classpath"/>
      </classpath>
    </enunciate>
  </target>

  <target name="deploy-example-api" depends="init"
          description="deploys the enunciated app to the user-defined deploy directory, cleaning what's already there.">
    <fail unless="deploy.dir">
      A deploy directory must be specified with the "deploy.dir" property.
      Do you have it specified in ${user.home}/.enunciate/build.properties file?
    </fail>

    <!--the name of the example to deploy.-->
    <property name="example" value="basic"/>

    <delete file="${deploy.dir}/${example}.war" failonerror="false"/>
    <delete dir="${deploy.dir}/${example}" failonerror="false"/>

    <antcall target="enunciate-example-api">
      <param name="enunciate.target" value="package"/>
      <param name="example" value="${example}"/>
      <param name="war.file" value="${deploy.dir}/${example}.war"/>
    </antcall>
  </target>

</project>
