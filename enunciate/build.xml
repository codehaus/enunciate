<?xml version="1.0" encoding="UTF-8"?>

<project default="jar" name="base" basedir=".">

  <!--definition of "base" properties - globally referenced. -->
  <dirname file="${ant.file.base}" property="enunciate.basedir"/>
  <property name="lib.dir" value="${enunciate.basedir}/lib"/>
  <property name="docs.dir" value="${enunciate.basedir}/docs"/>
  <property name="javadoc.dir" value="${docs.dir}/api"/>
  <property name="enunciate.version" value="1.0-alpha1"/>

  <!--global references to other modules-->
  <property name="core.basedir" value="${enunciate.basedir}/core"/>
  <property name="modules.xml.basedir" value="${enunciate.basedir}/modules/xml"/>
  <property name="modules.xfire-client.basedir" value="${enunciate.basedir}/modules/xfire-client"/>
  <property name="modules.xfire.basedir" value="${enunciate.basedir}/modules/xfire"/>

  <!--patterns for specifying jars to include on the classpath.-->
  <property name="jar.pattern" value="*-${enunciate.version}.jar"/>
  <property name="tools.jar.pattern" value="*-tools-${enunciate.version}.jar"/>

  <path id="core.libs">
    <fileset dir="${lib.dir}/core">
      <include name="*.jar"/>
    </fileset>
    <pathelement location="${java.home}/../lib/tools.jar"/>
  </path>

  <path id="xfire.libs">
    <fileset dir="${lib.dir}/xfire">
      <include name="*.jar"/>
    </fileset>
  </path>

  <!--definition of "relative" properties-->
  <property name="build.dir" value="target/classes/main"/>
  <property name="tools.build.dir" value="target/classes/tools"/>
  <property name="gen.dir" value="target/gen"/>
  <property name="conf.dir" value="src/conf"/>
  <property name="test.build.dir" value="target/test-classes"/>
  <property name="tools.test.build.dir" value="target/test-classes"/>
  <property name="test.report.dir" value="target/test-reports"/>

  <target name="init" description="initializes and verifies some properties">
    <mkdir dir="${lib.dir}"/>

    <property file="${user.home}/.enunciate/build.properties"/>
    <property name="module.name" value="${ant.project.name}"/>

    <available property="main.src.exists" file="src/java"/>
    <fail message="The main source code must exist in the ${basedir}/src/java directory." unless="main.src.exists"/>

    <available property="main.test.src.exists" file="src/test"/>
    <fail message="The main test code must exist in the ${basedir}/src/test directory." unless="main.test.src.exists"/>

    <fail message="path item 'build.classpath' must be defined.">
      <condition>
        <not>
          <isreference refid="build.classpath"/>
        </not>
      </condition>
    </fail>

    <path id="test.classpath">
      <path refid="build.classpath"/>
      <pathelement location="${conf.dir}"/>
      <fileset dir="${lib.dir}/test">
        <include name="*.jar"/>
      </fileset>
    </path>

    <available property="tools.exists" file="src/tools"/>
    <available property="tools.tests.exists" file="src/tools-tests"/>
  </target>

  <target name="compile" description="compile the code, tools and main." depends="init, compile-tools, compile-main"/>

  <target name="compile-tools" description="compile the tools code" depends="init" if="tools.exists">
    <!--default compiler for the tools is 1.5-->
    <property name="tools.compiler" value="1.5"/>

    <mkdir dir="${tools.build.dir}"/>

    <javac destdir="${tools.build.dir}" debug="true" source="${tools.compiler}">
      <src>
        <pathelement location="src/tools"/>
      </src>
      <classpath refid="build.classpath"/>
    </javac>

    <copy todir="${build.dir}">
      <fileset dir="src/java">
        <include name="**/*.xsd"/>
        <include name="**/*.xml"/>
        <include name="**/*.jelly"/>
        <include name="**/*.fmt"/>
      </fileset>
    </copy>

  </target>

  <target name="compile-main" description="compile the main code" depends="compile-tools">
    <mkdir dir="${build.dir}"/>
    <javac destdir="${build.dir}" debug="true">
      <src>
        <pathelement location="src/java"/>
      </src>
      <classpath>
        <path refid="build.classpath"/>
        <pathelement location="${tools.build.dir}"/>
      </classpath>
    </javac>

    <copy todir="${build.dir}">
      <fileset dir="src/java">
        <include name="**/*.xsd"/>
        <include name="**/*.xml"/>
        <include name="**/*.jelly"/>
        <include name="**/*.fmt"/>
      </fileset>
    </copy>

  </target>

  <target name="jar" description="create the jar after running the tests." depends="compile, test, jar-main, jar-tools"/>

  <target name="jar-main" description="create the main jar." depends="compile-main">
    <jar jarfile="target/enunciate-${module.name}-${enunciate.version}.jar" basedir="${build.dir}"/>
  </target>

  <target name="jar-tools" description="create the tools jar." depends="compile-tools" if="tools.exists">
    <jar jarfile="target/enunciate-${module.name}-tools-${enunciate.version}.jar" basedir="${tools.build.dir}"/>
  </target>

  <target name="test" description="run the test cases" if="test.failure" depends="compile, test-main, test-tools">
    <fail message="There were test failures."/>
  </target>

  <target name="compile-tests" depends="compile-main-tests, compile-tools-tests"/>

  <target name="test-main" depends="compile-main-tests">
    <!--
        <mkdir dir="${test.report.dir}"/>
        <junit dir="./" failureproperty="test.failure" printSummary="yes" fork="false" haltonerror="true">
          <sysproperty key="basedir" value="."/>
          <formatter type="xml"/>
          <formatter usefile="false" type="plain"/>
          <classpath>
            <fileset dir="${lib.dir}">
              <include name="*.jar"/>
            </fileset>
            <pathelement path="${test.build.dir}"/>
            <pathelement path="${build.dir}"/>
          </classpath>

          <batchtest todir="${test.report.dir}">
            <fileset dir="src/test">
              <include name="**/Test*"/>
            </fileset>
          </batchtest>
        </junit>
    -->
  </target>

  <target name="test-tools" depends="compile-tools-tests" if="tools.tests.exists">
    <!--
        <mkdir dir="${test.report.dir}"/>
        <junit dir="./" failureproperty="test.failure" printSummary="yes" fork="false" haltonerror="true">
          <sysproperty key="basedir" value="."/>
          <formatter type="xml"/>
          <formatter usefile="false" type="plain"/>
          <classpath>
            <fileset dir="${lib.dir}">
              <include name="*.jar"/>
            </fileset>
            <pathelement path="${test.build.dir}"/>
            <pathelement path="${build.dir}"/>
          </classpath>

          <batchtest todir="${test.report.dir}">
            <fileset dir="src/test">
              <include name="**/Test*"/>
            </fileset>
          </batchtest>
        </junit>
    -->
  </target>

  <target name="compile-main-tests" depends="compile-main">
    <mkdir dir="${test.build.dir}"/>
    <javac destdir="${test.build.dir}" debug="true">
      <src>
        <pathelement location="src/test"/>
      </src>
      <classpath refid="test.classpath"/>
      <classpath location="${build.dir}"/>
    </javac>

    <copy todir="${test.build.dir}">
      <fileset dir="src/test">
        <include name="**/*.xml"/>
        <include name="**/*.fmt"/>
      </fileset>
    </copy>
  </target>

  <target name="compile-tools-tests" depends="compile-tools" if="tools.tests.exists">
    <mkdir dir="${tools.test.build.dir}"/>
    <javac destdir="${tools.test.build.dir}" debug="true">
      <src>
        <pathelement location="src/tools-test"/>
      </src>
      <classpath refid="test.classpath"/>
      <classpath location="${tools.build.dir}"/>
    </javac>

    <copy todir="${test.build.dir}">
      <fileset dir="src/test">
        <include name="**/*.xml"/>
        <include name="**/*.fmt"/>
      </fileset>
    </copy>
  </target>

  <target name="clean" description="clean up">
    <delete dir="target"/>
  </target>

  <target name="javadoc" description="generate javadoc (global)" depends="jar">
    <mkdir dir="${javadoc.dir}"/>
    <property name="title" value="enunciate-docs"/>

    <javadoc use="true" private="true" destdir="${javadoc.dir}" author="true" version="true" packagenames="*">
      <fileset dir=".">
        <include name="*/src/java/**"/>
        <include name="*/src/tools/**"/>
      </fileset>
      <classpath refid="run.classpath"/>
    </javadoc>
  </target>

  <target name="generate-example-api" description="generate the artifacts for an example api.">
    <antcall target="enunciate-example-api">
      <param name="enunciate.target" value="generate"/>
    </antcall>
  </target>

  <target name="compile-example-api" description="generate and compile the artifacts for an example api.">
    <antcall target="enunciate-example-api">
      <param name="enunciate.target" value="compile"/>
    </antcall>
  </target>

  <target name="build-example-api" description="generate and compile the artifacts for an example api.">
    <antcall target="enunciate-example-api">
      <param name="enunciate.target" value="build"/>
    </antcall>
  </target>

  <target name="package-example-api" description="generate, compile, and package the artifacts for an example api.">
    <antcall target="enunciate-example-api">
      <param name="enunciate.target" value="package"/>
    </antcall>
  </target>

  <target name="enunciate-example-api" depends="jar" description="enunciate an example api.">
    <fail unless="enunciate.target">
      You must specify an enunciate target.
    </fail>

    <!--the name of the example to deploy.-->
    <property name="example" value="basic"/>
    <property name="example.dir" value="${enunciate.basedir}/src/samples/${example}"/>
    <property name="example.gen.dir" value="target/examples/${example}/gen"/>
    <property name="example.compile.dir" value="target/examples/${example}/classes"/>
    <property name="example.build.dir" value="target/examples/${example}/build"/>
    <property name="example.package.dir" value="target/examples/${example}/package"/>

    <path id="enunciate.classpath">
      <path refid="build.classpath"/>
      <fileset dir="target">
        <include name="${jar.pattern}"/>
      </fileset>
      <pathelement location="${conf.dir}"/>
    </path>

    <pathconvert refid="enunciate.classpath" property="enunciate.classpath.value" pathsep=":" dirsep="/"/>

    <echo>
      ${enunciate.classpath.value}
    </echo>

    <taskdef name="enunciate" classname="net.sf.enunciate.main.EnunciateTask">
      <classpath refid="enunciate.classpath"/>
    </taskdef>

    <mkdir dir="${example.gen.dir}"/>
    <mkdir dir="${example.compile.dir}"/>
    <mkdir dir="${example.build.dir}"/>
    <mkdir dir="${example.package.dir}"/>

    <enunciate verbose="true" target="${enunciate.target}"
               basedir="${example.dir}"
               configFile="${example.dir}/enunciate.xml"
               generateDir="${example.gen.dir}"
               compileDir="${example.compile.dir}"
               buildDir="${example.build.dir}"
               packageDir="${example.package.dir}">
      <include name="**/*.java"/>
      <classpath refid="enunciate.classpath"/>
    </enunciate>
  </target>

</project>
