[#ftl]
[#--template for the xfire simple type.--]
[@file name=(type.simpleName + "XFireType.java")  package=("xfireclient.types." + packageFor(type))]
[#assign classname=classnameFor(type)/]
[#assign baseobject=type.contentType.implied/]
// Generated by Enunciate
package ${packageFor(type)};

import org.codehaus.xfire.aegis.type.Type;
import org.codehaus.xfire.aegis.MessageReader;
import org.codehaus.xfire.aegis.MessageWriter;
import org.codehaus.xfire.MessageContext;
import org.codehaus.xfire.fault.XFireFault;

import net.sf.enunciate.modules.xfire_client.ListWriter;
import net.sf.enunciate.modules.xfire_client.ListParser;
import net.sf.enunciate.modules.xfire_client.ElementsWriter;

import javax.xml.namespace.QName;

/**
 * Logic for reading and writing an instance of ${classname} to an xml stream.
 *
 * @author Ryan Heaton
 */
public [#if type.abstract]abstract [/#if][#if type.final]final [/#if]class ${type.simpleName}XFireType [#if !baseobject]extends ${classnameFor(type.superclass)}XFireType [#else]extends Type [/#if]{

  [#if baseobject]
  protected MessageReader wrapperReader = null;

  /**
   * Reads an instance of ${type.simpleName} position in the message reader.
   *
   * @param reader The reader to read from.
   * @param context The context.
   * @return The ${type.simpleName}.
   */
  public final Object readObject(MessageReader reader, MessageContext context) throws XFireFault {
    ${classname} instance = (${classname}) newInstance();

    // read the attributes.
    while (reader.hasMoreAttributeReaders()) {
      MessageReader attributeReader = reader.getNextAttributeReader();
      QName name = attributeReader.getName();
      setAttributeProperty(instance, name, attributeReader, context);
    }

    // Set the value.
    setValueProperty(instance, reader, context);

    // Read child elements
    while (reader.hasMoreElementReaders()) {
      MessageReader elementReader = ((this.wrapperReader != null) && (this.wrapperReader.hasMoreElementReaders())) ? wrapperReader.getNextElementReader() : reader.getNextElementReader();
      QName name = elementReader.getName();
      setElementProperty(instance, name, elementReader, context);
    }

    return instance;
  }
  [/#if]

  /**
   * Creates a new instance of ${classname}.
   *
   * @return The instance.
   */
  [#if type.abstract]
  protected abstract Object newInstance();
  [#else]
  protected Object newInstance() {
    return new ${classname}();
  }
  [/#if]
  [#if baseobject || type.attributes?size > 0]

  /**
   * Sets a property on an given instance using an attribute reader.
   *
   * @param object The instance.
   * @param name The name of the property.
   * @param attributeReader The attribute reader
   * @param context The context.
   */
  protected void setAttributeProperty(Object object, QName name, MessageReader attributeReader, MessageContext context) throws XFireFault {
    [#if !baseobject]
    super.setAttributeProperty(object, name, attributeReader, context);
    [/#if]
    [#if type.attributes?size > 0]
    ${classname} instance = (${classname}) object;
      [#list type.attributes as attribute]
    [#if attribute_index > 0]else [/#if]if ("${attribute.namespace?default("")}".equals(name.getNamespaceURI()) && ("${attribute.name}".equals(name.getLocalPart()))) {
        [#if attribute.xmlList]
          [#if attribute.accessorType.collection]
      ListParser listParser = new ListParser(attributeReader.getValue(), ${classnameFor(attribute.accessorType)}.class, ${classnameFor(attribute.collectionItemType)}.class, getTypeMapping(), context);
          [#else]
      ListParser listParser = new ListParser(attributeReader.getValue(), ${classnameFor(attribute.accessorType)}.class, getTypeMapping(), context);
          [/#if]
      instance.set${attribute.simpleName?cap_first}((${classnameFor(attribute.accessorType)}) listParser.getList());
        [#else]
          [#if attribute.accessorType.primitive]
      Type type = getTypeMapping().getType([@primitiveWrapper type=attribute.accessorType/].class);
      ${attribute.accessorType} value = [@unwrapIfPrimitive type=attribute.accessorType](([@primitiveWrapper type=attribute.accessorType/]) type.readObject(attributeReader, context))[/@unwrapIfPrimitive];
          [#else]
      Type type = getTypeMapping().getType(${classnameFor(attribute.accessorType)}.class);
      ${classnameFor(attribute.accessorType)} value = (${classnameFor(attribute.accessorType)}) type.readObject(attributeReader, context);
          [/#if]
      instance.set${attribute.simpleName?cap_first}(value);
        [/#if]
    }
      [/#list]
    [/#if]
  }
  [/#if]
  [#if baseobject || type.value?exists]

  /**
   * Sets the value property on an given instance using the value reader.
   *
   * @param object The instance.
   * @param valueReader The value reader
   * @param context The context.
   */
  protected [#if type.value?exists]final [/#if]void setValueProperty(Object object, MessageReader valueReader, MessageContext context) throws XFireFault {
    [#if type.value?exists]
    ${classname} instance = (${classname}) object;
    //Read the xml value
      [#if type.value.xmlList]
        [#if type.value.accessorType.collection]
    ListParser listParser = new ListParser(reader.getValue(), ${classnameFor(type.value.accessorType)}.class, ${classnameFor(type.value.collectionItemType)}.class, getTypeMapping(), context);
        [#else]
    ListParser listParser = new ListParser(reader.getValue(), ${classnameFor(type.value.accessorType)}.class, getTypeMapping(), context);
        [/#if]
    instance.set${type.value.simpleName?cap_first}((${classnameFor(type.value.accessorType)}) listParser.getList());
      [#else]
        [#if type.value.accessorType.primitive]
    Type type = getTypeMapping().getType([@primitiveWrapper type=type.value.accessorType/].class);
    ${type.value.accessorType} value = [@unwrapIfPrimitive type=type.value.accessorType](([@primitiveWrapper type=type.value.accessorType/]) type.readObject(reader, context))[/@unwrapIfPrimitive];
        [#else]
    Type type = getTypeMapping().getType(${classnameFor(type.value.accessorType)}.class);
    ${classnameFor(type.value.accessorType)} value = (${classnameFor(type.value.accessorType)}) type.readObject(reader, context);
        [/#if]
    instance.set${type.value.simpleName?cap_first}(value);
      [/#if]
    [/#if]
  }
  [/#if]
  [#if baseobject || type.elements?size > 0]

  /**
   * Sets a property on an given instance using an element reader.
   *
   * @param object The instance.
   * @param name The name of the property.
   * @param elementReader The element reader
   * @param context The context.
   */
  protected void setElementProperty(Object object, QName name, MessageReader elementReader, MessageContext context) throws XFireFault {
    [#if !baseobject]
    super.setElementProperty(object, name, elementReader, context);
    [/#if]
    [#if type.elements?size > 0]
    ${classname} instance = (${classname}) object;
      [#list type.elements as item]
        [#list item.choices as element]
    [#if (element_index + item_index) > 0]else [/#if]if ("${element.namespace?default("")}".equals(name.getNamespaceURI()) && ("${element.name}".equals(name.getLocalPart()))) {
          [#if element.xmlList]
            [#if element.accessorType.collection]
      ListParser listParser = new ListParser(elementReader.getValue(), ${element.accessorType.declaration.qualifiedName}.class, ${classnameFor(element.collectionItemType)}.class, getTypeMapping(), context);
            [#else]
      ListParser listParser = new ListParser(elementReader.getValue(), ${classnameFor(element.accessorType)}.class, getTypeMapping(), context);
            [/#if]
      ${classnameFor(element.accessorType)} value = (${classnameFor(element.accessorType)}) listParser.getList();
          [#elseif element.bareAccessorType.primitive]
      Type type = getTypeMapping().getType([@primitiveWrapper type=element.bareAccessorType/].class);
      ${element.bareAccessorType} value = [@unwrapIfPrimitive  type=element.bareAccessorType](([@primitiveWrapper type=element.bareAccessorType/]) type.readObject(elementReader, context))[/@unwrapIfPrimitive];
          [#else]
      Type type = getTypeMapping().getType(${classnameFor(element.bareAccessorType)}.class);
      ${classnameFor(element.bareAccessorType)} value = (${classnameFor(element.bareAccessorType)}) type.readObject(elementReader, context);
          [/#if]
          [#if item.collectionType]
            [#if item.accessorType.collection]
      if (instance.get${element.simpleName?cap_first}() == null) {
        instance.set${element.simpleName?cap_first}((${item.accessorType.declaration.qualifiedName}) ListParser.newCollectionInstance(${item.accessorType.declaration.qualifiedName}.class));
      }
      instance.get${element.simpleName?cap_first}().add(value);
            [#else]
      java.util.ArrayList elementList;
      if (instance.get${element.simpleName?cap_first}() == null) {
        elementList = new java.util.ArrayList();
      }
      else {
        elementList = new java.util.ArrayList(java.util.Arrays.asList(instance.get${element.simpleName?cap_first}()));
      }
      elementList.add(value);
      instance.set${element.simpleName?cap_first}((${classnameFor(item.accessorType)}) elementList.toArray(new ${classnameFor(item.accessorType.componentType)}[elementList.size()]));
            [/#if]
          [#else]
      instance.set${element.simpleName?cap_first}(value);
          [/#if]
    }
        [/#list]
        [#if item.wrapped]
    else if ("${type.namespace?default("")}".equals(name.getNamespaceURI()) && ("${item.wrapperName}".equals(name.getLocalPart()))) {
      this.wrapperReader = elementReader;
    }
        [/#if]
      [/#list]
    [/#if]
  }
  [/#if]

  /**
   * Writes the value for an instance of ${type.simpleName} to a writer.
   *
   * @param object The ${type.simpleName}.
   * @param writer The writer.
   * @param context The context.
   */
  public void writeObject(Object object, MessageWriter writer, MessageContext context) throws XFireFault {
    [#if !baseobject]super.writeObject(object, writer, context);[/#if]
    ${classname} instance = (${classname}) object;

    Object property;
    ListWriter listWriter;
    [#if type.attributes?size > 0]
    // write the attributes.
      [#list type.attributes as attribute]
        [#if attribute.xmlList]
    listWriter = new ListWriter(instance.get${attribute.simpleName?cap_first}(), getTypeMapping(), context);
    property = listWriter.getValue();
        [#else]
    property = [@wrapIfPrimitive type=attribute.accessorType]instance.get${attribute.simpleName?cap_first}()[/@wrapIfPrimitive];
        [/#if]
    if (property != null) {
      Type type = getTypeMapping().getType(property.getClass());
      MessageWriter attributeWriter = writer.getAttributeWriter("${attribute.name}", "${attribute.namespace}");
      type.writeObject(property, attributeWriter, context);
      attributeWriter.close();
    }
        [#if attribute.required]
    else {
      throw new NullPointerException("Required property ${attribute.simpleName} on ${classname} was not set.");
    }
        [/#if]

      [/#list]
    [/#if]

    [#if type.value?exists]
    //write the value.
      [#if type.value.accessorType.primitive]
    writer.writeValue(String.valueOf(instance.get${type.value.simpleName?cap_first}()));
      [#else]
    ${classnameFor(type.value.accessorType)} value = instance.get${type.value.simpleName?cap_first}();
    if (value != null) {
        [#if type.value.xmlList]
      ListWriter listWriter = new ListWriter(value, getTypeMapping(), context);
      writer.writeValue(listWriter.getValue());
        [#else]
      Type type = getTypeMapping().getType(${classnameFor(type.value.accessorType)}.class);
      type.writeObject(value, writer, context);
        [/#if]
    }
      [/#if]
    [#elseif type.elements?size > 0]
    //write the elements.
      [#list type.elements as element]
        [#if element.xmlList || !element.collectionType]
          [#if element.xmlList]
    listWriter = new ListWriter(instance.get${element.simpleName?cap_first}(), getTypeMapping(), context);
    property = listWriter.getValue();
          [#else]
    property = [@wrapIfPrimitive type=element.accessorType]instance.get${element.simpleName?cap_first}()[/@wrapIfPrimitive];
          [/#if]
    if (property != null) {
      Type type = getTypeMapping().getType(property.getClass());
      MessageWriter elementWriter = writer.getElementWriter("${element.name}", "${element.namespace?default("")}");
      type.writeObject(property, elementWriter, context);
      elementWriter.close();
    }
          [#if element.required]
    else {
            [#if element.nillable]
      MessageWriter elementWriter = writer.getElementWriter("${element.name}", "${element.namespace?default("")}");
      elementWriter.writeXsiNil();
      elementWriter.close();
            [#else]
      throw new NullPointerException("Required property ${element.simpleName} on ${classname} was not set.");
            [/#if]
    }
          [/#if]
        [#else]
          [#if element.wrapped]
            [#if element.wrapperNillable]
    if (instance.get${element.simpleName?cap_first}() == null) {
      MessageWriter subwriter = writer.getElementWriter("${element.wrapperName}", "${type.namespace?default("")}");
      subwriter.writeXsiNil();
      subwriter.close();
    }
    else {
      MessageWriter subwriter = writer.getElementWriter("${element.wrapperName}", "${type.namespace?default("")}");
      ElementsWriter.writeElements(instance.get${element.simpleName?cap_first}(), new QName("${element.namespace?default("")}", "${element.name}"), subwriter, getTypeMapping(), context);
      subwriter.close();
    }
            [#else]
    if (instance.get${element.simpleName?cap_first}() != null) {
      subwriter = writer.getElementWriter("${element.wrapperName}", "${type.namespace?default("")}");
      ElementsWriter.writeElements(instance.get${element.simpleName?cap_first}(), new QName("${element.namespace?default("")}", "${element.name}"), subwriter, getTypeMapping(), context);
      subwriter.close();
    }
            [/#if]
          [#else]
    ElementsWriter.writeElements(instance.get${element.simpleName?cap_first}(), new QName("${element.namespace?default("")}", "${element.name}"), writer, getTypeMapping(), context);
          [/#if]
        [/#if]
      [/#list]
    [/#if]
  }

  public Class getTypeClass() {
    return ${classname}.class;
  }

  public QName getSchemaType() {
    return new QName("${type.namespace?default("")}", "${type.name?default("")}");
  }
}
[/@file]