[#ftl]
[#--template for the xfire simple type.--]
[@file name=(type.simpleName + ".java")  package=("xfireclient.types." + packageFor(type))]
[#assign classname=${classnameFor(type)}/]
// Generated by Enunciate
package ${packageFor(type)};

import org.codehaus.xfire.aegis.type.Type;
import org.codehaus.xfire.aegis.MessageReader;
import org.codehaus.xfire.aegis.MessageWriter;
import org.codehaus.xfire.MessageContext;
import org.codehaus.xfire.fault.XFireFault;

import net.sf.enunciate.modules.xfire_client.ListWriter;
import net.sf.enunciate.modules.xfire_client.ListParser;
import net.sf.enunciate.modules.xfire_client.ElementsWriter;

import javax.xml.namespace.QName;

/**
 * Logic for reading and writing an instance of ${classname} to an xml stream.
 *
 * @author Ryan Heaton
 */
public class ${type.simpleName}XFireType extends Type {

  /**
   * Reads an instance of ${type.simpleName} position in the message reader.
   *
   * @param reader The reader to read from.
   * @param context The context.
   * @return The ${type.simpleName}.
   */
  public Object readObject(MessageReader reader, MessageContext context) throws XFireFault {
    ${classname} instance = new ${classname}();

    [#if type.attributes?size > 0]
    // read the attributes.
    while (reader.hasMoreAttributeReaders()) {
      MessageReader attributeReader = reader.getNextAttributeReader();
      QName name = attributeReader.getName();
      [#list type.attributes as attribute]
      [#if !attribute_first]else [/#if]if ("${attribute.namespace?default("")}".equals(name.getNamespaceURI()) && ("${attribute.name}".equals(name.getLocalPart()))) {
        [#if attribute.xmlList]
          [#if attribute.accessorType.collection]
        ListParser listParser = new ListParser(attributeReader.getValue(), ${classnameFor(attribute.accessorType)}.class, ${classnameFor(attribute.collectionItemType)}.class, getTypeMapping(), context);
          [#else]
        ListParser listParser = new ListParser(attributeReader.getValue(), ${classnameFor(attribute.accessorType)}.class, getTypeMapping(), context);
          [/#if]
        instance.set${attribute.simpleName?cap_first}((${classnameFor(attribute.accessorType)}) listParser.getList());
        [#else]
          [#if attribute.accessorType.primitive]
        Type type = getTypeMapping().getType([@primitiveWrapper type=attribute.accessorType/].class);
        ${attribute.accessorType} value = [@unwrapIfPrimitive type=attribute.accessorType](([@primitiveWrapper type=attribute.accessorType/]) type.readObject(attributeReader, context))[/@unwrapIfPrimitive];
          [#else]
        Type type = getTypeMapping().getType(${classnameFor(attribute.accessorType)}.class);
        ${classnameFor(attribute.accessorType)} value = (${classnameFor(attribute.accessorType)}) type.readObject(attributeReader, context);
          [/#if]
        instance.set${attribute.simpleName?cap_first}(value);
        [/#if]
      }
      [/#list]
    }
    [/#if]

    [#if type.value?exists]
    //Read the xml value
      [#if type.value.xmlList]
        [#if type.value.accessorType.collection]
    ListParser listParser = new ListParser(reader.getValue(), ${classnameFor(type.value.accessorType)}.class, ${classnameFor(type.value.collectionItemType)}.class, getTypeMapping(), context);
        [#else]
    ListParser listParser = new ListParser(reader.getValue(), ${classnameFor(type.value.accessorType)}.class, getTypeMapping(), context);
        [/#if]
    instance.set${type.value.simpleName?cap_first}((${classnameFor(type.value.accessorType)}) listParser.getList());
      [#else]
        [#if type.value.accessorType.primitive]
    Type type = getTypeMapping().getType([@primitiveWrapper type=type.value.accessorType/].class);
    ${type.value.accessorType} value = [@unwrapIfPrimitive type=type.value.accessorType](([@primitiveWrapper type=type.value.accessorType/]) type.readObject(reader, context))[/@unwrapIfPrimitive];
        [#else]
    Type type = getTypeMapping().getType(${classnameFor(type.value.accessorType)}.class);
    ${classnameFor(type.value.accessorType)} value = (${classnameFor(type.value.accessorType)}) type.readObject(reader, context);
        [/#if]
    instance.set${type.value.simpleName?cap_first}(value);
      [/#if]
    [#elseif type.elements?size > 0]
    // Read child elements
    MessageReader wrapperReader = null;
    while (reader.hasMoreElementReaders()) {
      MessageReader elementReader = ((wrapperReader != null) && (wrapperReader.hasMoreElementReaders())) ? wrapperReader.getNextElementReader() : reader.getNextElementReader();
      QName name = elementReader.getName();

      [#list type.elements as item]
        [#list item.choices as element]
      [#if !(element_first && item_first)]else [/#if]if ("${element.namespace?default("")}".equals(name.getNamespaceURI()) && ("${element.name}".equals(name.getLocalPart()))) {
          [#if element.xmlList]
            [#if element.accessorType.collection]
        ListParser listParser = new ListParser(elementReader.getValue(), ${element.accessorType.declaration.qualifiedName}.class, ${classnameFor(element.collectionItemType)}.class, getTypeMapping(), context);
            [#else]
        ListParser listParser = new ListParser(elementReader.getValue(), ${classnameFor(element.accessorType)}.class, getTypeMapping(), context);
            [/#if]
        ${classnameFor(element.accessorType)} value = (${classnameFor(element.accessorType)}) listParser.getList();
          [#elseif element.accessorType.primitive]
        Type type = getTypeMapping().getType([@primitiveWrapper type=element.accessorType/].class);
        ${element.accessorType} value = [@unwrapIfPrimitive  type=element.accessorType](([@primitiveWrapper type=element.accessorType/]) type.readObject(elementReader, context))[/@unwrapIfPrimitive];
          [#else]
        Type type = getTypeMapping().getType(${classnameFor(element.accessorType)}.class);
        ${classnameFor(element.accessorType)} value = (${classnameFor(element.accessorType)}) type.readObject(elementReader, context);
          [/#if]
          [#if item.collectionType]
            [#if item.accessorType.collection]
        if (instance.get${element.simpleName?cap_first}() == null) {
          instance.set${element.simpleName?cap_first}((${item.accessorType.declaration.qualifiedName}) ListParser.newCollectionInstance(${item.accessorType.declaration.qualifiedName}.class));
        }
        instance.get${element.simpleName?cap_first}().add(value);
            [#else]
        java.util.ArrayList elementList;
        if (instance.get${element.simpleName?cap_first}() == null) {
          elementList = new java.util.ArrayList();
        }
        else {
          elementList = new java.util.ArrayList(java.util.Arrays.asList(instance.get${element.simpleName?cap_first}()));
        }
        elementList.add(value);
        instance.set${element.simpleName?cap_first}((${classnameFor(item.accessorType)}) elementList.toArray(new ${classnameFor(item.accessorType.componentType)}[elementList.size()]));
            [/#if]
          [/#else]
        instance.set${element.simpleName?cap_first}(value);
          [/#if]
      }
        [/#list]
        [#if item.wrapped]
      else if ("${type.namespace?default("")}".equals(name.getNamespaceURI()) && ("${item.wrapperName}".equals(name.getLocalPart()))) {
        wrapperReader = elementReader;
      }
        [/#if]
      [/#list]
    }
    [/#if]

    return instance;
  }

  /**
   * Writes the value for an instance of ${type.simpleName} to a writer.
   *
   * @param object The ${type.simpleName}.
   * @param writer The writer.
   * @param context The context.
   */
  public void writeObject(Object object, MessageWriter writer, MessageContext context) throws XFireFault {
    ${classname} instance = (${classname}) object;

    Object property;
    ListWriter listWriter;

    [#if type.attributes?size > 0]
    // write the attributes.
      [#list type.attributes as attribute]
        [#if attribute.xmlList]
    listWriter = new ListWriter(instance.get${attribute.simpleName?cap_first}(), getTypeMapping(), context);
    property = listWriter.getValue();
        [#else]
    property = [@wrapIfPrimitive type=attribute.accessorType]instance.get${attribute.simpleName?cap_first}()[/@wrapIfPrimitive];
        [/#if]
    if (property != null) {
      Type type = getTypeMapping().getType(property.getClass());
      MessageWriter attributeWriter = writer.getAttributeWriter("${attribute.name}", "${attribute.namespace}");
      type.writeObject(property, attributeWriter, context);
    }
        [#if attribute.required]
    else {
      throw new NullPointerException("Required property ${attribute.simpleName} on ${classname} was not set.");
    }
        [/#if]

      [/#list]
    [/#if]

    [#if type.value?exists]
    //write the value.
      [#if type.value.accessorType.primitive]
    writer.writeValue(String.valueOf(instance.get${type.value.simpleName?cap_first}()));
      [#else]
    ${classnameFor(type.value.accessorType)} value = instance.get${type.value.simpleName?cap_first}();
    if (value != null) {
        [#if type.value.xmlList]
      ListWriter listWriter = new ListWriter(value, getTypeMapping(), context);
      writer.writeValue(listWriter.getValue());
        [/#else]
      Type type = getTypeMapping().getType(${classnameFor(type.value.accessorType)}.class);
      type.writeObject(value, writer, context);
        [/#if]
    }
      [/#if]
    [#elseif type.elements?size > 0]
    //write the elements.
      [#list type.elements as element]
        [#if element.xmlList || !element.collectionType]
          [#if element.xmlList]
    listWriter = new ListWriter(instance.get${element.simpleName?cap_first}(), getTypeMapping(), context);
    property = listWriter.getValue();
          [#else]
    property = [@wrapIfPrimitive type=attribute.accessorType]instance.get${attribute.simpleName?cap_first}()[/@wrapIfPrimitive];
          [/#if]
    if (property != null) {
      Type type = getTypeMapping().getType(property.getClass());
      MessageWriter elementWriter = writer.getElementWriter("${element.name}", "${element.namespace}");
      type.writeObject(property, elementWriter, context);
    }
          [#if element.required]
    else {
            [#if element.nillable]
      MessageWriter elementWriter = writer.getElementWriter("${element.name}", "${element.namespace}");
      elementWriter.writeXsiNil();
            [#else]
      throw new NullPointerException("Required property ${element.simpleName} on ${classname} was not set.");
            [/#else]
    }
          [/#if]
        [#else]
          [#if element.wrapped]
            [#if element.wrapperNillable]
    if (instance.get${element.simpleName?cap_first}() == null) {
      MessageWriter subwriter = writer.getElementWriter("${element.wrapperName}", "${type.namespace}");
      subwriter.writeXsiNil();
    }
    else {
      MessageWriter subwriter = writer.getElementWriter("${element.wrapperName}", "${type.namespace}");
      ElementsWriter.writeElements(instance.get${element.simpleName?cap_first}(), new QName("${element.namespace}", "${element.name}"), subwriter, getTypeMapping(), context);
    }
            [#else]
    if (instance.get${element.simpleName?cap_first}() != null) {
      subwriter = writer.getElementWriter("${element.wrapperName}", "${type.namespace}");
      ElementsWriter.writeElements(instance.get${element.simpleName?cap_first}(), new QName("${element.namespace}", "${element.name}"), subwriter, getTypeMapping(), context);
    }
            [/#if]
          [#else]
    ElementsWriter.writeElements(instance.get${element.simpleName?cap_first}(), new QName("${element.namespace}", "${element.name}"), writer, getTypeMapping(), context);
          [/#if]
        [/#if]

      [/#list]

    [/#if]

  }
}
[/@file]