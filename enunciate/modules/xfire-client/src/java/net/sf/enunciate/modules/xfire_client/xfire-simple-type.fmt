[#ftl]
[#--template for the xfire simple type.--]
[@file name=(type.simpleName + "XFireType.java")  package=("xfireclient.types." + packageFor(type))]
[#assign classname=classnameFor(type)/]
// Generated by Enunciate
package ${packageFor(type)};

import org.codehaus.xfire.aegis.type.Type;
import org.codehaus.xfire.aegis.MessageReader;
import org.codehaus.xfire.aegis.MessageWriter;
import org.codehaus.xfire.MessageContext;
import org.codehaus.xfire.fault.XFireFault;

import net.sf.enunciate.modules.xfire_client.ListWriter;
import net.sf.enunciate.modules.xfire_client.ListParser;

import javax.xml.namespace.QName;

/**
 * Logic for reading and writing an instance of ${classname} to an xml stream.
 *
 * @author Ryan Heaton
 */
public class ${type.simpleName}XFireType extends Type {

  /**
   * Reads an instance of ${type.simpleName} from the value given.
   *
   * @param reader The reader to read from.
   * @param context The context.
   * @return The ${type.simpleName}.
   */
  public Object readObject(MessageReader reader, MessageContext context) throws XFireFault {
    ${classname} instance = new ${classname}();

    [#if type.value.xmlList]
      [#if type.value.accessorType.collection]
    ListParser listParser = new ListParser(reader.getValue(), ${type.value.accessorType.declaration.qualifiedName}.class, ${classnameFor(type.value.collectionItemType)}.class, getTypeMapping(), context);
      [#else]
    ListParser listParser = new ListParser(reader.getValue(), ${classnameFor(type.value.accessorType)}.class, getTypeMapping(), context);
      [/#if]
    ${classnameFor(type.value.accessorType)} value = (${classnameFor(type.value.accessorType)}) listParser.getList();
    [#elseif type.value.accessorType.primitive]
    Type type = getTypeMapping().getType([@primitiveWrapper type=type.value.accessorType/].class);
    ${type.value.accessorType} value = [@unwrapIfPrimitive](([@primitiveWrapper type=type.value.accessorType/]) type.readObject(reader, context))[/@unwrapIfPrimitive];
    [#else]
    Type type = getTypeMapping().getType(${classnameFor(type.value.accessorType)}.class);
    ${classnameFor(type.value.accessorType)} value = (${classnameFor(type.value.accessorType)}) type.readObject(reader, context);
    [/#if]
    instance.set${type.value.simpleName?cap_first}(value);

    return instance;
  }

  /**
   * Writes the value for an instance of ${type.simpleName} to a writer.
   *
   * @param object The ${type.simpleName}.
   * @param writer The writer.
   * @param context The context.
   */
  public void writeObject(Object object, MessageWriter writer, MessageContext context) throws XFireFault {
    ${classname} instance = (${classname}) object;

    [#if type.value.accessorType.primitive]
    writer.writeValue(String.valueOf(instance.get${type.value.simpleName?cap_first}()));
    [#else]
    ${classnameFor(type.value.accessorType)} value = instance.get${type.value.simpleName?cap_first}();
    if (value != null) {
      [#if type.value.xmlList]
      ListWriter listWriter = new ListWriter(value, getTypeMapping(), context);
      writer.writeValue(listWriter.getValue());
      [/#else]
      Type type = getTypeMapping().getType(${classnameFor(type.value.accessorType)}.class);
      type.writeObject(value, writer, context);
      [/#if]
    }
    [/#if]

  }

  public Class getTypeClass() {
    return ${classname}.class;
  }

  public QName getSchemaType() {
    return new QName("${type.namespace?default("")}", "${type.name}");
  }
}
[/@file]
