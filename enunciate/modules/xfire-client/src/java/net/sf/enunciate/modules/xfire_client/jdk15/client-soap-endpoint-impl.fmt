[#ftl]
[#--template for the client-side endpoint interface.--]
[@file name=(endpointInterface.simpleName + "Impl.java")  package=(packageFor(endpointInterface) + ".impl")]
// Generated by Enunciate
package ${packageFor(endpointInterface) + ".impl"};

import net.sf.enunciate.modules.xfire_client.ExplicitJAXWSAnnotationServiceFactory;
import ${packageFor(endpointInterface) + "." + endpointInterface.simpleName};
import org.codehaus.xfire.client.XFireProxyFactory;
import org.codehaus.xfire.service.Service;

import javax.xml.namespace.QName;
import java.net.MalformedURLException;
import java.util.HashMap;
import java.util.Map;

/**
 * Implementation of the {@link ${endpointInterface.simpleName}}.
 *
 * @author Ryan Heaton
 */
public class ${endpointInterface.simpleName}Impl implements ${endpointInterface.simpleName} {

  private final ${endpointInterface.simpleName} proxy;

  public ${endpointInterface.simpleName}Impl() {
    this("http://${defaultHost}:${defaultPort}${defaultContext}soap/${endpointInterface.serviceName}");
  }

  public ${endpointInterface.simpleName}Impl(String endpoint) {
    Service service;

    Map requestWrappers = new HashMap();
    Map responseWrappers = new HashMap();
  [@forEachWebMethod]
    [#if webMethod.docLitWrapped]
      [@forEachWebMessage var="io" includeHeaders=false includeFaults=false includeOutput=true includeInput=true]
        [#if io.input]
    requestWrappers.put("${webMethod.simpleName}", new QName("${io.elementNamespace}", "${io.elementName}"));
        [#elseif io.output]
    responseWrappers.put("${webMethod.simpleName}", new QName("${io.elementNamespace}", "${io.elementName}"));
        [/#if]
      [/@forEachWebMessage]
    [/#if]
  [/@forEachWebMethod]

    try {
      ExplicitJAXWSAnnotationServiceFactory factory = new ExplicitJAXWSAnnotationServiceFactory("${uuid}", requestWrappers, responseWrappers);
      service = factory.create(${endpointInterface.simpleName}.class);
    }
    catch (Exception e) {
      throw new IllegalStateException(e);
    }

    try {
      proxy = (${endpointInterface.simpleName}) new XFireProxyFactory().create(service, endpoint);
    }
    catch (MalformedURLException e) {
      throw new IllegalArgumentException(e);
    }
  }

  [@forEachWebMethod]

  // Inherited.
  public ${classnameFor(webMethod.returnType)} ${webMethod.simpleName}([#list webMethod.webParameters as param]${classnameFor(param.type)} ${param.simpleName}[#if param_has_next], [/#if][/#list]) [#if webMethod.webFaults?size > 0]throws [#list webMethod.webFaults as fault]${classnameFor(fault)}[#if fault_has_next], [/#if][/#list][/#if] {
    [#if !webMethod.returnType.void]return [/#if]proxy.${webMethod.simpleName}([#list webMethod.webParameters as param]${param.simpleName}[#if param_has_next], [/#if][/#list]); 
  }
  [/@forEachWebMethod]
}
[/@file]