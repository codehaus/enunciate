[#ftl]
[#--template for the xfire fault.--]
[@file name=(fault.simpleName + "XFireType.java")  package=("xfireclient.types." + packageFor(fault))]
[#assign classname=classnameFor(fault)/]
// Generated by Enunciate
package ${packageFor(fault)};

import org.codehaus.xfire.aegis.type.Type;
import org.codehaus.xfire.aegis.MessageReader;
import org.codehaus.xfire.aegis.MessageWriter;
import org.codehaus.xfire.MessageContext;
import org.codehaus.xfire.fault.XFireFault;

import net.sf.enunciate.modules.xfire_client.ListWriter;
import net.sf.enunciate.modules.xfire_client.ListParser;

import javax.xml.namespace.QName;

/**
 * Logic for reading and writing an instance of ${classname} to an xml stream.
 *
 * @author Ryan Heaton
 */
public class ${fault.simpleName}XFireType extends Type {

  /**
   * Reads an instance of ${fault.simpleName} from the value given.
   *
   * @param reader The reader to read from.
   * @param context The context.
   * @return The ${fault.simpleName}.
   */
  public Object readObject(MessageReader reader, MessageContext context) throws XFireFault {
    [#if fault.implicitSchemaElement]
    ${classname} instance = new ${classname}();

    while (reader.hasMoreElementReaders()) {
      MessageReader elementReader = reader.getNextElementReader();
      QName name = elementReader.getName();
      [#list fault.childElements as childElement]
      [#if childElement_index > 0]else [/#if]if ("${fault.targetNamespace}".equals(name.getNamespaceURI()) && ("${childElement.elementName}".equals(name.getLocalPart()))) {
        [#assign element=childElement.property]
        [#if element.propertyType.primitive]
        Type type = getTypeMapping().getType([@primitiveWrapper type=element.propertyType/].class);
        ${element.propertyType} value = [@unwrapIfPrimitive type=element.propertyType](([@primitiveWrapper type=element.propertyType/]) type.readObject(elementReader, context))[/@unwrapIfPrimitive];
        [#else]
        Type type = getTypeMapping().getType(${classnameFor(element.propertyType)}.class);
        ${classnameFor(element.propertyType)} value = (${classnameFor(element.propertyType)}) type.readObject(elementReader, context);
        [/#if]
        instance.set${element.simpleName?cap_first}(value);
      }
      [/#list]
    }
    [#else]
      [#assign explicitFaultBean=fault.explicitFaultBean/]
    Type type = getTypeMapping().getType(${classnameFor(explicitFaultBean)}.class);
    ${classnameFor(explicitFaultBean)} value = (${classnameFor(explicitFaultBean)}) type.readObject(reader, context);
    ${classname} instance = new ${classname}(value);
    [/#if]

    return instance;
  }

  /**
   * @throws UnsupportedOperationException Because client code should never have to write a server-side fault.
   */
  public void writeObject(Object object, MessageWriter writer, MessageContext context) throws XFireFault {
    throw new UnsupportedOperationException("Why would client code ever need to write a fault?  It just needs to deserialize a fault.");
  }

  public Class getTypeClass() {
    return ${classname}.class;
  }

  public QName getSchemaType() {
    return new QName("${fault.targetNamespace?default("")}", "${fault.elementName}");
  }
}
[/@file]
