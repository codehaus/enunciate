[#ftl]
[#--template for the client-side endpoint interface.--]
[@file name=(endpointInterface.simpleName + "Impl.java")  package=("xfireclient.jdk14." + packageFor(endpointInterface) + ".impl")]
// Generated by Enunciate
package ${packageFor(endpointInterface) + ".impl"};

import ${packageFor(endpointInterface) + "." + endpointInterface.simpleName};
import net.sf.enunciate.modules.xfire_client.ExplicitWebAnnotations;
import org.codehaus.xfire.XFireFactory;
import org.codehaus.xfire.client.XFireProxyFactory;
import org.codehaus.xfire.annotations.AnnotationServiceFactory;
import org.codehaus.xfire.service.Service;

import java.net.MalformedURLException;

/**
 * Implementation of the {@link ${endpointInterface.simpleName}}.
 *
 * @author Ryan Heaton
 */
public class ${endpointInterface.simpleName}Impl implements ${endpointInterface.simpleName} {

  private final ${endpointInterface.simpleName} proxy;

  public ${endpointInterface.simpleName}Impl() {
    this("http://${defaultHost}:${defaultPort}${defaultContext}/soap/${endpointInterface.serviceName}");
  }

  public ${endpointInterface.simpleName}Impl(String endpoint) {
    Service service;

    try {
      ExplicitWebAnnotations annotations = ExplicitWebAnnotations.readFrom(getClass().getResourceAsStream("/${uuid}.annotations"));
      AnnotationServiceFactory factory = new AnnotationServiceFactory(annotations, XFireFactory.newInstance().getXFire().getTransportManager());
      service = factory.create(${endpointInterface.simpleName}.class);
    }
    catch (Exception e) {
      throw new IllegalStateException(e);
    }

    try {
      proxy = (${endpointInterface.simpleName}) new XFireProxyFactory().create(service, endpoint);
    }
    catch (MalformedURLException e) {
      throw new IllegalArgumentException(e);
    }
  }

  [@forEachWebMethod]

  // Inherited.
  public ${classnameFor(webMethod.returnType)} ${webMethod.simpleName}([#list webMethod.webParameters as param]${classnameFor(param.type)} ${param.simpleName}[#if param_has_next], [/#if][/#list]) [#if webMethod.webFaults?size > 0]throws [#list webMethod.webFaults as fault]${classnameFor(fault)}[#if fault_has_next], [/#if][/#list][/#if] {
    [#if !webMethod.returnType.void]return [/#if] proxy.${webMethod.simpleName}([#list webMethod.webParameters as param]${param.simpleName}[#if param_has_next], [/#if][/#list]); 
  }
  [/@forEachWebMethod]
}
[/@file]