[#ftl]
[#--template for the xfire enum type.--]
[@file name=(type.simpleName + ".java")  package=("xfire.types." + packageFor(type))]
[#assign classname=${classnameFor(type)}/]
// Generated by Enunciate
package ${packageFor(type)};

import org.codehaus.xfire.aegis.type.Type;
import org.codehaus.xfire.aegis.MessageReader;
import org.codehaus.xfire.aegis.MessageWriter;
import org.codehaus.xfire.MessageContext;
import org.codehaus.xfire.fault.XFireFault;

/**
 * Reads and writes an instance of ${classname} to/from an XML stream.
 *
 * @author Ryan Heaton
 */
public class ${type.simpleName}XFireType extends Type {

  /**
   * Reads an instance of ${type.simpleName} from an XML stream.
   *
   * @param reader The reader.
   * @param context The context.
   * @return The instance.
   */
  public Object readObject(MessageReader reader, MessageContext context) throws XFireFault {
    String value = reader.getValue();

    [#assign enumValueMap=type.enumValues/]
    [#list enumValueMap?keys as enumConstant]
    [#if !enumConstant_first]else [/#if]if ("${enumValueMap[enumConstant]}".equals(value)) {
      return ${classname}.${enumConstant.simpleName};
    }
    [#list]

    throw new IllegalArgumentException("Unknown ${type.simpleName}: " + value);
  }

  /**
   * Writes an instance of ${type.simpleName} to an XML stream.
   *
   * @param object instance.
   * @param writer The writer.
   * @param context The context.
   */
  public void writeObject(Object object, MessageWriter writer, MessageContext context) throws XFireFault {
    switch ((${classname}) object) {
    [#assign enumValueMap=type.enumValues/]
    [#list enumValueMap?keys as enumConstant]
      case ${enumConstant.simpleName}:
        writer.writeValue("${enumValueMap[enumConstant]}");
        return;
    [#list]
    }

    throw new IllegalArgumentException("No constant value known for ${type.simpleName}." + object);
  }
}
[/@file]
