[#ftl]
[@file name="spring-servlet.xml"]
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<beans>

  <bean id="enunciate-interceptor-processor" class="org.codehaus.enunciate.modules.xfire.EnunciateGlobalInterceptorProcessor">
    [#if globalServiceInterceptors?exists]
      <property name="globalServiceInterceptors">
        <list>
      [#list globalServiceInterceptors as interceptor]
        [#if interceptor.interceptorClass?exists]
          <bean class="${interceptor.interceptorClass}"/>
        [#else]
          <ref bean="${interceptor.beanName}"/>
        [/#if]
      [/#list]
        </list>
      </property>
    [/#if]
  </bean>

  <bean id="enunciate-rest-resource-factory" class="org.codehaus.enunciate.modules.rest.RESTResourceFactory">
    <property name="enunciateServiceFactory">
      <ref bean="enunciate-interceptor-processor"/>
    </property>
    <property name="endpointClasses">
      <list>
        <!-- List of the REST endpoint bean classes -->
  [@forEachRESTEndpoint]
    [#if endpoint.class]
        <value>${endpoint.qualifiedName}</value>
    [/#if]
  [/@forEachRESTEndpoint]
      </list>
    </property>
  </bean>

  [#if springImports?exists]
    [#list springImports as springImport]
  <import resource="${springImport}"/>
    [/#list]
  [/#if]

  <bean id="handlerMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
    <property name="alwaysUseFullPath">
      <value>true</value>
    </property>

    <property name="interceptors">
      <list>
        <bean class="org.codehaus.enunciate.modules.xfire.HTTPRequestContextInterceptor"/>
  [#if handlerInterceptors?exists]
    [#list handlerInterceptors as interceptor]
      [#if interceptor.interceptorClass?exists]
        <bean class="${interceptor.interceptorClass}"/>
      [#else]
        <ref bean="${interceptor.beanName}"/>
      [/#if]
    [/#list]
  [/#if]
      </list>
    </property>

    <property name="urlMap">
      <map>
  [@forEachWsdl]
    [@forEachEndpointInterface wsdl=wsdl]
      [#list endpointInterface.endpointImplementations as impl]
        [#if impl.bindingType.soap11 || impl.bindingType.soap12]

        <!-- mapping for the SOAP endpoint for ${endpointInterface.serviceName} -->
        [#--todo: what about eis with the same name, different namespace?--]
        <entry key="/soap/${endpointInterface.serviceName}">
          <bean parent="soap-endpoint">
            <property name="serviceClass">
              <value>${impl.qualifiedName}</value>
            </property>
          [#if wsdl.properties.filename?exists]
            <property name="wsdlView">
              <bean class="org.springframework.web.servlet.view.RedirectView">
                <property name="url">
                  <value>/${wsdl.properties.filename}</value>
                </property>
                <property name="contextRelative">
                  <value>true</value>
                </property>
              </bean>
            </property>
          [/#if]
          </bean>
        </entry>
        [/#if]
      [/#list]
    [/@forEachEndpointInterface]
  [/@forEachWsdl]

  [@forEachRESTNoun]
        <entry key="/rest/${noun}">
          <bean parent="rest-endpoint" class="org.codehaus.enunciate.modules.rest.RESTResourceXMLExporter">
            <constructor-arg>
              <bean factory-bean="enunciate-rest-resource-factory" factory-method="getRESTResource">
                <constructor-arg><value>${noun.name}</value></constructor-arg>
                <constructor-arg><value>${noun.context}</value></constructor-arg>
              </bean>
            </constructor-arg>
          </bean>
        </entry>

        <entry key="/rest/${noun}/**">
          <bean parent="rest-endpoint" class="org.codehaus.enunciate.modules.rest.RESTResourceXMLExporter">
            <constructor-arg>
              <bean factory-bean="enunciate-rest-resource-factory" factory-method="getRESTResource">
                <constructor-arg><value>${noun.name}</value></constructor-arg>
                <constructor-arg><value>${noun.context}</value></constructor-arg>
              </bean>
            </constructor-arg>
          </bean>
        </entry>

        <entry key="/json/${noun}">
          <bean parent="rest-endpoint" class="org.codehaus.enunciate.modules.rest.RESTResourceJSONExporter">
            <constructor-arg>
              <bean factory-bean="enunciate-rest-resource-factory" factory-method="getRESTResource">
                <constructor-arg><value>${noun.name}</value></constructor-arg>
                <constructor-arg><value>${noun.context}</value></constructor-arg>
              </bean>
            </constructor-arg>
          </bean>
        </entry>

        <entry key="/json/${noun}/**">
          <bean parent="rest-endpoint" class="org.codehaus.enunciate.modules.rest.RESTResourceJSONExporter">
            <constructor-arg>
              <bean factory-bean="enunciate-rest-resource-factory" factory-method="getRESTResource">
                <constructor-arg><value>${noun.name}</value></constructor-arg>
                <constructor-arg><value>${noun.context}</value></constructor-arg>
              </bean>
            </constructor-arg>
          </bean>
        </entry>
  [/@forEachRESTNoun]
      </map>
    </property>

  </bean>

  <!-- define the parent for all soap service endpoints -->
  <bean id="soap-endpoint" abstract="true" class="org.codehaus.enunciate.modules.xfire.EnunciatedXFireExporter">
    <property name="serviceFactory">
      <ref bean="enunciatedServiceFactory"/>
    </property>
    <property name="xfire">
      <ref bean="xfire"/>
    </property>
    <property name="enunciateServiceFactory">
      <ref bean="enunciate-interceptor-processor"/>
    </property>
  </bean>

  <bean id="enunciatedServiceFactory" class="org.codehaus.enunciate.modules.xfire.EnunciatedJAXWSServiceFactory"/>

  <!-- define the parent for all xml-rest service endpoints -->
  <bean id="rest-endpoint" abstract="true">
    <property name="namespaces2Prefixes">
      <map>
  [#list ns2prefix?keys as ns]
    [#if ns?exists]
        <entry>
          <key><value>${ns}</value></key>
          <value>${ns2prefix[ns]}</value>
        </entry>
    [/#if]
  [/#list]
      </map>
    </property>
  </bean>

</beans>
[/@file]