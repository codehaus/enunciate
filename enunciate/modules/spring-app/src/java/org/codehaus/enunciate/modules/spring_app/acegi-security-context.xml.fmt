[#ftl]
[@file name="spring-security-context.xml"]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<beans>

  <bean id="filterChainProxy" class="org.acegisecurity.util.FilterChainProxy">
    <property name="filterInvocationDefinitionSource">
      <value><![CDATA[
				PATTERN_TYPE_APACHE_ANT
				/**=[#if securityConfig.persistIdentityAcrossHttpSession]loadHttpSessionIdentity,[/#if][#if securityConfig.enableFormBasedLogout]handleLogoutRequest,[/#if][#if securityConfig.additionalAuthenticationFilters?exists][#list securityConfig.additionalAuthenticationFilters as filter][#if filter.beanName?exists]${filter.beanName},[#elseif filter.className?exists]${filter.className},[/#if][/#list][/#if][#if securityConfig.enableDigestHTTPAuth]handleDigestHTTPAuth,[/#if][#if securityConfig.enableBasicHTTPAuth]handleBasicHTTPAuth,[/#if][#if securityConfig.enableFormBasedLogin]handleFormBasedAuth,[/#if][#if securityConfig.initJ2EESecurityContext]initJ2EESecurityContext,[/#if][#if securityConfig.enableRememberMeToken]loadRememberMeIdentity,[/#if][#if securityConfig.loadAnonymousIdentity]loadAnonymousIdentity,[/#if]translateExceptions
			]]></value>
    </property>
  </bean>

  <bean id="loadHttpSessionIdentity" class="org.acegisecurity.context.HttpSessionContextIntegrationFilter"/>

  [#-- logout filter, but only for HTTP form-based requests --]
  <bean id="handleLogoutRequest" class="org.acegisecurity.ui.logout.LogoutFilter">
    <constructor-arg value="${securityConfig.formBasedLogoutConfig.redirectOnSuccessUrl}"/>
    <!-- URL redirected to after logout -->
    <constructor-arg>
      <list>
        <ref bean="rememberMeServices"/>
        <bean class="org.acegisecurity.ui.logout.SecurityContextLogoutHandler"/>
      </list>
    </constructor-arg>
    <property name="filterProcessesUrl" value="${securityConfig.formBasedLogoutConfig.url}"/>
  </bean>

  [#if securityConfig.additionalAuthenticationFilters?exists]
    [#list securityConfig.additionalAuthenticationFilters as filter]
      [#if filter.className?exists]
  <bean id="${filter.className}" class="${filter.className}"/>
      [/#if]
    [/#list]
  [/#if]

  [#--Handles HTTP digest auth.--]
  <bean id="handleDigestHTTPAuth" class="org.acegisecurity.ui.digestauth.DigestProcessingFilter">
    <property name="userDetailsService" ref="localUserDetailsService"/>
    <property name="authenticationEntryPoint" ref="digestHTTPAuthEntryPoint"/>
  </bean>

  <bean id="digestHTTPAuthEntryPoint" class="org.acegisecurity.ui.digestauth.DigestProcessingFilterEntryPoint">
    <property name="realmName" value="${securityConfig.digestAuthConfig.realmName?default(securityConfig.realmName)}"/>
    <property name="key" value="${securityConfig.digestAuthConfig.key?default(securityConfig.key)}"/>
    [#if securityConfig.digestAuthConfig.nonceValiditySeconds?exists]
    <property name="nonceValiditySeconds" nonceValiditySeconds="${securityConfig.digestAuthConfig.nonceValiditySeconds}"/>
    [/#if]
  </bean>

  [#--Handles HTTP basic auth.--]
  <bean id="handleBasicHTTPAuth" class="org.acegisecurity.ui.basicauth.BasicProcessingFilter">
    <property name="authenticationManager" ref="authenticationManager"/>
    <property name="authenticationEntryPoint" ref="basicHTTPAuthEntryPoint"/>
  </bean>

  <bean id="basicHTTPAuthEntryPoint" class="org.acegisecurity.ui.basicauth.BasicProcessingFilterEntryPoint">
    <property name="realmName" value="${securityConfig.basicAuthConfig.realmName?default(securityConfig.realmName)}"/>
  </bean>

  [#-- This one's only for HTTP form-based authentication. --]
  <bean id="handleFormBasedAuth" class="org.acegisecurity.ui.webapp.AuthenticationProcessingFilter">
    <property name="authenticationFailureUrl" value="${securityConfig.formBasedLoginConfig.redirectOnFailureUrl}"/>
    <property name="defaultTargetUrl" value="${securityConfig.formBasedLoginConfig.redirectOnSuccessUrl}"/>
    <property name="filterProcessesUrl" value="${securityConfig.formBasedLoginConfig.url}"/>

    <property name="rememberMeServices" ref="rememberMeServices"/>
    <property name="authenticationManager" ref="authenticationManager"/>
  </bean>

  [#--to add j2ee-specific security context info to an HttpServletRequest.
  Also, if a user is redirected to a login page from a previous request,
  this will reset that saved request information after login.--]
  <bean id="initJ2EESecurityContext" class="org.acegisecurity.wrapper.SecurityContextHolderAwareRequestFilter"/>

  [#--loads the remember-me identity from a long-term remember-me cookie value.--]
  <bean id="loadRememberMeIdentity" class="org.acegisecurity.ui.rememberme.RememberMeProcessingFilter">
    <property name="authenticationManager" ref="authenticationManager"/>
    <property name="rememberMeServices" ref="rememberMeServices"/>
  </bean>

  [#--anonymous user loading--]
  <bean id="loadAnonymousIdentity" class="org.acegisecurity.providers.anonymous.AnonymousProcessingFilter">
    <property name="key" value="${securityConfig.anonymousConfig.key?default(securityConfig.key)}"/>
    <property name="userAttribute" value="${securityConfig.anonymousConfig.userId?default("anonymous")},${securityConfig.anonymousConfig.roles?default("ROLE_ANONYMOUS")}"/>
  </bean>

  [#if securityConfig.onAuthenticationFailed?exists && securityConfig.onAuthenticationFailed.redirectTo?exists]
  [#--entry point for a login page.--]
  <bean id="loginEntryPoint" class="org.acegisecurity.ui.webapp.AuthenticationProcessingFilterEntryPoint">
    <property name="loginFormUrl" value="${securityConfig.onAuthenticationFailed.redirectTo}"/>
    <property name="forceHttps" value="false"/>
    <property name="serverSideRedirect" value="true"/>
  </bean>
  [/#if]

  [#--handles a failed login and access denied responses.--]
  <bean id="translateExceptions" class="org.acegisecurity.ui.ExceptionTranslationFilter">
  [#if securityConfig.onAuthenticationFailed?exists && securityConfig.onAuthenticationFailed.redirectTo?exists]
    <property name="authenticationEntryPoint" ref="loginEntryPoint"/>
  [#elseif securityConfig.onAuthenticationFailed?exists && securityConfig.onAuthenticationFailed.useEntryPoint?exists]
    [#if securityConfig.onAuthenticationFailed.useEntryPoint.beanName?exists]
    <property name="authenticationEntryPoint" ref="${securityConfig.onAuthenticationFailed.useEntryPoint.beanName}"/>
    [#elseif securityConfig.onAuthenticationFailed.useEntryPoint.className?exists]
    <property name="authenticationEntryPoint">
      <bean class="${securityConfig.onAuthenticationFailed.useEntryPoint.className}"/>
    </property>
    [#else]
    <property name="authenticationEntryPoint">
      <bean class="org.codehaus.enunciate.modules.spring_app.NoEntryPoint"/>
    </property>
    [/#if]
  [#elseif securityConfig.enableDigestHTTPAuth]
    <property name="authenticationEntryPoint" ref="digestHTTPAuthEntryPoint"/>
  [#elseif securityConfig.enableBasicHTTPAuth]
    <property name="authenticationEntryPoint" ref="basicHTTPAuthEntryPoint"/>
  [#else]
    <property name="authenticationEntryPoint">
      <bean class="org.codehaus.enunciate.modules.spring_app.NoEntryPoint"/>
    </property>
  [/#if]
  [#if securityConfig.onAccessDenied?exists && securityConfig.onAccessDenied.redirectTo?exists]
    <property name="accessDeniedHandler">
      <bean class="org.acegisecurity.ui.AccessDeniedHandlerImpl">
        <property name="errorPage" value="${securityConfig.onAccessDenied.redirectTo}"/>
      </bean>
    </property>
  [#elseif securityConfig.onAccessDenied?exists && securityConfig.onAccessDenied.useEntryPoint?exists]
    [#if securityConfig.onAccessDenied.useEntryPoint.beanName?exists]
    <property name="accessDeniedHandler" ref="${securityConfig.onAccessDenied.useEntryPoint.beanName}"/>
    [#elseif securityConfig.onAccessDenied.useEntryPoint.className?exists]
    <property name="accessDeniedHandler">
      <bean class="${securityConfig.onAccessDenied.useEntryPoint.className}"/>
    </property>
    [#else]
    <property name="accessDeniedHandler">
      <bean class="org.codehaus.enunciate.modules.spring_app.BasicAccessDeniedHandler"/>
    </property>
    [/#if]
  [#else]
    <property name="accessDeniedHandler">
      <bean class="org.codehaus.enunciate.modules.spring_app.BasicAccessDeniedHandler"/>
    </property>
  [/#if]
  </bean>

  [#--locks down URIs to certain roles--]
  [#--
  todo: uncomment to enable resource-level filtering
  <bean id="filterInvocationInterceptor" class="org.acegisecurity.intercept.web.FilterSecurityInterceptor">
    <property name="authenticationManager" ref="authenticationManager"/>
    <property name="accessDecisionManager">
      <bean class="org.acegisecurity.vote.AffirmativeBased">
        <property name="allowIfAllAbstainDecisions" value="false"/>
        <property name="decisionVoters">
          <list>
            <bean class="org.acegisecurity.vote.RoleVoter"/>
            <bean class="org.acegisecurity.vote.AuthenticatedVoter"/>
          </list>
        </property>
      </bean>
    </property>
    <property name="objectDefinitionSource">
      <value><![CDATA[
				CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
				PATTERN_TYPE_APACHE_ANT
				/secure/extreme/**=ROLE_SUPERVISOR
				/secure/**=IS_AUTHENTICATED_REMEMBERED
				/**=IS_AUTHENTICATED_ANONYMOUSLY
			]]></value>
    </property>
  </bean>

  --]
  [#--used to load a user using a remember-me token--]
  <bean id="rememberMeServices" class="org.acegisecurity.ui.rememberme.TokenBasedRememberMeServices">
    <property name="userDetailsService" ref="localUserDetailsService"/>
    [#if securityConfig.rememberMeConfig?exists]
    <property name="key" value="${securityConfig.rememberMeConfig.key?default(securityConfig.key)}"/>
      [#if securityConfig.rememberMeConfig.tokenValiditySeconds?exists]
    <property name="tokenValiditySeconds" value="${securityConfig.rememberMeConfig.tokenValiditySeconds}"/>
      [/#if]
      [#if securityConfig.rememberMeConfig.cookieName?exists]
    <property name="tokenValiditySeconds" value="${securityConfig.rememberMeConfig.cookieName}"/>
      [/#if]
    [#else]
    <property name="key" value="${securityConfig.key}"/>
    [/#if]
  </bean>

  [#--authenticates the user via dao, anonymous, or remember me token--]
  <bean id="authenticationManager" class="org.acegisecurity.providers.ProviderManager">
    <property name="providers">
      <list>
  [#if securityConfig.additionalAuthenticationProviders?exists]
    [#list securityConfig.additionalAuthenticationProviders as provider]
      [#if provider.beanName?exists]
        <ref bean="${provider.beanName}"/>
      [#elseif provider.className?exists]
        <bean class="${provider.className}"/>
      [/#if]
    [/#list]
  [/#if]
        <ref bean="defaultProvider"/>
  [#if securityConfig.loadAnonymousIdentity]
        <bean class="org.acegisecurity.providers.anonymous.AnonymousAuthenticationProvider">
          <property name="key" value="${securityConfig.anonymousConfig.key?default(securityConfig.key)}"/>
        </bean>
  [/#if]
  [#if securityConfig.enableRememberMeToken]
        <bean class="org.acegisecurity.providers.rememberme.RememberMeAuthenticationProvider">
          <property name="key" value="${securityConfig.rememberMeConfig.key?default(securityConfig.key)}"/>
        </bean>
  [/#if]
      </list>
    </property>
  </bean>

  <bean id="defaultProvider" class="org.acegisecurity.providers.dao.DaoAuthenticationProvider">
    <property name="userDetailsService" ref="localUserDetailsService"/>
  </bean>

  [#if securityConfig.userDetailsService?exists]
    [#if securityConfig.userDetailsService.beanName?exists]
  <alias alias="localUserDetailsService" name="${securityConfig.userDetailsService.beanName}"/>
    [#elseif securityConfig.userDetailsService.className?exists]
  <bean id="localUserDetailsService" class="${securityConfig.userDetailsService.className}"/>
    [#else]
  <bean id="localUserDetailsService" class="org.codehaus.enunciate.modules.spring_app.DelegatingUserDetailsService"/>
    [/#if]
  [#else]
  <bean id="localUserDetailsService" class="org.codehaus.enunciate.modules.spring_app.DelegatingUserDetailsService"/>
  [/#if]

  [#--definition of the service method interceptor that will ensure secured methods are secured.--]
  <bean id="serviceMethodSecurityInterceptor" class="org.acegisecurity.intercept.method.aopalliance.MethodSecurityInterceptor">
    <property name="authenticationManager" ref="authenticationManager"/>
    <property name="accessDecisionManager">
      <bean class="org.acegisecurity.vote.AffirmativeBased">
        <property name="allowIfAllAbstainDecisions" value="true"/>
        <property name="decisionVoters">
          <list>
            <bean class="org.codehaus.enunciate.modules.spring_app.JSR250Voter"/>
          </list>
        </property>
      </bean>
    </property>
    <property name="objectDefinitionSource">
      <bean class="org.acegisecurity.intercept.method.MethodDefinitionAttributes">
        <property name="attributes">
          <bean class="org.codehaus.enunciate.modules.spring_app.JSR250SecurityAnnotationAttributes"/>
        </property>
      </bean>
    </property>
    <property name="rejectPublicInvocations" value="false"/>
  </bean>

  <bean id="loginLogoutHelper" class="org.codehaus.enunciate.modules.spring_app.LoginLogoutHelperImpl">
    <property name="logoutHandlers">
      <list>
        <ref bean="rememberMeServices"/>
        <bean class="org.acegisecurity.ui.logout.SecurityContextLogoutHandler"/>
      </list>
    </property>
  </bean>

  <bean id="EnunciateSpringSecuritySupport" class="org.codehaus.enunciate.modules.spring_app.EnunciateSpringSecuritySupport">
    <property name="loginLogoutHelper" ref="loginLogoutHelper"/>
  </bean>

  <!-- This bean is optional; it isn't used by any other bean as it only listens and logs -->
  <bean id="loggerListener" class="org.acegisecurity.event.authentication.LoggerListener"/>

</beans>
[/@file]