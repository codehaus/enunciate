[#ftl]
[#--
Template library for WSDL.
--]

[#--
  The processWsdl macro outputs a given WSDL.

  @param wsdl The WSDL to output.  (Instance of org.codehaus.enunciate.config.WsdlInfo)
--]
[#macro processWsdl wsdl]
[#-- assign the prefix variable for the "this" namespace --]
[#assign tns=prefix(wsdl.targetNamespace)]
[#-- assign the prefix variable for the "wsdl" namespace --]
[#assign wsdl=prefix("http://schemas.xmlsoap.org/wsdl/")]
[#-- assign the prefix variable for the "http" namespace --]
[#assign http=prefix("http://schemas.xmlsoap.org/wsdl/http/")]
[#-- assign the prefix variable for the "mime" namespace --]
[#assign mime=prefix("http://schemas.xmlsoap.org/wsdl/mime/")]
[#-- assign the prefix variable for the "soap" namespace --]
[#assign soap=prefix("http://schemas.xmlsoap.org/wsdl/soap/")]
[#-- assign the prefix variable for the "soapenc" namespace --]
[#assign soapenc=prefix("http://schemas.xmlsoap.org/soap/encoding/")]
[#-- assign the prefix variable for the schema namespace --]
[#assign xs=prefix("http://www.w3.org/2001/XMLSchema")]
[#t]
<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="http://schemas.xmlsoap.org/wsdl/" targetNamespace="${wsdl.targetNamespace}"
    [#list wsdl.importedNamespaces as importedNamespace]
      [#if importedNamespace?exists && importedNamespace?length > 0]
   xmlns:${prefix(importedNamespace)}="${importedNamespace}"
      [/#if]
    [/#list]
   >

  <types>
    [@processSchema wsdl=wsdl/]
  </types>

    [#-- output the web messages --]
    [@forEachWebMessage wsdl=wsdl]
      [@processMessage webMessage=webMessage/]
    [/@forEachWebMessage]

    [@forEachEndpointInterface wsdl=wsdl]
      [@processPortType endpointInterface=endpointInterface/]
    [/@forEachEndpointInterface]
    [#t]

    [@forEachEndpointInterface wsdl=wsdl]
      [@processBindings endpointInterface=endpointInterface/]
    [/@forEachEndpointInterface]

    [@forEachEndpointInterface wsdl=wsdl]
      [@processServices endpointInterface=endpointInterface/]
    [/@forEachEndpointInterface]
</definitions>
[/#macro]

[#--
  The processSchema macro outputs a schema element for a specified wsdl.

  @param wsdl The WSDL to output.  (Instance of org.codehaus.enunciate.config.WsdlInfo)
--]
[#macro processSchema wsdl]
  <${xs}:schema targetNamespace="${wsdl.targetNamespace}">
  [#list wsdl.importedSchemas as schema]
    <${xs}:import[#if schema.namespace?exists] namespace="${schema.namespace}"[/#if][#if schema.location?exists] schemaLocation="${schema.location}"[/#if]/>
  [/#list]
  </${xs}:schema>
[/#macro]

[#--
  The processMessage macro outputs a message element for a specified web message.

  @param webMessage The web message to output.  (Instance of org.codehaus.enunciate.contract.jaxws.WebMessage)
--]
[#macro processMessage webMessage]
  <message name="${webMessage.messageName}">
      [#if webMessage.messageDocs?exists]
    <documentation>
      <![CDATA[${webMessage.messageDocs?trim}]]>
    </documentation>
      [/#if]
      [#list webMessage.parts as part]
    <part name="${part.partName}" ${part.particleType?lower_case}="${part.particleQName}">
        [#if part.partDocs?exists]
      <documentation>
        <![CDATA[${part.partDocs?trim}]]>
      </documentation>
        [/#if]
    </part>
      [/#list]
  </message>
[/#macro]

[#--
  The processPortType macro outputs a portType element for a specified endpoint interface.

  @param endpointInterface The endpoint interface to output.  (Instance of org.codehaus.enunciate.contract.jaxws.EndpointInterface)
--]
[#macro processPortType endpointInterface]
  <portType name="${endpointInterface.portTypeName}">
      [#if endpointInterface.docValue?exists]
    <documentation>
      <![CDATA[${endpointInterface.docValue}]]>
    </documentation>
      [/#if]
      [@forEachWebMethod endpointInterface=endpointInterface]
        [@processOperation webMethod=webMethod/]
      [/@forEachWebMethod]
  </portType>
[/#macro]

[#--
  The processOperation macro outputs an operation element for a web method.

  @param webMethod The web method to output.  (Instance of org.codehaus.enunciate.contract.jaxws.WebMethod)
--]
[#macro processOperation webMethod]
  <operation name="${webMethod.operationName}">
      [#if webMethod.docValue?exists]
    <documentation>
      <![CDATA[${webMethod.docValue}]]>
    </documentation>
      [/#if]
      [@forEachWebMessage webMethod=webMethod var="input" includeHeaders=false includeFaults=false includeOutput=false includeInput=true]
    <input message="${tns}:${input.messageName}"/>
      [/@forEachWebMessage]
      [@forEachWebMessage webMethod=webMethod var="output" includeHeaders=false includeFaults=false includeOutput=true includeInput=false]
    <output message="${tns}:${output.messageName}"/>
      [/@forEachWebMessage]
      [@forEachThrownWebFault webMethod=webMethod var="fault"]
    <fault name="${fault.partName}" message="${tns}:${fault.messageName}"/>
      [/@forEachThrownWebFault]
  </operation>
[/#macro]

[#--
  The processBindings macro outputs a all binding elements for a specified endpoint interface.

  @param endpointInterface The endpoint interface to output.  (Instance of org.codehaus.enunciate.contract.jaxws.EndpointInterface)
--]
[#macro processBindings endpointInterface]
  [@forEachBindingType]
    [#if bindingType.soap11 || bindingType.soap12]

      [@processSOAPBinding endpointInterface=endpointInterface/]
    [#elseif bindingType.http]

      [@processHTTPBinding endpointInterface=endpointInterface/]
    [#else]
      [#stop "unknown binding type: " + bindingType.namespace]
    [/#if]
  [/@forEachBindingType]
[/#macro]

[#--todo: figure out whether/if I need to process a MIME SOAP binding for attachments?--]

[#--
  The processSOAPBinding macro outputs a soap binding element for a specified endpoint interface.

  @param endpointInterface The endpoint interface to output.  (Instance of org.codehaus.enunciate.contract.jaxws.EndpointInterface)
--]
[#macro processSOAPBinding endpointInterface]
  <binding name="${endpointInterface.simpleName}SOAPBinding" type="${tns}:${endpointInterface.portTypeName}">
    <documentation>
      <![CDATA[SOAP Binding for ${endpointInterface.portTypeName}]]>
    </documentation>
    <${soap}:binding transport="http://schemas.xmlsoap.org/soap/http" style="${endpointInterface.soapBindingStyle?lower_case}"/>
      [@forEachWebMethod endpointInterface=endpointInterface]
    <operation name="${webMethod.operationName}">
      <${soap}:operation soapAction="${webMethod.action}" style="${webMethod.soapBindingStyle?lower_case}"/>
      <input>
        [@forEachWebMessage webMethod=webMethod var="message" includeFaults=false includeOutput=false]
          [#if message.header]
        <${soap}:header message="${tns}:${message.messageName}" part="${message.partName}"/>
          [/#if]
        [/@forEachWebMessage]
        [#-- todo: figure out if this element is valid even if there isn't a body. --]
        <${soap}:body use="literal"/>
      </input>
      <output>
        [@forEachWebMessage webMethod=webMethod var="message" includeFaults=false includeInput=false]
          [#if message.header]
        <${soap}:header message="${tns}:${message.messageName}" part="${message.partName}"/>
          [/#if]
        [/@forEachWebMessage]
        [#-- todo: figure out if this element is valid even if there isn't a body. --]
        <${soap}:body use="literal"/>
      </output>
        [@forEachThrownWebFault webMethod=webMethod]
      <fault>
        <${soap}:fault name="${webFault.messageName}" use="literal"/>
      </fault>
        [/@forEachThrownWebFault]
    </operation>
      [/@forEachWebMethod]
  </binding>
[/#macro]

[#--
  The processHTTPBinding macro outputs an HTTP binding element for a specified endpoint interface.

  @param endpointInterface The endpoint interface to output.  (Instance of org.codehaus.enunciate.contract.jaxws.EndpointInterface)
--]
[#macro processHTTPBinding endpointInterface]
  <binding name="${endpointInterface.simpleName}HTTPBinding" type="${tns}:${endpointInterface.portTypeName}">
    <documentation>
      <![CDATA[HTTP Binding for ${endpointInterface.portTypeName}]]>
    </documentation>
    <${http}:binding verb="POST"/>
      [@forEachWebMethod endpointInterface=endpointInterface]
    <operation name="${webMethod.operationName}">
      <${http}:operation location="TBD"/>
      <input>
        <${http}:urlEncoded/>
      </input>
      <output>
        <${http}:urlEncoded/>
      </output>
    </operation>
      [/@forEachWebMethod]
  </binding>
[/#macro]

[#--
  The processServices macro outputs the service element for a specified endpoint interface.

  @param endpointInterface The endpoint interface to output.  (Instance of org.codehaus.enunciate.contract.jaxws.EndpointInterface)
--]
[#macro processServices endpointInterface]
  <service name="${endpointInterface.serviceName}">
      [@forEachBindingType]
        [#if bindingType.soap11 || bindingType.soap12]
          [@processSOAPServicePort endpointInterface=endpointInterface/]
        [#elseif bindingType.http]
          [@processHTTPServicePort endpointInterface=endpointInterface/]
        [/#if]
      [/@forEachBindingType]
  </service>
[/#macro]

[#--
  The processSOAPServicePort macro outputs a soap port element for a specified endpoint interface.

  @param endpointInterface The endpoint interface to output.  (Instance of org.codehaus.enunciate.contract.jaxws.EndpointInterface)
--]
[#macro processSOAPServicePort endpointInterface]
    <port name="${endpointInterface.simpleName}SOAPPort" binding="${tns}:${endpointInterface.simpleName}SOAPBinding">
      [#--todo: make this address a known token so the server-side code can process it.--]
  [#if endpointHostname?exists]
      <${soap}:address location="${endpointProtocol?default("http")}://${endpointHostname}/${endpointContext?default("enunciate/soap")}/${endpointInterface.serviceName}"/>
  [#else]
      <${soap}:address location="${endpointContext?default("soap")}/${endpointInterface.serviceName}"/>
  [/#if]
    </port>
[/#macro]

[#--
  The processHTTPServicePort macro outputs a http port element for a specified endpoint interface.

  @param endpointInterface The endpoint interface to output.  (Instance of org.codehaus.enunciate.contract.jaxws.EndpointInterface)
--]
[#macro processHTTPServicePort endpointInterface]
    <port name="${endpointInterface.simpleName}HTTPPort" binding="${tns}:${endpointInterface.simpleName}HTTPBinding">
      [#--todo: make this address a known token so the server-side code can process it.--]
      [#--todo: add an option to state this address statically.--]
      <${http}:address location="TBD"/>
    </port>
[/#macro]