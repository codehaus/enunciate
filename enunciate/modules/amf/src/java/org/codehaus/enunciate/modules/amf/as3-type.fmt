[#ftl]
[#--template for the client-side complex type.--]
[@file name=(type.simpleName + ".as")  package=packageFor(type)]
[#assign baseobject=type.baseObject/]
// Generated by Enunciate
package ${packageFor(type)} {

  import flash.utils.IExternalizable;
  import flash.utils.IDataOutput;
  import flash.utils.IDataInput;
  
  /**
   * ${type.docComment?default("(no documentation provided)")?chop_linebreak?replace("\n", "\n   * ")}
   */
  [Bindable]
  [RemoteClass(alias="${type.qualfiedName}")]
  public [#if type.final]final [/#if]class ${type.simpleName} [#if !baseobject]extends ${classnameFor(type.superclass)} [#else]implements IExternalizable [/#if]{

  [#list type.attributes as attribute]
    private var _${attribute.simpleName}:${classnameFor(attribute)};
  [/#list]
  [#if type.value?exists]
    private var _${value.simpleName}:${classnameFor(value)};
  [#else]
    [#list type.elements as element]
    private var _${element.simpleName}:${classnameFor(element)};
    [/#list]
  [/#if]

    public function ${type.simpleName}() {
    }
  [#list type.attributes as attribute]
[@propertyAccessors property=attribute/]
  [/#list]
  [#if type.value?exists]
[@propertyAccessors property=type.value/]
  [#else]
    [#list type.elements as element]
[@propertyAccessors property=element/]
    [/#list]
  [/#if]

    public [#if !baseobject]override [/#if]function writeExternal(output:IDataOutput):void {
  [#list type.attributes as attribute]
      output.writeObject(_${attribute.simpleName});
  [/#list]
  [#if type.value?exists]
      output.writeObject(_${value.simpleName});
  [#else]
    [#list type.elements as element]
      output.writeObject(_${element.simpleName});
    [/#list]
  [/#if]
      [#if !baseobject]super.writeExternal(output);[/#if]
    }

    public [#if !baseobject]override [/#if]function readExternal(input:IDataInput):void {
  [#list type.attributes as attribute]
      _${attribute.simpleName} = input.readObject() as ${classnameFor(attribute)};
  [/#list]
  [#if type.value?exists]
      _${value.simpleName} = input.readObject() as ${classnameFor(value)};
  [#else]
    [#list type.elements as element]
      _${element.simpleName} = input.readObject() as ${classnameFor(element)};
    [/#list]
  [/#if]
      [#if !baseobject]super.readExternal(input);[/#if]
    }
  }
}
[/@file]
[#macro propertyAccessors property]
  [#if !property.annotations["org.codehaus.enunciate.modules.amf.AMFTransient"]?exists]

    /**
     * ${property.javaDoc.return?default(property.docValue?default("(no documentation provided)"))?chop_linebreak?replace("\n", "\n     * ")}
     */
    public function get ${property.simpleName}():${classnameFor(property)} {
      return _${property.simpleName};
    }

    /**
     * ${property.javaDoc.return?default(property.docValue?default("(no documentation provided)"))?chop_linebreak?replace("\n", "\n     * ")}
     */
    public function set ${property.simpleName}(${property.simpleName}:${classnameFor(property)}):void {
      _${property.simpleName} = ${property.simpleName};
    }
  [/#if]
[/#macro]