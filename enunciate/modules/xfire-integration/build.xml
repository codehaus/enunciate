<?xml version="1.0" encoding="UTF-8"?>

<project default="test" name="xfire-integration" basedir=".">

  <property name="app.name" value="full"/>
  <property name="build.dir" value="target/examples/${app.name}/classes/xfire-client/jdk14"/>

  <import file="../../build-module.xml"/>

  <available property="container.test.support.exists" file="${container.test.support.file}"/>
  <fail unless="container.test.support.exists">
    No container test support (looked for ${container.test.support.file})
    
    Enunciate needs to run tests that run against code deployed in a j2ee container.  Since the type
    and location of the container needs to be user-defined, these integration tests depend on a
    user-defined build file (default location is ~/.enunciate/container-test-support.xml).  This build
    file must define the following properties:

    war.deploy.dir (directory on the filesystem into which to drop the war file)

    and the following targets:

    start-container (start the container this target will be executed in a daemon thread)

    The following properties are optional:

    container.port (port to which the container will be bound, defaults to 8080)
    init.container.target (if defined, this target will be invoked before calling start-container).
    stop.container.target (if defined, this target will be invoked to stop the container).
    container.test.context (the context on which the war will be mounted, defaults to the name of the war)
    container.test.delay.time (time in seconds to wait between invoking the start-container target and executing the tests, defaults to 5)
    container.test.delay.target (if defined, instead of just waiting, this target will be invoked after start-container and before executing the tests)
  </fail>
  <import file="${container.test.support.file}"/>

  <target name="init-example-api">
    <property name="example" value="${app.name}"/>
    <property name="example.enunciate.xml" value="${basedir}/src/conf/enunciate.xml"/>
    <property name="enunciate.target" value="package"/>
  </target>

  <!--no-op because there are no java sources.  this is a test module.-->
  <target name="enunciate-full-api" depends="init-example-api, enunciate-example-api"/>

  <target name="compile-tests" depends="base.compile-tests">
    <javac destdir="${test.build.dir}" debug="true">
      <src>
        <pathelement location="${enunciate.sample.src.dir}/${app.name}"/>
      </src>
      <classpath refid="build.classpath"/>
    </javac>
    <copy file="target/examples/${app.name}/build/spring-app/META-INF/MANIFEST.MF" tofile="${test.build.dir}/war-manifest.mf" failonerror="true"/>
  </target>

  <target name="test" depends="enunciate-full-api, compile-tests">
    <antcall target="-init-container-tests" inheritall="true"/>

    <property name="container.port" value="8080"/>
    <property name="container.test.context" value="${app.name}"/>
    <property name="container.test.delay.time" value="5"/>
    <property name="container.test.delay.target" value="-delay-container-tests"/>
    <property name="stop.container.target" value="default-stop-container"/>

    <propertyset id="test.sysprops">
      <propertyref name="container.port"/>
      <propertyref name="container.test.context"/>
    </propertyset>

    <antcall target="deploy-full-api" inheritall="true"/>
    <parallel failonany="true">
      <daemons>
        <antcall target="start-container" inheritall="true"/>
      </daemons>
      <sequential>
        <antcall target="${container.test.delay.target}" inheritall="true"/>
        <antcall target="-test">
          <reference refid="nonsystem.build.classpath"/>
          <reference refid="build.classpath"/>
          <reference refid="test.classpath"/>
        </antcall>
        <antcall target="${stop.container.target}" inheritall="true"/>
      </sequential>
    </parallel>
  </target>

  <target name="deploy" depends="install"/>

  <target name="default-stop-container"/>

  <target name="deploy-full-api">
    <copy todir="${war.deploy.dir}" file="target/examples/${app.name}/package/spring-app/${app.name}.war"/>
  </target>

  <target name="-delay-container-tests">
    <sleep seconds="${container.test.delay.time}"/>
  </target>

  <target name="-init-container-tests" if="init.container.target">
    <antcall target="${init.container.target}"/>
  </target>

</project>
