[#ftl]
[@file name="docs.xml"]
<?xml version="1.0" encoding="UTF-8"?>
<api-docs[#if copyright?exists] copyright="${copyright}"[/#if][#if licenseFile?exists] licenseFile="${licenseFile}"[/#if][#if title?exists] title="${title}"[/#if]>
[#if apiDoc?exists]
  <documentation>
    <![CDATA[${apiDoc}]]>
  </documentation>
  [#list apiDoc?keys as tag]
    [#list apiDoc[tag] as tagValue]
  <tag name="${tag}"><![CDATA[${tagValue}]]></tag>
    [/#list]
  [/#list]
[/#if]
  <data>
[@forEachSchema]
    <schema namespace="${schema.namespace?default("")}" namespaceId="${schema.id}"[#if schema.properties.filename?exists] file="${schema.properties.filename}"[/#if]>
      <types>
  [#list schema.typeDefinitions as type]
        <type name="${type.name?default("(anonymous)")}" id="${type.qualifiedName}" package="${type.package.qualifiedName}"[#if type.superclass?exists && type.superclass.declaration.qualifiedName != "java.lang.Object"] extendsType="${type.superclass.declaration.qualifiedName}"[/#if]>
    [#if type.docValue?exists]
          <documentation>
            <![CDATA[${type.docValue}]]>
          </documentation>
    [/#if]
    [#list type.javaDoc?keys as tag]
      [#list type.javaDoc[tag] as tagValue]
          <tag name="${tag}"><![CDATA[${tagValue}]]></tag>
      [/#list]
    [/#list]
    [#if type.attributes?size > 0]
          <attributes>
      [#list type.attributes as attribute]
            <attribute name="${attribute.name}" typeNamespace="${attribute.baseType.namespace?default("")}" typeName="${attribute.baseType.qname.localPart}">
              <![CDATA[${attribute.javaDoc.return?default(attribute.docValue?default("(no documentation provided)"))}]]>
            </attribute>
      [/#list]
          </attributes>
    [/#if]
    [#if type.elements?size > 0]
          <elements>
      [#list type.elements as element]
            <element minOccurs="${element.minOccurs}" maxOccurs="${element.maxOccurs}">
        [#if element.docValue?exists]
              <documentation>
                <![CDATA[${element.docValue}]]>
              </documentation>
        [/#if]
        [#list element.javaDoc?keys as tag]
          [#list element.javaDoc[tag] as tagValue]
              <tag name="${tag}"><![CDATA[${tagValue}]]></tag>
          [/#list]
        [/#list]
        [#list element.choices as choice]
              <choice name="${choice.name}" namespace="${choice.namespace?default("")}"[#if !(choice.ref?exists || choice.baseType.anonymous)] typeNamespace="${choice.baseType.namespace?default("")}" typeName="${choice.baseType.qname.localPart}"[/#if]/>
        [/#list]
            </element>
      [/#list]
          </elements>
    [/#if]
    [#if type.value?exists]
          <value typeNamespace="${type.value.baseType.namespace?default("")}" typeName="${type.value.baseType.qname.localPart}">
            <![CDATA[${type.value.javaDoc.return?default(type.value.docValue?default("(no documentation provided)"))}]]>
          </value>
    [/#if]
    [#if type.enum]
          <values>
      [#list type.delegate.enumConstants as item]
            <item value="${type.enumValues[item.simpleName]}">
        [#if item.docValue?exists]
              <documentation>
                 <![CDATA[${item.docValue}]]>
              </documentation>
        [/#if]
        [#list item.javaDoc?keys as tag]
          [#list item.javaDoc[tag] as tagValue]
              <tag name="${tag}"><![CDATA[${tagValue}]]></tag>
          [/#list]
        [/#list]
            </item>
      [/#list]
          </values>
    [/#if]
        </type>
  [/#list]
      </types>
      <elements>
  [#list schema.globalElements as element]
        <element name="${element.name}" type="${element.typeDefinition.qualifiedName}">
    [#if element.docValue?exists]
          <documentation>
            <![CDATA[${element.docValue}]]>
          </documentation>
    [/#if]
    [#list element.javaDoc?keys as tag]
      [#list element.javaDoc[tag] as tagValue]
          <tag name="${tag}"><![CDATA[${tagValue}]]></tag>
      [/#list]
    [/#list]
        </element>
  [/#list]
      </elements>
    </schema>
[/@forEachSchema]
  </data>
  <soap>
    <wsdls>
[@forEachWsdl]
      <wsdl namespace="${wsdl.targetNamespace?default("")}" namespaceId="${wsdl.id}"[#if wsdl.properties.filename?exists] file="${wsdl.properties.filename}"[/#if]>
  [@forEachEndpointInterface wsdl=wsdl]
        <endpointInterface name="${endpointInterface.serviceName}" id="${endpointInterface.qualifiedName}" package="${endpointInterface.package.qualifiedName}">
    [#if endpointInterface.docValue?exists]
          <documentation>
            <![CDATA[${endpointInterface.docValue}]]>
          </documentation>
    [/#if]
    [#list endpointInterface.javaDoc?keys as tag]
      [#list endpointInterface.javaDoc[tag] as tagValue]
          <tag name="${tag}"><![CDATA[${tagValue}]]></tag>
      [/#list]
    [/#list]
    [#list endpointInterface.webMethods as method]
          <method name="${method.operationName}" oneWay="${method.oneWay?string}">
      [#if method.docValue?exists]
            <documentation>
              <![CDATA[${method.docValue}]]>
            </documentation>
      [/#if]
      [#list method.javaDoc?keys as tag]
        [#if (("param" != tag) && ("throws" != tag) && ("exception" != tag) && ("return" != tag))]
          [#list method.javaDoc[tag] as tagValue]
            <tag name="${tag}"><![CDATA[${tagValue}]]></tag>
          [/#list]
        [/#if]
      [/#list]
      [#list method.webParameters as parameter]
            <parameter name="${parameter.partName}" input="${parameter.input?string}" output="${parameter.output?string}">
              <![CDATA[${parameter.docValue?default("(no documentation provided)")}]]>
            </parameter>
      [/#list]
      [#if ((!method.oneWay) && (!method.returnType.void))]
            <result>
              <![CDATA[${method.returnType.docValue?default("(no documentation provided)")}]]>
            </result>
      [/#if]
      [#list method.thrownTypes as fault]
            <fault name="${fault.declaration.simpleName}">
              <![CDATA[${fault.docValue?default("(no documentation provided)")}]]>
            </fault>
      [/#list]
          </method>
    [/#list]
        </endpointInterface>
  [/@forEachEndpointInterface]
      </wsdl>
[/@forEachWsdl]
    </wsdls>
  </soap>
  <rest>
    <resources>
[#list nouns2methods?values as methodList]
      <resource name="${(methodList?first).noun}">
  [#list methodList as method]
        <operation type="${method.verb}" requiresResourceId="${method.properNoun?exists?string}">
     [#if method.docValue?exists]
          <documentation>
            <![CDATA[${method.docValue}]]>
          </documentation>
     [/#if]
     [#list method.javaDoc?keys as tag]
       [#if (("param" != tag) && ("throws" != tag) && ("exception" != tag) && ("return" != tag))]
         [#list method.javaDoc[tag] as tagValue]
          <tag name="${tag}"><![CDATA[${tagValue}]]></tag>
         [/#list]
       [/#if]
     [/#list]
     [#list method.adjectives as parameter]
          <parameter name="${parameter.adjectiveName}">
            <![CDATA[${parameter.docValue?default("(no documentation provided)")}]]>
          </parameter>
     [/#list]
     [#if method.nounValue?exists]
          <inValue typeNamespace="${method.nounValue.xmlType.namespace?default("")}" typeName="${method.nounValue.xmlType.name}">
            <![CDATA[${method.nounValue.docValue?default("(no documentation provided)")}]]>
          </inValue>
     [/#if]
     [#if !method.returnType.void]
          <outValue typeNamespace="${method.XMLReturnType.namespace?default("")}" typeName="${method.XMLReturnType.name}">
            <![CDATA[${method.returnType.docValue?default("")}]]>
          </outValue>
     [/#if]
     [#list method.thrownTypes as error]
          <error code="${method.RESTErrors[error_index].errorCode}">
            <![CDATA[${error.docValue?default("")}]]>
          </error>
     [/#list]
        </operation>
  [/#list]
      </resource>
[/#list]
    </resources>
  </rest>
  <packages>
[@forAllPackages var="package"]
    <package id="${package.qualifiedName}">
  [#if package.docValue?exists]
      <documentation>
        <![CDATA[${package.docValue}]]>
      </documentation>
  [/#if]
  [#list package.javaDoc?keys as tag]
    [#list package.javaDoc[tag] as tagValue]
      <tag name="${tag}"><![CDATA[${tagValue}]]></tag>
    [/#list]
  [/#list]
    </package>
[/@forAllPackages]
  </packages>
</api-docs>
[/@file]