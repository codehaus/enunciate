[#ftl]
[#--template for the xfire enum type.--]
[@file name=(type.simpleName + "XFireType.java")  package=packageFor(type) charset="utf-8"]
[#assign classname=classnameFor(type)/]
// Generated by Enunciate
package ${packageFor(type)};

import org.codehaus.xfire.aegis.type.Type;
import org.codehaus.xfire.aegis.MessageReader;
import org.codehaus.xfire.aegis.MessageWriter;
import org.codehaus.xfire.MessageContext;
import org.codehaus.xfire.fault.XFireFault;

import javax.xml.namespace.QName;

/**
 * Reads and writes an instance of ${classname} to/from an XML stream.
 */
public class ${type.simpleName}XFireType extends Type {

  /**
   * Reads an instance of ${type.simpleName} from an XML stream.
   *
   * @param reader The reader.
   * @param context The context.
   * @return The instance.
   */
  public Object readObject(MessageReader reader, MessageContext context) throws XFireFault {
    String value = reader.getValue();

    [#assign enumValueMap=type.enumValues/]
    [#list enumValueMap?keys as enumConstant]
    [#if enumConstant_index > 0]else [/#if]if ("${enumValueMap[enumConstant]}".equals(value)) {
      return ${classname}.${enumConstant};
    }
    [/#list]

    throw new IllegalArgumentException("Unknown ${type.simpleName}: " + value);
  }

  /**
   * Writes an instance of ${type.simpleName} to an XML stream.
   *
   * @param object instance.
   * @param writer The writer.
   * @param context The context.
   */
  public void writeObject(Object object, MessageWriter writer, MessageContext context) throws XFireFault {
    writer.writeValue(String.valueOf(object));
  }

  public Class getTypeClass() {
    return ${classname}.class;
  }

  public QName getSchemaType() {
    return new QName("${type.namespace?default("")}", "${type.name?default("")}");
  }
}
[/@file]
