[#ftl]
[#--template for the xfire simple type.--]
[@file name=(type.simpleName + "XFireType.java")  package=packageFor(type) charset="utf-8"]
[#assign classname=classnameFor(type)/]
[#assign baseobject=type.baseObject/]
// Generated by Enunciate
package ${packageFor(type)};

import org.codehaus.xfire.aegis.type.Type;
import org.codehaus.xfire.aegis.MessageReader;
import org.codehaus.xfire.aegis.MessageWriter;
import org.codehaus.xfire.MessageContext;
import org.codehaus.xfire.fault.XFireFault;

import org.codehaus.enunciate.modules.xfire_client.*;

import javax.xml.namespace.QName;

/**
 * Logic for reading and writing an instance of ${classname} to an xml stream.
 */
public [#if type.abstract]abstract [/#if][#if type.final]final [/#if]class ${type.simpleName}XFireType [#if !baseobject]extends ${classnameFor(type.superclass, true)}XFireType [#else]extends Type [/#if]implements EnunciatedType {

  [#if baseobject]
  /**
   * Reads an instance of ${type.simpleName} position in the message reader.
   *
   * @param reader The reader to read from.
   * @param context The context.
   * @return The ${type.simpleName}.
   */
  public final Object readObject(MessageReader reader, MessageContext context) throws XFireFault {
    ${classname} instance = (${classname}) newInstance();

    // read the attributes.
    while (reader.hasMoreAttributeReaders()) {
      MessageReader attributeReader = reader.getNextAttributeReader();
      QName name = attributeReader.getName();
      setAttributeProperty(instance, name, attributeReader, context);
      attributeReader.readToEnd();
    }

    // Set the value.
    setValueProperty(instance, reader, context);

    // Read child elements
    while (reader.hasMoreElementReaders()) {
      MessageReader elementReader = reader.getNextElementReader();
      QName name = elementReader.getName();
      setElementProperty(instance, name, elementReader, context);
      elementReader.readToEnd();
    }

    [#--todo: here handle required elements--]

    return instance;
  }
  [/#if]

  /**
   * Creates a new instance of ${classname}.
   *
   * @return The instance.
   */
  [#if type.abstract]
  protected abstract Object newInstance();
  [#else]
  protected Object newInstance() {
    return new ${classname}();
  }
  [/#if]
  [#if baseobject || type.attributes?size > 0]

  /**
   * Sets a property on an given instance using an attribute reader.
   *
   * @param object The instance.
   * @param name The name of the property.
   * @param attributeReader The attribute reader
   * @param context The context.
   */
  protected void setAttributeProperty(Object object, QName name, MessageReader attributeReader, MessageContext context) throws XFireFault {
    [#if !baseobject]
    super.setAttributeProperty(object, name, attributeReader, context);
    [/#if]
    [#if type.attributes?size > 0]
    final ${classname} instance = (${classname}) object;
      [#list type.attributes as attribute]
    [#if attribute_index > 0]else [/#if]if ("${attribute.namespace?default("")}".equals(name.getNamespaceURI()) && ("${attribute.name}".equals(name.getLocalPart()))) {
        [#if attribute.xmlList]
          [#if attribute.accessorType.collection]
      ListParser listParser = new ListParser(attributeReader.getValue(), ${collectionTypeFor(attribute)}.class, ${componentTypeFor(attribute)}.class, getTypeMapping().getType(${componentTypeFor(attribute)}.class), context);
          [#else]
      ListParser listParser = new ListParser(attributeReader.getValue(), ${classnameFor(attribute)}.class, getTypeMapping().getType(${classnameFor(attribute)}.class.getComponentType()), context);
          [/#if]
      instance.set${attribute.simpleName?cap_first}((${classnameFor(attribute)}) listParser.getList());
        [#else]
          [#if attribute.accessorType.primitive]
      Type type = getTypeMapping().getType([@primitiveWrapper type=attribute.accessorType/].class);
      ${attribute.accessorType} value = [@unwrapIfPrimitive type=attribute.accessorType](([@primitiveWrapper type=attribute.accessorType/]) type.readObject(attributeReader, context))[/@unwrapIfPrimitive];
          [#elseif attribute.xmlIDREF]
      Type type = getTypeMapping().getType(java.lang.String.class);
      java.lang.String idref = (java.lang.String) type.readObject(attributeReader, context);
      ReferentialIntegrityHandler integrityHandler = (ReferentialIntegrityHandler) context.getProperty(ReferentialIntegrityHandler.class.getName());
      if (integrityHandler == null) {
        integrityHandler = new ReferentialIntegrityHandler();
        context.setProperty(ReferentialIntegrityHandler.class.getName(), integrityHandler);
      }

      integrityHandler.registerReference(idref, ${componentTypeFor(attribute)}.class, new ReferenceResolutionCallback() {
        public void handleResolution(Object resolution) {

      ${componentTypeFor(attribute)} value = (${componentTypeFor(attribute)}) resolution;
          [#else]
      Type type = getTypeMapping().getType(${classnameFor(attribute)}.class);
      ${classnameFor(attribute)} value = (${classnameFor(attribute)}) type.readObject(attributeReader, context);
          [/#if]
      instance.set${attribute.simpleName?cap_first}(value);
        [/#if]
        [#if attribute.xmlID]
        
      ReferentialIntegrityHandler integrityHandler = (ReferentialIntegrityHandler) context.getProperty(ReferentialIntegrityHandler.class.getName());
      if (integrityHandler == null) {
        integrityHandler = new ReferentialIntegrityHandler();
        context.setProperty(ReferentialIntegrityHandler.class.getName(), integrityHandler);
      }

      integrityHandler.registerResolution(java.lang.String.valueOf(value), instance);
        [#elseif attribute.xmlIDREF]

        }
      });
        [/#if]
    }
      [/#list]
    [/#if]
  }
  [/#if]
  [#if baseobject || type.value?exists]

  /**
   * Sets the value property on an given instance using the value reader.
   *
   * @param object The instance.
   * @param reader The value reader
   * @param context The context.
   */
  protected [#if type.value?exists]final [/#if]void setValueProperty(Object object, MessageReader reader, MessageContext context) throws XFireFault {
    [#if type.value?exists]
    ${classname} instance = (${classname}) object;
    //Read the xml value
      [#if type.value.xmlList]
        [#if type.value.accessorType.collection]
    ListParser listParser = new ListParser(reader.getValue(), ${collectionTypeFor(type.value)}.class, ${componentTypeFor(type.value)}.class, getTypeMapping().getType(${componentTypeFor(type.value)}.class), context);
        [#else]
    ListParser listParser = new ListParser(reader.getValue(), ${classnameFor(type.value)}.class, getTypeMapping().getType(${classnameFor(type.value)}.class.getComponentType()), context);
        [/#if]
    instance.set${type.value.simpleName?cap_first}((${classnameFor(type.value)}) listParser.getList());
      [#else]
        [#if type.value.accessorType.primitive]
    Type type = getTypeMapping().getType([@primitiveWrapper type=type.value.accessorType/].class);
    ${type.value.accessorType} value = [@unwrapIfPrimitive type=type.value.accessorType](([@primitiveWrapper type=type.value.accessorType/]) type.readObject(reader, context))[/@unwrapIfPrimitive];
        [#elseif type.value.binaryData]
    int mechanism = EnunciateClientBinaryDataUtil.[#if type.value.swaRef]SWAREF[#elseif type.value.MTOMAttachment]MTOM[#else]BASE64[/#if];
    ${classnameFor(type.value)} value = (${classnameFor(type.value)}) EnunciateClientBinaryDataUtil.readBinaryData(${classnameFor(type.value)}.class, mechanism, reader, context);
        [#else]
    Type type = getTypeMapping().getType(${classnameFor(type.value)}.class);
    ${classnameFor(type.value)} value = (${classnameFor(type.value)}) type.readObject(reader, context);
        [/#if]
    instance.set${type.value.simpleName?cap_first}(value);
      [/#if]
    [/#if]
  }
  [/#if]
  [#if baseobject || type.elements?size > 0]

  /**
   * Sets a property on an given instance using an element reader.
   *
   * @param object The instance.
   * @param name The name of the property.
   * @param elementReader The element reader
   * @param context The context.
   */
  protected void setElementProperty(Object object, QName name, MessageReader elementReader, MessageContext context) throws XFireFault {
    [#if !baseobject]
    super.setElementProperty(object, name, elementReader, context);
    [/#if]
    [#if type.elements?size > 0]
    final ${classname} instance = (${classname}) object;
      [#list type.elements as element]
        [#assign element_codeblock_index = element_index]
        [#if element.wrapped]
    [#if element_codeblock_index > 0]else [/#if]if ("${type.namespace?default("")}".equals(name.getNamespaceURI()) && ("${element.wrapperName}".equals(name.getLocalPart()))) {
      ElementsUtil.readWrappedElements(elementReader, context, new WrappedItemCallback() {
        public void handleChildElement(QName name, MessageReader elementReader, MessageContext context) throws XFireFault {

        [#assign element_codeblock_index = 0]
        [/#if]
        [#list element.choices as elementChoice]
    [#if (elementChoice_index + element_codeblock_index) > 0]else [/#if]if ("${elementChoice.namespace?default("")}".equals(name.getNamespaceURI()) && ("${elementChoice.name}".equals(name.getLocalPart()))) {
          [#if elementChoice.accessorType.map?default(false)]
      Type type = [@mapTypeOrRegisteredType type=elementChoice.accessorType/];
      ${classnameFor(elementChoice)} value = (${classnameFor(elementChoice)}) type.readObject(elementReader, context);
          [#elseif elementChoice.xmlList]
            [#if elementChoice.accessorType.collection]
      Type type = getTypeMapping().getType(${componentTypeFor(elementChoice)}.class);
      ListParser listParser = new ListParser(elementReader.getValue(), ${collectionTypeFor(elementChoice)}.class, ${componentTypeFor(elementChoice)}.class, type, context);
            [#else]
      Type type = getTypeMapping().getType(${classnameFor(elementChoice)}.class.getComponentType());
      ListParser listParser = new ListParser(elementReader.getValue(), ${classnameFor(elementChoice)}.class, type, context);
            [/#if]
      ${classnameFor(elementChoice)} value = (${classnameFor(elementChoice)}) listParser.getList();
          [#elseif elementChoice.bareAccessorType.primitive]
      Type type = getTypeMapping().getType([@primitiveWrapper type=elementChoice.bareAccessorType/].class);
      ${elementChoice.bareAccessorType} value = [@unwrapIfPrimitive type=elementChoice.bareAccessorType](([@primitiveWrapper type=elementChoice.bareAccessorType/]) type.readObject(elementReader, context))[/@unwrapIfPrimitive];
          [#elseif elementChoice.xmlIDREF]
      Type type = getTypeMapping().getType(java.lang.String.class);
      java.lang.String idref = (java.lang.String) type.readObject(elementReader, context);
      ReferentialIntegrityHandler integrityHandler = (ReferentialIntegrityHandler) context.getProperty(ReferentialIntegrityHandler.class.getName());
      if (integrityHandler == null) {
        integrityHandler = new ReferentialIntegrityHandler();
        context.setProperty(ReferentialIntegrityHandler.class.getName(), integrityHandler);
      }

      integrityHandler.registerReference(idref, ${componentTypeFor(elementChoice)}.class, new ReferenceResolutionCallback() {
        public void handleResolution(Object resolution) {

      ${componentTypeFor(elementChoice)} value = (${componentTypeFor(elementChoice)}) resolution;
          [#elseif elementChoice.binaryData]
      ${componentTypeFor(elementChoice)} value = (${componentTypeFor(elementChoice)}) EnunciateClientBinaryDataUtil.readBinaryData(${componentTypeFor(elementChoice)}.class, EnunciateClientBinaryDataUtil.[#if elementChoice.swaRef]SWAREF[#elseif elementChoice.MTOMAttachment]MTOM[#else]BASE64[/#if], elementReader, context);
          [#else]
      Type type = getTypeMapping().getType(${componentTypeFor(elementChoice)}.class);
      ${componentTypeFor(elementChoice)} value = (${componentTypeFor(elementChoice)}) type.readObject(elementReader, context);
          [/#if]
          [#if element.collectionType]
            [#if (element.adapted && element.adapterType.adaptingType.collection) || element.accessorType.collection]
      if (instance.get${elementChoice.simpleName?cap_first}() == null) {
        instance.set${elementChoice.simpleName?cap_first}((${element.accessorType.declaration.qualifiedName}) ListParser.newCollectionInstance(${collectionTypeFor(element)}.class));
      }
      instance.get${elementChoice.simpleName?cap_first}().add(value);
            [#else]
      ${componentTypeFor(element)}[] elementList = instance.get${elementChoice.simpleName?cap_first}();
      if (elementList == null) {
        elementList = new ${componentTypeFor(element)}[1];
      }
      else {
        ${componentTypeFor(element)}[] tempElementList = new ${componentTypeFor(element)}[elementList.length + 1];
        System.arraycopy(elementList, 0, tempElementList, 0, elementList.length);
        elementList = tempElementList;
      }

              [#if (element.adapted && element.adapterType.adaptingType.primitive) || element.bareAccessorType.primitive]
      java.lang.reflect.Array.set${componentTypeFor(element)?cap_first}(elementList, elementList.length - 1, value);
              [#else]
      java.lang.reflect.Array.set(elementList, elementList.length - 1, value);
              [/#if]
      instance.set${elementChoice.simpleName?cap_first}(elementList);
            [/#if]
          [#else]
      instance.set${elementChoice.simpleName?cap_first}(value);
          [/#if]
          [#if elementChoice.xmlID]
          
      ReferentialIntegrityHandler integrityHandler = (ReferentialIntegrityHandler) context.getProperty(ReferentialIntegrityHandler.class.getName());
      if (integrityHandler == null) {
        integrityHandler = new ReferentialIntegrityHandler();
        context.setProperty(ReferentialIntegrityHandler.class.getName(), integrityHandler);
      }

      integrityHandler.registerResolution(java.lang.String.valueOf(value), instance);
          [#elseif elementChoice.xmlIDREF]
          
        }
      });
          [/#if]
    }
        [/#list]
        [#if element.wrapped]

        }
      });
    }
        [/#if]
      [/#list]
    [/#if]
  }
  [/#if]
  [#if baseobject]

  /**
   * Writes the value for an instance of ${type.simpleName} to a writer.
   *
   * @param object The ${type.simpleName}.
   * @param writer The writer.
   * @param context The context.
   */
  public final void writeObject(Object object, MessageWriter writer, MessageContext context) throws XFireFault {
    writeAttributes(object, writer, context);
    writeElementsOrValue(object, writer, context);
  }
  [/#if]

  /**
   * Writes the attributes for an instance of ${type.simpleName} to a writer.
   *
   * @param object The ${type.simpleName}.
   * @param writer The writer.
   * @param context The context.
   */
  protected void writeAttributes(Object object, MessageWriter writer, MessageContext context) throws XFireFault {
    [#if !baseobject]super.writeAttributes(object, writer, context);[/#if]
    [#if type.attributes?size > 0]
    ${classname} instance = (${classname}) object;

    Object property;  [#--todo: here set the default value, if specified?--]
    ListWriter listWriter;
    // write the attributes.
      [#list type.attributes as attribute]
        [#if attribute.xmlList]
    listWriter = new ListWriter(instance.get${attribute.simpleName?cap_first}(), getTypeMapping(), context);
    property = listWriter.getValue();
        [#else]
    property = [@wrapIfPrimitive type=attribute.accessorType]instance.get${attribute.simpleName?cap_first}()[/@wrapIfPrimitive];
        [/#if]
    if (property != null) {
      Type type = getTypeMapping().getType(property.getClass());
      [#if attribute.namespace?exists]
      MessageWriter attributeWriter = writer.getAttributeWriter("${attribute.name}", "${attribute.namespace}");
      [#else]
      MessageWriter attributeWriter = writer.getAttributeWriter("${attribute.name}", null);
      [/#if]
      [#if attribute.xmlIDREF]
      if (!(type instanceof EnunciatedType)) {
        throw new XFireFault(property.getClass().getName() + " does not have a known xml id, but its id is being referenced.", XFireFault.RECEIVER);
      }
      ((EnunciatedType) type).writeXmlID(property, attributeWriter);
      [#else]
      type.writeObject(property, attributeWriter, context);
      [/#if]
      attributeWriter.close();
    }
        [#if attribute.required]
    else {
      throw new NullPointerException("Required property '${attribute.simpleName}' on ${classname} was not set.");
    }
        [/#if]

      [/#list]
    [#else]
    //no attributes to write...
    [/#if]
  }

  /**
   * Writes the either the value or the child elements for an instance of ${type.simpleName} to a writer.
   *
   * @param object The ${type.simpleName}.
   * @param writer The writer.
   * @param context The context.
   */
  protected void writeElementsOrValue(Object object, MessageWriter writer, MessageContext context) throws XFireFault {
    [#if !baseobject]super.writeElementsOrValue(object, writer, context);[/#if]
    [#if type.value?exists || type.elements?size > 0]
    ${classname} instance = (${classname}) object;

    Object property;  [#--todo: here set the default value, if specified?--]
    ListWriter listWriter;
      [#if type.value?exists]
    //write the value.
        [#if type.value.accessorType.primitive]
    writer.writeValue(String.valueOf(instance.get${type.value.simpleName?cap_first}()));
        [#else]
    ${classnameFor(type.value)} value = instance.get${type.value.simpleName?cap_first}();
    if (value != null) {
          [#if type.value.xmlList]
      ListWriter listWriter = new ListWriter(value, getTypeMapping(), context);
      writer.writeValue(listWriter.getValue());
          [#elseif type.value.binaryData]
      EnunciateClientBinaryDataUtil.writeBinaryData(value, [#if type.value.mimeType?exists]"${type.value.mimeType}"[#else]null[/#if], EnunciateClientBinaryDataUtil.[#if type.value.swaRef]SWAREF[#elseif type.value.MTOMAttachment]MTOM[#else]BASE64[/#if], writer, context);
          [#else]
      Type type = getTypeMapping().getType(${classnameFor(type.value)}.class);
      type.writeObject(value, writer, context);
          [/#if]
    }
        [/#if]
      [#elseif type.elements?size > 0]
    //write the elements.
        [#list type.elements as element]
          [#if element.xmlList || !element.collectionType]
            [#if element.xmlList]
    listWriter = new ListWriter(instance.get${element.simpleName?cap_first}(), getTypeMapping(), context);
    property = listWriter.getValue();
            [#else]
    property = [@wrapIfPrimitive type=element.accessorType]instance.get${element.simpleName?cap_first}()[/@wrapIfPrimitive];
            [/#if]
    if (property != null) {
        [#if element.namespace?exists]
      MessageWriter elementWriter = writer.getElementWriter("${element.name}", "${element.namespace}");
        [#else]
      MessageWriter elementWriter = writer.getElementWriter("${element.name}", null);
        [/#if]
            [#if element.binaryData]
      EnunciateClientBinaryDataUtil.writeBinaryData((${componentTypeFor(element)}) property, [#if element.mimeType?exists]"${element.mimeType}"[#else]null[/#if], EnunciateClientBinaryDataUtil.[#if element.swaRef]SWAREF[#elseif element.MTOMAttachment]MTOM[#else]BASE64[/#if], writer, context);
            [#else]
              [#if element.accessorType.map?default(false)]
      Type type = [@mapTypeOrRegisteredType type=element.accessorType/];
              [#else]
      Type type = getTypeMapping().getType(property.getClass());
              [/#if]
              [#if element.xmlIDREF]
      if (!(type instanceof EnunciatedType)) {
        throw new XFireFault(property.getClass().getName() + " does not have a known xml id, but its id is being referenced.", XFireFault.RECEIVER);
      }
      ((EnunciatedType) type).writeXmlID(property, elementWriter);
              [#else]
      type.writeObject(property, elementWriter, context);
              [/#if]
            [/#if]
      elementWriter.close();
    }
            [#if element.required]
    else {
              [#if element.nillable]
                [#if element.namespace?exists]
      MessageWriter elementWriter = writer.getElementWriter("${element.name}", "${element.namespace}");
                [#else]
      MessageWriter elementWriter = writer.getElementWriter("${element.name}", null);
                [/#if]
      elementWriter.writeXsiNil();
      elementWriter.close();
              [#else]
      throw new NullPointerException("Required property '${element.simpleName}' on ${classname} was not set.");
              [/#if]
    }
            [/#if]
          [#else]
    if (instance.get${element.simpleName?cap_first}() != null) {
            [#if element.wrapped]
      MessageWriter parent = writer;
              [#if element.wrapperNamespace?exists]
      writer = writer.getElementWriter("${element.wrapperName}", "${element.wrapperNamespace}");
              [#else]
      writer = writer.getElementWriter("${element.wrapperName}", null);
              [/#if]
            [/#if]
      java.util.Iterator itemIt = ElementsUtil.asCollection(instance.get${element.simpleName?cap_first}()).iterator();
      while (itemIt.hasNext()) {
        Object item = itemIt.next();
        Type itemType = getTypeMapping().getType(item.getClass());
            [#if element.elementRefs?default(false)]
        if (!(itemType instanceof EnunciatedType)) {
          throw new XFireFault(item.getClass().getName() + " is not a known root element, but it's being serialized as an element ref.", XFireFault.RECEIVER);
        }

        MessageWriter itemWriter = writer.getElementWriter(((EnunciatedType) itemType).getRootElementName());
            [#elseif element.choices?size > 1]
        MessageWriter itemWriter;
              [#list element.choices as choice]
          [#if choice_index > 0]else [/#if]if (item instanceof [#if choice.accessorType.primitive][@primitiveWrapper type=choice.accessorType/][#else]${classnameFor(choice)}[/#if]) {
                [#if choice.namespace?exists]
          itemWriter = writer.getElementWriter("${choice.name}", "${choice.namespace}");
                [#else]
          itemWriter = writer.getElementWriter("${choice.name}", null);
                [/#if]
        }
              [/#list]
        else {
          throw new ClassCastException("Unexpected item type: " + item.getClass());
        }
            [#else]
              [#if element.namespace?exists]
        MessageWriter itemWriter = writer.getElementWriter("${element.name}", "${element.namespace}");
              [#else]
        MessageWriter itemWriter = writer.getElementWriter("${element.name}", null);
              [/#if]
            [/#if]

            [#if element.xmlIDREF]
        if (!(itemType instanceof EnunciatedType)) {
          throw new XFireFault(item.getClass().getName() + " does not have a known xml id, but its id is being referenced.", XFireFault.RECEIVER);
        }

        ((EnunciatedType) itemType).writeXmlID(item, itemWriter);
            [#else]
        itemType.writeObject(item, itemWriter, context);
            [/#if]
        itemWriter.close();
      }
            [#if element.wrapped]
      writer.close();
      writer = parent;
            [/#if]
    }
            [#if element.wrapperNillable]
    else {
              [#if element.wrapperNamespace?exists]
      MessageWriter subwriter = writer.getElementWriter("${element.wrapperName}", "${element.wrapperNamespace}");
              [#else]
      MessageWriter subwriter = writer.getElementWriter("${element.wrapperName}", null);
              [/#if]
      subwriter.writeXsiNil();
      subwriter.close();
    }
            [/#if]
          [/#if]
        [/#list]
      [/#if]
    [#else]
    //no elements or type to write...
    [/#if]
  }

  // Inherited.
  public Class getTypeClass() {
    return ${classname}.class;
  }

  // Inherited.
  public QName getSchemaType() {
    return new QName("${type.namespace?default("")}", "${type.name?default("")}");
  }

  // Inherited.
  public QName getRootElementName() {
  [#if rootElementName?exists]
    return new QName("${rootElementName.namespaceURI}", "${rootElementName.localPart}");
  [#else]
    throw new UnsupportedOperationException("${classname} is not a root element, but it's being serialized as one.");
  [/#if]
  }

  [#if baseobject || type.xmlID?exists]
  // Inherited.
  public void writeXmlID(Object instance, MessageWriter writer) {
    [#if type.xmlID?exists]
    writer.writeValue(java.lang.String.valueOf(((${classname}) instance).get${type.xmlID.simpleName?cap_first}()));
    [#else]
    throw new UnsupportedOperationException("${classname} does not have an xml id.");
    [/#if]
  }
  [/#if]
}
[/@file]
[#t]
[#macro mapTypeOrRegisteredType type]
  [#if type.map?default(false)]new MapType([@mapTypeOrRegisteredType type=type.keyType/], [@mapTypeOrRegisteredType type=type.valueType/])[#else]getTypeMapping().getType(${classnameFor(type)}.class)[/#if]
[/#macro]