[#ftl]
[#-- @ftlvariable name="seeAlsoBeans" type="java.lang.String[]" --]
[#-- @ftlvariable name="endpointInterface" type="org.codehaus.enunciate.contract.jaxws.EndpointInterface" --]
[#--template for the jax-ws endpoint interface.--]
[#if endpointInterface.endpointImplementations?size == 1]
  [#assign impl=endpointInterface.endpointImplementations[0]/]
[/#if]
[@file name=(endpointInterface.simpleName + "Instrumented.java")  package=packageFor(endpointInterface) charset="utf-8"]
// Generated by Enunciate
package ${packageFor(endpointInterface)};

import ${packageFor(endpointInterface) + "." + endpointInterface.simpleName};

/**
 * Instrumented implementation of the {@link ${endpointInterface.simpleName}}. This is used to apply some additional Enunciate-applied metadata around
 * {@link ${endpointInterface.simpleName}} that's not available at runtime.
 */
@javax.jws.WebService (
  name = "${endpointInterface.portTypeName}",
  targetNamespace = "${endpointInterface.targetNamespace}"
)
[#if seeAlsoBeans??]
@javax.xml.bind.annotation.XmlSeeAlso ( {
  [#list seeAlsoBeans as seeAlso]
 ${seeAlso}.class[#if seeAlso_has_next],[/#if]
  [/#list]
} )
[/#if]
[#if ((impl??) && (impl.annotations["javax.xml.ws.soap.MTOM"]??))]
@javax.xml.ws.soap.MTOM (
  enabled = ${impl.annotations["javax.xml.ws.soap.MTOM"].enabled?string},
  threshold = ${impl.annotations["javax.xml.ws.soap.MTOM"].threshold?c}
)
[/#if]
[#if ((impl??) && (impl.annotations["javax.xml.ws.soap.Addressing"]??))]
@javax.xml.ws.soap.Addressing (
  enabled = ${impl.annotations["javax.xml.ws.soap.Addressing"].enabled?string},
  required = ${impl.annotations["javax.xml.ws.soap.Addressing"].required?string}
)
[/#if]
[#if ((impl??) && (impl.annotations["javax.xml.ws.RespectBinding"]??))]
@javax.xml.ws.RespectBinding (
  enabled = ${impl.annotations["javax.xml.ws.RespectBinding"].enabled?string}
)
[/#if]
[#if ((impl??) && (impl.annotations["com.sun.xml.ws.developer.StreamingAttachment"]??))]
@com.sun.xml.ws.developer.StreamingAttachment (
  dir = "${impl.annotations["com.sun.xml.ws.developer.StreamingAttachment"].dir}",
  parseEagerly = ${impl.annotations["com.sun.xml.ws.developer.StreamingAttachment"].parseEagerly?string},
  memoryThreshold = ${impl.annotations["com.sun.xml.ws.developer.StreamingAttachment"].memoryThreshold?c}L
)
[/#if]
public class ${endpointInterface.simpleName}Instrumented {

  private final ${endpointInterface.simpleName} delegate;

  /**
   * Construct an instrumented ${endpointInterface.simpleName} that just delegates to an instance of ${endpointInterface.simpleName}.
   */
  public ${endpointInterface.simpleName}Instrumented() {
    try {
      this.delegate = new ${endpointInterface.endpointImplementations[0].qualifiedName}();
    }
    catch (RuntimeException e) {
      throw e;
    }
    catch (Throwable t) {
      throw new RuntimeException(t);
    }
  }

  /**
   * Construct an instrumented ${endpointInterface.simpleName} that just delegates to an instance of ${endpointInterface.simpleName}.
   */
  public ${endpointInterface.simpleName}Instrumented(${endpointInterface.simpleName} delegate) {
    this.delegate = delegate;
  }

  [@forEachWebMethod endpointInterface=endpointInterface]

  @javax.jws.WebMethod (
    operationName = "${webMethod.operationName}",
    action = "${webMethod.action}"
  )
  @javax.jws.WebResult (
    name = "${webMethod.webResult.elementName}",
    targetNamespace = "${webMethod.webResult.targetNamespace}",
    header = ${webMethod.webResult.header?string},
    partName = "${webMethod.webResult.partName}"
  )
  [#if webMethod.requestWrapper?exists]
    [#assign beanfqn=webMethod.requestWrapper.requestBeanName/]
    [#assign beanPackage=packageFor(beanfqn[0..(beanfqn?last_index_of(".") - 1)])/]
    [#assign simpleBeanName=beanfqn[(beanfqn?last_index_of(".") + 1)..]/]
  @javax.xml.ws.RequestWrapper (
    localName = "${webMethod.requestWrapper.elementName}",
    targetNamespace = "${webMethod.requestWrapper.elementNamespace}",
    className = "${beanPackage}.${simpleBeanName}"
  )
  [/#if]
  [#if webMethod.responseWrapper?exists]
    [#assign beanfqn=webMethod.responseWrapper.responseBeanName/]
    [#assign beanPackage=packageFor(beanfqn[0..(beanfqn?last_index_of(".") - 1)])/]
    [#assign simpleBeanName=beanfqn[(beanfqn?last_index_of(".") + 1)..]/]
  @javax.xml.ws.ResponseWrapper (
    localName = "${webMethod.responseWrapper.elementName}",
    targetNamespace = "${webMethod.responseWrapper.elementNamespace}",
    className = "${beanPackage}.${simpleBeanName}"
  )
  [/#if]
  @javax.jws.soap.SOAPBinding (
    style = javax.jws.soap.SOAPBinding.Style.${webMethod.soapBindingStyle?string},
    use = javax.jws.soap.SOAPBinding.Use.${webMethod.soapUse?string},
    parameterStyle = javax.jws.soap.SOAPBinding.ParameterStyle.${webMethod.soapParameterStyle?string}
  )
  [#if webMethod.oneWay]
  @javax.jws.Oneway
  [/#if]
  [#if webMethod.annotations["javax.xml.bind.annotation.XmlMimeType"]??]
  @javax.xml.bind.annotation.XmlMimeType ( "${webMethod.annotations["javax.xml.bind.annotation.XmlMimeType"].value}" )
  [/#if]
  public ${classnameFor(webMethod.webResult)} ${webMethod.simpleName}([#list webMethod.webParameters as param]@javax.jws.WebParam( name = "${param.elementName}", targetNamespace="${param.targetNamespace}", mode = javax.jws.WebParam.Mode.${param.mode?string} , header = ${param.header?string}, partName = "${param.partName}" ) ${classnameFor(param)} ${param.simpleName}[#if param_has_next], [/#if][/#list]) [#if webMethod.webFaults?size > 0]throws [#list webMethod.webFaults as fault]${classnameFor(fault)}[#if fault_has_next], [/#if][/#list][/#if] {
    [#if !webMethod.returnType.void]return [/#if]delegate.${webMethod.simpleName}([#list webMethod.webParameters as param]${param.simpleName}[#if param_has_next], [/#if][/#list]);
  }
  [/@forEachWebMethod]
}
[/@file]