[#ftl]
[#--template for the amf type.--]
[@file name=(type.simpleName + "AMFMapper.java")  package=type.package.qualifiedName + ".amf" charset="utf-8"]
[#assign baseobject=type.baseObject/]
[#assign classname=classnameFor(type)/]
// Generated by Enunciate
package ${type.package.qualifiedName}.amf;

import org.codehaus.enunciate.modules.amf.*;

/**
 * Mapper from ${type.qualifiedName} to ${classname} and vice-versa.
 *
 * @author Ryan Heaton
 */
public [#if type.abstract]abstract [/#if][#if type.final]final [/#if]class ${type.simpleName}AMFMapper [#if baseobject]extends BaseAMFMapper [#else]extends ${type.superclass.declaration.package.qualifiedName + ".amf." + type.superclass.declaration.simpleName}AMFMapper [/#if]implements AMFMapper {

  public ${type.simpleName}AMFMapper() {
    super(${type.qualifiedName}.class, ${classname}.class[#list type.attributes as attribute], "${attribute.simpleName}"[/#list][#if type.value?exists], "${type.value.simpleName}"[#else][#list type.elements as element], "${element.simpleName}"[/#list][/#if]);
  }
  [#if !type.final]

  protected ${type.simpleName}AMFMapper(Class<? extends ${type.qualifiedName}> jaxbClass, Class<? extends ${classname}> amfClass, String... properties) {
    super(jaxbClass, amfClass, BaseAMFMapper.append(properties[#list type.attributes as attribute], "${attribute.simpleName}"[/#list][#if type.value?exists], "${type.value.simpleName}"[#else][#list type.elements as element], "${element.simpleName}"[/#list][/#if]));
  }
  [/#if]
}
[/@file]