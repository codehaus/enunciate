[#ftl]
[#--template for the client-side complex type.--]
[@file name=(type.simpleName + ".java")  package=packageFor(type) charset="utf-8"]
[#assign baseobject=type.baseObject/]
// Generated by Enunciate
package ${packageFor(type)};

/**
 * ${type.docComment?default("(no documentation provided)")?chop_linebreak?replace("\n", "\n * ")}
 */
public [#if type.abstract]abstract [/#if][#if type.final]final [/#if]class ${simpleNameFor(type)} [#if !baseobject]extends ${classnameFor(type.superclass, true)} [#else]implements com.google.gwt.user.client.rpc.IsSerializable [/#if]{

  [#list type.attributes as attribute]
[@propertyField property=attribute/]
  [/#list]
  [#if type.value?exists]
[@propertyField property=type.value/]
  [#else]
    [#list type.elements as element]
[@propertyField property=element/]
    [/#list]
  [/#if]

  public ${type.simpleName}() {
  }
  [#list type.attributes as attribute]
[@propertyAccessors property=attribute/]
  [/#list]
  [#if type.value?exists]
[@propertyAccessors property=type.value/]
  [#else]
    [#list type.elements as element]
[@propertyAccessors property=element/]
    [/#list]
  [/#if]

}
[/@file]
[#macro propertyAccessors property]
  [#if !property.annotations["org.codehaus.enunciate.modules.gwt.GWTTransient"]?exists]

  /**
   * ${property.javaDoc.return?default(property.docValue?default("(no documentation provided)"))?chop_linebreak?replace("\n", "\n   * ")}
   */
  public ${classnameFor(property)} get${property.simpleName?cap_first}() {
    return this.${property.simpleName};
  }

  /**
   * ${property.javaDoc.return?default(property.docValue?default("(no documentation provided)"))?chop_linebreak?replace("\n", "\n   * ")}
   */
  public void set${property.simpleName?cap_first}(${classnameFor(property)} ${property.simpleName}) {
    this.${property.simpleName} = ${property.simpleName};
  }
    [#if property.accessorType.map?default(false)]

  /**
   * Puts an entry into the ${property.simpleName} map.
   */
  public void putIn${property.simpleName?cap_first}(${classnameFor(property.accessorType.keyType)} key, ${classnameFor(property.accessorType.valueType)} value) {
    if (this.${property.simpleName} == null) {
      this.${property.simpleName} = (${classnameFor(property)}) new java.util.HashMap();
    }

    this.${property.simpleName}.put(key, value);
  }
    [/#if]
  [/#if]
[/#macro]
[#macro propertyField property]
  [#if !property.annotations["org.codehaus.enunciate.modules.gwt.GWTTransient"]?exists]
  private ${classnameFor(property)} ${property.simpleName};
  [/#if]
[/#macro]