[#ftl]
[#--template for the client-side enum type.--]
[@file name=(type.simpleName + ".java")  package=overlayPackageFor(type) charset="utf-8"]
// Generated by Enunciate
package ${overlayPackageFor(type)};

/**
 * ${type.docComment!"(no documentation provided)"?chop_linebreak?replace("\n", "\n * ")}
 */
public enum ${type.simpleName} {
  [#assign enumValueMap=type.enumValues/]
  [#list type.delegate.enumConstants as constant]

  /**
   * ${constant.docComment!"(no documentation provided)"?chop_linebreak?replace("\n", "\n   * ")}
   */
  ${constant.simpleName}[#if constant_has_next],[#else];[/#if]
  [/#list]

  public static ${type.simpleName} fromString(String value) {
    if (value == null) {
      return null;
    }
  [#assign enumValueMap=type.enumValues/]
  [#list type.delegate.enumConstants as constant]
    if ("${enumValueMap[constant.simpleName]}".equals(value)) {
      return ${type.simpleName}.${constant.simpleName};
    }
  [/#list]

    throw new IllegalArgumentException("Illegal enum value: " + value);
  }

  public String toString() {
    switch(this) {
      [#list type.delegate.enumConstants as constant]
      case ${constant.simpleName}:
        return "${enumValueMap[constant.simpleName]}";
      [/#list]
      default:
        throw new IllegalStateException();
    }
  }
}
[/@file]